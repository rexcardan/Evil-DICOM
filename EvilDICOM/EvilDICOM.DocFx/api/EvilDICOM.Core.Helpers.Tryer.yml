### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Helpers.Tryer
  commentId: T:EvilDICOM.Core.Helpers.Tryer
  id: Tryer
  parent: EvilDICOM.Core.Helpers
  children:
  - EvilDICOM.Core.Helpers.Tryer.#ctor
  - EvilDICOM.Core.Helpers.Tryer.Try(System.Action,System.Int32,System.Int32,System.Action{System.Exception})
  - EvilDICOM.Core.Helpers.Tryer.Try(System.Action,System.String)
  langs:
  - csharp
  - vb
  name: Tryer
  nameWithType: Tryer
  fullName: EvilDICOM.Core.Helpers.Tryer
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/Tryer.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Tryer
    path: ../EvilDICOM/Core/Helpers/Tryer.cs
    startLine: 7
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  syntax:
    content: public class Tryer
    content.vb: Public Class Tryer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.Helpers.Tryer.#ctor
  commentId: M:EvilDICOM.Core.Helpers.Tryer.#ctor
  id: '#ctor'
  parent: EvilDICOM.Core.Helpers.Tryer
  langs:
  - csharp
  - vb
  name: Tryer()
  nameWithType: Tryer.Tryer()
  fullName: EvilDICOM.Core.Helpers.Tryer.Tryer()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/Tryer.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/Core/Helpers/Tryer.cs
    startLine: 9
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  syntax:
    content: public Tryer()
    content.vb: Public Sub New
  overload: EvilDICOM.Core.Helpers.Tryer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.Core.Helpers.Tryer.Try(System.Action,System.Int32,System.Int32,System.Action{System.Exception})
  commentId: M:EvilDICOM.Core.Helpers.Tryer.Try(System.Action,System.Int32,System.Int32,System.Action{System.Exception})
  id: Try(System.Action,System.Int32,System.Int32,System.Action{System.Exception})
  parent: EvilDICOM.Core.Helpers.Tryer
  langs:
  - csharp
  - vb
  name: Try(Action, Int32, Int32, Action<Exception>)
  nameWithType: Tryer.Try(Action, Int32, Int32, Action<Exception>)
  fullName: EvilDICOM.Core.Helpers.Tryer.Try(System.Action, System.Int32, System.Int32, System.Action<System.Exception>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/Tryer.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Try
    path: ../EvilDICOM/Core/Helpers/Tryer.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  syntax:
    content: public void Try(Action a, int maxTries = 3, int msDelayBtwTries = 5000, Action<Exception> failureAction = null)
    parameters:
    - id: a
      type: System.Action
    - id: maxTries
      type: System.Int32
    - id: msDelayBtwTries
      type: System.Int32
    - id: failureAction
      type: System.Action{System.Exception}
    content.vb: Public Sub Try(a As Action, maxTries As Integer = 3, msDelayBtwTries As Integer = 5000, failureAction As Action(Of Exception) = Nothing)
  overload: EvilDICOM.Core.Helpers.Tryer.Try*
  nameWithType.vb: Tryer.Try(Action, Int32, Int32, Action(Of Exception))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Helpers.Tryer.Try(System.Action, System.Int32, System.Int32, System.Action(Of System.Exception))
  name.vb: Try(Action, Int32, Int32, Action(Of Exception))
- uid: EvilDICOM.Core.Helpers.Tryer.Try(System.Action,System.String)
  commentId: M:EvilDICOM.Core.Helpers.Tryer.Try(System.Action,System.String)
  id: Try(System.Action,System.String)
  parent: EvilDICOM.Core.Helpers.Tryer
  langs:
  - csharp
  - vb
  name: Try(Action, String)
  nameWithType: Tryer.Try(Action, String)
  fullName: EvilDICOM.Core.Helpers.Tryer.Try(System.Action, System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/Tryer.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Try
    path: ../EvilDICOM/Core/Helpers/Tryer.cs
    startLine: 37
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  syntax:
    content: public static bool Try(Action a, string msg = "")
    parameters:
    - id: a
      type: System.Action
    - id: msg
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Function Try(a As Action, msg As String = "") As Boolean
  overload: EvilDICOM.Core.Helpers.Tryer.Try*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EvilDICOM.Core.Helpers
  commentId: N:EvilDICOM.Core.Helpers
  name: EvilDICOM.Core.Helpers
  nameWithType: EvilDICOM.Core.Helpers
  fullName: EvilDICOM.Core.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.Helpers.Tryer.#ctor*
  commentId: Overload:EvilDICOM.Core.Helpers.Tryer.#ctor
  name: Tryer
  nameWithType: Tryer.Tryer
  fullName: EvilDICOM.Core.Helpers.Tryer.Tryer
- uid: EvilDICOM.Core.Helpers.Tryer.Try*
  commentId: Overload:EvilDICOM.Core.Helpers.Tryer.Try
  name: Try
  nameWithType: Tryer.Try
  fullName: EvilDICOM.Core.Helpers.Tryer.Try
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action{System.Exception}
  commentId: T:System.Action{System.Exception}
  parent: System
  definition: System.Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: System.Action<System.Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: System.Action(Of System.Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
