### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Element.AbstractElement`1
  commentId: T:EvilDICOM.Core.Element.AbstractElement`1
  id: AbstractElement`1
  parent: EvilDICOM.Core.Element
  children:
  - EvilDICOM.Core.Element.AbstractElement`1.#ctor
  - EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0)
  - EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0[])
  - EvilDICOM.Core.Element.AbstractElement`1.Data
  - EvilDICOM.Core.Element.AbstractElement`1.Data_
  - EvilDICOM.Core.Element.AbstractElement`1.DatType
  - EvilDICOM.Core.Element.AbstractElement`1.DData
  - EvilDICOM.Core.Element.AbstractElement`1.DData_
  - EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault
  - EvilDICOM.Core.Element.AbstractElement`1.SetData(`0)
  - EvilDICOM.Core.Element.AbstractElement`1.SetData(`0[])
  - EvilDICOM.Core.Element.AbstractElement`1.Tag
  - EvilDICOM.Core.Element.AbstractElement`1.ToString
  - EvilDICOM.Core.Element.AbstractElement`1.VR
  langs:
  - csharp
  - vb
  name: AbstractElement<T>
  nameWithType: AbstractElement<T>
  fullName: EvilDICOM.Core.Element.AbstractElement<T>
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: AbstractElement
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe overarching abstract class from which all DICOM element classes derive. Contains properties that are common to\nelements.\n"
  example: []
  syntax:
    content: 'public abstract class AbstractElement<T> : IDICOMElement'
    typeParameters:
    - id: T
      description: the data type of the element
    content.vb: >-
      Public MustInherit Class AbstractElement(Of T)
          Implements IDICOMElement
  seealso:
  - linkId: EvilDICOM.Core.Interfaces.IDICOMElement
    commentId: T:EvilDICOM.Core.Interfaces.IDICOMElement
  inheritance:
  - System.Object
  derivedClasses:
  - EvilDICOM.Core.Element.AgeString
  - EvilDICOM.Core.Element.ApplicationEntity
  - EvilDICOM.Core.Element.AttributeTag
  - EvilDICOM.Core.Element.CodeString
  - EvilDICOM.Core.Element.DecimalString
  - EvilDICOM.Core.Element.FloatingPointDouble
  - EvilDICOM.Core.Element.FloatingPointSingle
  - EvilDICOM.Core.Element.IntegerString
  - EvilDICOM.Core.Element.LongString
  - EvilDICOM.Core.Element.LongText
  - EvilDICOM.Core.Element.Other64BitVeryLong
  - EvilDICOM.Core.Element.OtherByteString
  - EvilDICOM.Core.Element.OtherDoubleString
  - EvilDICOM.Core.Element.OtherFloatString
  - EvilDICOM.Core.Element.OtherLongString
  - EvilDICOM.Core.Element.OtherWordString
  - EvilDICOM.Core.Element.PersonName
  - EvilDICOM.Core.Element.RangeableDateTime
  - EvilDICOM.Core.Element.Sequence
  - EvilDICOM.Core.Element.ShortString
  - EvilDICOM.Core.Element.ShortText
  - EvilDICOM.Core.Element.Signed64bitVeryLong
  - EvilDICOM.Core.Element.SignedLong
  - EvilDICOM.Core.Element.SignedShort
  - EvilDICOM.Core.Element.UniqueIdentifier
  - EvilDICOM.Core.Element.UniversalResourceId
  - EvilDICOM.Core.Element.Unknown
  - EvilDICOM.Core.Element.UnlimitedCharacter
  - EvilDICOM.Core.Element.UnlimitedText
  - EvilDICOM.Core.Element.Unsigned64bitVeryLong
  - EvilDICOM.Core.Element.UnsignedLong
  - EvilDICOM.Core.Element.UnsignedShort
  - EvilDICOM.Core.Selection.SequenceSelector
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - EvilDICOM.Core.Interfaces.IDICOMElement.EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Enums.VR)
  - EvilDICOM.Core.Interfaces.IDICOMElement.EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
  nameWithType.vb: AbstractElement(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T)
  name.vb: AbstractElement(Of T)
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.#ctor
  id: '#ctor'
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: AbstractElement()
  nameWithType: AbstractElement<T>.AbstractElement()
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 24
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nInitializes a new instance of the <xref href=\"EvilDICOM.Core.Element.AbstractElement%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AbstractElement()
    content.vb: Public Sub New
  overload: EvilDICOM.Core.Element.AbstractElement`1.#ctor*
  nameWithType.vb: AbstractElement(Of T).AbstractElement()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement()
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0[])
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0[])
  id: '#ctor(EvilDICOM.Core.Element.Tag,`0[])'
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: AbstractElement(Tag, T[])
  nameWithType: AbstractElement<T>.AbstractElement(Tag, T[])
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement(EvilDICOM.Core.Element.Tag, T[])
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 34
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nInitializes a new instance of the <xref href=\"EvilDICOM.Core.Element.AbstractElement%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AbstractElement(Tag tag, T[] dataArray)
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
      description: The tag.
    - id: dataArray
      type: '{T}[]'
      description: The data array.
    content.vb: Public Sub New(tag As Tag, dataArray As T())
  overload: EvilDICOM.Core.Element.AbstractElement`1.#ctor*
  nameWithType.vb: AbstractElement(Of T).AbstractElement(Tag, T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement(EvilDICOM.Core.Element.Tag, T())
  name.vb: AbstractElement(Tag, T())
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0)
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.#ctor(EvilDICOM.Core.Element.Tag,`0)
  id: '#ctor(EvilDICOM.Core.Element.Tag,`0)'
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: AbstractElement(Tag, T)
  nameWithType: AbstractElement<T>.AbstractElement(Tag, T)
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement(EvilDICOM.Core.Element.Tag, T)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 46
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nInitializes a new instance of the <xref href=\"EvilDICOM.Core.Element.AbstractElement%601\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public AbstractElement(Tag tag, T data)
    parameters:
    - id: tag
      type: EvilDICOM.Core.Element.Tag
      description: The tag.
    - id: data
      type: '{T}'
      description: The data.
    content.vb: Public Sub New(tag As Tag, data As T)
  overload: EvilDICOM.Core.Element.AbstractElement`1.#ctor*
  nameWithType.vb: AbstractElement(Of T).AbstractElement(Tag, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement(EvilDICOM.Core.Element.Tag, T)
- uid: EvilDICOM.Core.Element.AbstractElement`1.VR
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.VR
  id: VR
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: VR
  nameWithType: AbstractElement<T>.VR
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.VR
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: VR
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 57
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe value representation of the element\n"
  example: []
  syntax:
    content: public VR VR { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Core.Enums.VR
      description: The vr.
    content.vb: Public Property VR As VR
  overload: EvilDICOM.Core.Element.AbstractElement`1.VR*
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement.VR
  nameWithType.vb: AbstractElement(Of T).VR
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).VR
- uid: EvilDICOM.Core.Element.AbstractElement`1.Data
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.Data
  id: Data
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: Data
  nameWithType: AbstractElement<T>.Data
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Data
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Data
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 69
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe data of the element\n"
  example: []
  syntax:
    content: public virtual T Data { get; set; }
    parameters: []
    return:
      type: '{T}'
      description: The data.
    content.vb: Public Overridable Property Data As T
  overload: EvilDICOM.Core.Element.AbstractElement`1.Data*
  nameWithType.vb: AbstractElement(Of T).Data
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Data
- uid: EvilDICOM.Core.Element.AbstractElement`1.Data_
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.Data_
  id: Data_
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: Data_
  nameWithType: AbstractElement<T>.Data_
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Data_
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Data_
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 79
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe data of the element as a list (for multiple data)\n"
  example: []
  syntax:
    content: public virtual List<T> Data_ { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
      description: The data_.
    content.vb: Public Overridable Property Data_ As List(Of T)
  overload: EvilDICOM.Core.Element.AbstractElement`1.Data_*
  nameWithType.vb: AbstractElement(Of T).Data_
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Data_
- uid: EvilDICOM.Core.Element.AbstractElement`1.Tag
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.Tag
  id: Tag
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: Tag
  nameWithType: AbstractElement<T>.Tag
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Tag
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Tag
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 89
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe tag of the element\n"
  example: []
  syntax:
    content: public Tag Tag { get; set; }
    parameters: []
    return:
      type: EvilDICOM.Core.Element.Tag
      description: The tag.
    content.vb: Public Property Tag As Tag
  overload: EvilDICOM.Core.Element.AbstractElement`1.Tag*
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement.Tag
  nameWithType.vb: AbstractElement(Of T).Tag
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Tag
- uid: EvilDICOM.Core.Element.AbstractElement`1.DatType
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.DatType
  id: DatType
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: DatType
  nameWithType: AbstractElement<T>.DatType
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DatType
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DatType
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 95
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe clr type of the contained data\n"
  example: []
  syntax:
    content: public Type DatType { get; }
    parameters: []
    return:
      type: System.Type
      description: The type of the dat.
    content.vb: Public ReadOnly Property DatType As Type
  overload: EvilDICOM.Core.Element.AbstractElement`1.DatType*
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement.DatType
  nameWithType.vb: AbstractElement(Of T).DatType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DatType
- uid: EvilDICOM.Core.Element.AbstractElement`1.DData
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.DData
  id: DData
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: DData
  nameWithType: AbstractElement<T>.DData
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DData
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DData
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 104
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe non-typed data that can be accessed in a dynamic context\n"
  example: []
  syntax:
    content: public object DData { get; set; }
    parameters: []
    return:
      type: System.Object
      description: The d data.
    content.vb: Public Property DData As Object
  overload: EvilDICOM.Core.Element.AbstractElement`1.DData*
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement.DData
  nameWithType.vb: AbstractElement(Of T).DData
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DData
- uid: EvilDICOM.Core.Element.AbstractElement`1.DData_
  commentId: P:EvilDICOM.Core.Element.AbstractElement`1.DData_
  id: DData_
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: DData_
  nameWithType: AbstractElement<T>.DData_
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DData_
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DData_
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 114
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nThe dynamic data in the element stored in a list of type T\n"
  example: []
  syntax:
    content: public IList DData_ { get; set; }
    parameters: []
    return:
      type: System.Collections.IList
      description: The d data_.
    content.vb: Public Property DData_ As IList
  overload: EvilDICOM.Core.Element.AbstractElement`1.DData_*
  implements:
  - EvilDICOM.Core.Interfaces.IDICOMElement.DData_
  nameWithType.vb: AbstractElement(Of T).DData_
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DData_
- uid: EvilDICOM.Core.Element.AbstractElement`1.ToString
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.ToString
  id: ToString
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AbstractElement<T>.ToString()
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.ToString()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ToString
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 124
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nTo string override to visualize tag and vr of element\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this instance.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: EvilDICOM.Core.Element.AbstractElement`1.ToString*
  nameWithType.vb: AbstractElement(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).ToString()
- uid: EvilDICOM.Core.Element.AbstractElement`1.SetData(`0)
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.SetData(`0)
  id: SetData(`0)
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: SetData(T)
  nameWithType: AbstractElement<T>.SetData(T)
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.SetData(T)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SetData
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 137
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nPlumbing method wrap the data in a DICOMData container\n"
  example: []
  syntax:
    content: public void SetData(T value)
    parameters:
    - id: value
      type: '{T}'
      description: the typed data
    content.vb: Public Sub SetData(value As T)
  overload: EvilDICOM.Core.Element.AbstractElement`1.SetData*
  nameWithType.vb: AbstractElement(Of T).SetData(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).SetData(T)
- uid: EvilDICOM.Core.Element.AbstractElement`1.SetData(`0[])
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.SetData(`0[])
  id: SetData(`0[])
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: SetData(T[])
  nameWithType: AbstractElement<T>.SetData(T[])
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.SetData(T[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SetData
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 146
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nPlumbing method wrap the data in a DICOMData container\n"
  example: []
  syntax:
    content: public void SetData(T[] dataArray)
    parameters:
    - id: dataArray
      type: '{T}[]'
      description: The data array.
    content.vb: Public Sub SetData(dataArray As T())
  overload: EvilDICOM.Core.Element.AbstractElement`1.SetData*
  nameWithType.vb: AbstractElement(Of T).SetData(T())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).SetData(T())
  name.vb: SetData(T())
- uid: EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault
  commentId: M:EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault
  id: GetDataOrDefault
  parent: EvilDICOM.Core.Element.AbstractElement`1
  langs:
  - csharp
  - vb
  name: GetDataOrDefault()
  nameWithType: AbstractElement<T>.GetDataOrDefault()
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.GetDataOrDefault()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Element/AbstractElement.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: GetDataOrDefault
    path: ../EvilDICOM/Core/Element/AbstractElement.cs
    startLine: 155
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Element
  summary: "\nPlumbing method to get data from the underlying DICOMData object\n"
  example: []
  syntax:
    content: public T GetDataOrDefault()
    return:
      type: '{T}'
      description: T.
    content.vb: Public Function GetDataOrDefault As T
  overload: EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault*
  nameWithType.vb: AbstractElement(Of T).GetDataOrDefault()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).GetDataOrDefault()
references:
- uid: EvilDICOM.Core.Interfaces.IDICOMElement
  commentId: T:EvilDICOM.Core.Interfaces.IDICOMElement
  parent: EvilDICOM.Core.Interfaces
  name: IDICOMElement
  nameWithType: IDICOMElement
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement
- uid: EvilDICOM.Core.Element
  commentId: N:EvilDICOM.Core.Element
  name: EvilDICOM.Core.Element
  nameWithType: EvilDICOM.Core.Element
  fullName: EvilDICOM.Core.Element
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Enums.VR)
  commentId: M:EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement,EvilDICOM.Core.Enums.VR)
  parent: EvilDICOM.Core.Extensions.IDICOMElementExtensions
  definition: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement,EvilDICOM.Core.Enums.VR)
  name: IsVR(VR)
  nameWithType: IDICOMElementExtensions.IsVR(VR)
  fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Enums.VR)
  spec.csharp:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Enums.VR)
    name: IsVR
    nameWithType: IDICOMElementExtensions.IsVR
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.Enums.VR
    name: VR
    nameWithType: VR
    fullName: EvilDICOM.Core.Enums.VR
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Enums.VR)
    name: IsVR
    nameWithType: IDICOMElementExtensions.IsVR
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.Enums.VR
    name: VR
    nameWithType: VR
    fullName: EvilDICOM.Core.Enums.VR
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
  commentId: M:EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
  parent: EvilDICOM.Core.Extensions.IDICOMElementExtensions
  definition: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
  name: ToXElement()
  nameWithType: IDICOMElementExtensions.ToXElement()
  fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement()
  spec.csharp:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
    name: ToXElement
    nameWithType: IDICOMElementExtensions.ToXElement
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
    name: ToXElement
    nameWithType: IDICOMElementExtensions.ToXElement
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Interfaces
  commentId: N:EvilDICOM.Core.Interfaces
  name: EvilDICOM.Core.Interfaces
  nameWithType: EvilDICOM.Core.Interfaces
  fullName: EvilDICOM.Core.Interfaces
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement,EvilDICOM.Core.Enums.VR)
  commentId: M:EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement,EvilDICOM.Core.Enums.VR)
  name: IsVR(IDICOMElement, VR)
  nameWithType: IDICOMElementExtensions.IsVR(IDICOMElement, VR)
  fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement, EvilDICOM.Core.Enums.VR)
  spec.csharp:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement,EvilDICOM.Core.Enums.VR)
    name: IsVR
    nameWithType: IDICOMElementExtensions.IsVR
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EvilDICOM.Core.Enums.VR
    name: VR
    nameWithType: VR
    fullName: EvilDICOM.Core.Enums.VR
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR(EvilDICOM.Core.Interfaces.IDICOMElement,EvilDICOM.Core.Enums.VR)
    name: IsVR
    nameWithType: IDICOMElementExtensions.IsVR
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.IsVR
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EvilDICOM.Core.Enums.VR
    name: VR
    nameWithType: VR
    fullName: EvilDICOM.Core.Enums.VR
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions
  commentId: T:EvilDICOM.Core.Extensions.IDICOMElementExtensions
  parent: EvilDICOM.Core.Extensions
  name: IDICOMElementExtensions
  nameWithType: IDICOMElementExtensions
  fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions
- uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
  commentId: M:EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
  name: ToXElement(IDICOMElement)
  nameWithType: IDICOMElementExtensions.ToXElement(IDICOMElement)
  fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
  spec.csharp:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
    name: ToXElement
    nameWithType: IDICOMElementExtensions.ToXElement
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement(EvilDICOM.Core.Interfaces.IDICOMElement)
    name: ToXElement
    nameWithType: IDICOMElementExtensions.ToXElement
    fullName: EvilDICOM.Core.Extensions.IDICOMElementExtensions.ToXElement
  - name: (
    nameWithType: (
    fullName: (
  - uid: EvilDICOM.Core.Interfaces.IDICOMElement
    name: IDICOMElement
    nameWithType: IDICOMElement
    fullName: EvilDICOM.Core.Interfaces.IDICOMElement
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Extensions
  commentId: N:EvilDICOM.Core.Extensions
  name: EvilDICOM.Core.Extensions
  nameWithType: EvilDICOM.Core.Extensions
  fullName: EvilDICOM.Core.Extensions
- uid: EvilDICOM.Core.Element.AbstractElement`1
  commentId: T:EvilDICOM.Core.Element.AbstractElement`1
  name: AbstractElement<T>
  nameWithType: AbstractElement<T>
  fullName: EvilDICOM.Core.Element.AbstractElement<T>
  nameWithType.vb: AbstractElement(Of T)
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T)
  name.vb: AbstractElement(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.Element.AbstractElement`1
    name: AbstractElement
    nameWithType: AbstractElement
    fullName: EvilDICOM.Core.Element.AbstractElement
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.Element.AbstractElement`1
    name: AbstractElement
    nameWithType: AbstractElement
    fullName: EvilDICOM.Core.Element.AbstractElement
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Element.AbstractElement`1.#ctor*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.#ctor
  name: AbstractElement
  nameWithType: AbstractElement<T>.AbstractElement
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.AbstractElement
  nameWithType.vb: AbstractElement(Of T).AbstractElement
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).AbstractElement
- uid: EvilDICOM.Core.Element.Tag
  commentId: T:EvilDICOM.Core.Element.Tag
  parent: EvilDICOM.Core.Element
  name: Tag
  nameWithType: Tag
  fullName: EvilDICOM.Core.Element.Tag
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EvilDICOM.Core.Element.AbstractElement`1.VR*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.VR
  name: VR
  nameWithType: AbstractElement<T>.VR
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.VR
  nameWithType.vb: AbstractElement(Of T).VR
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).VR
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.VR
  commentId: P:EvilDICOM.Core.Interfaces.IDICOMElement.VR
  parent: EvilDICOM.Core.Interfaces.IDICOMElement
  name: VR
  nameWithType: IDICOMElement.VR
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement.VR
- uid: EvilDICOM.Core.Enums.VR
  commentId: T:EvilDICOM.Core.Enums.VR
  parent: EvilDICOM.Core.Enums
  name: VR
  nameWithType: VR
  fullName: EvilDICOM.Core.Enums.VR
- uid: EvilDICOM.Core.Enums
  commentId: N:EvilDICOM.Core.Enums
  name: EvilDICOM.Core.Enums
  nameWithType: EvilDICOM.Core.Enums
  fullName: EvilDICOM.Core.Enums
- uid: EvilDICOM.Core.Element.AbstractElement`1.Data*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.Data
  name: Data
  nameWithType: AbstractElement<T>.Data
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Data
  nameWithType.vb: AbstractElement(Of T).Data
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Data
- uid: EvilDICOM.Core.Element.AbstractElement`1.Data_*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.Data_
  name: Data_
  nameWithType: AbstractElement<T>.Data_
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Data_
  nameWithType.vb: AbstractElement(Of T).Data_
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Data_
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EvilDICOM.Core.Element.AbstractElement`1.Tag*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.Tag
  name: Tag
  nameWithType: AbstractElement<T>.Tag
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.Tag
  nameWithType.vb: AbstractElement(Of T).Tag
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).Tag
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.Tag
  commentId: P:EvilDICOM.Core.Interfaces.IDICOMElement.Tag
  parent: EvilDICOM.Core.Interfaces.IDICOMElement
  name: Tag
  nameWithType: IDICOMElement.Tag
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement.Tag
- uid: EvilDICOM.Core.Element.AbstractElement`1.DatType*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.DatType
  name: DatType
  nameWithType: AbstractElement<T>.DatType
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DatType
  nameWithType.vb: AbstractElement(Of T).DatType
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DatType
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.DatType
  commentId: P:EvilDICOM.Core.Interfaces.IDICOMElement.DatType
  parent: EvilDICOM.Core.Interfaces.IDICOMElement
  name: DatType
  nameWithType: IDICOMElement.DatType
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement.DatType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: EvilDICOM.Core.Element.AbstractElement`1.DData*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.DData
  name: DData
  nameWithType: AbstractElement<T>.DData
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DData
  nameWithType.vb: AbstractElement(Of T).DData
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DData
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.DData
  commentId: P:EvilDICOM.Core.Interfaces.IDICOMElement.DData
  parent: EvilDICOM.Core.Interfaces.IDICOMElement
  name: DData
  nameWithType: IDICOMElement.DData
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement.DData
- uid: EvilDICOM.Core.Element.AbstractElement`1.DData_*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.DData_
  name: DData_
  nameWithType: AbstractElement<T>.DData_
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.DData_
  nameWithType.vb: AbstractElement(Of T).DData_
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).DData_
- uid: EvilDICOM.Core.Interfaces.IDICOMElement.DData_
  commentId: P:EvilDICOM.Core.Interfaces.IDICOMElement.DData_
  parent: EvilDICOM.Core.Interfaces.IDICOMElement
  name: DData_
  nameWithType: IDICOMElement.DData_
  fullName: EvilDICOM.Core.Interfaces.IDICOMElement.DData_
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Element.AbstractElement`1.ToString*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.ToString
  name: ToString
  nameWithType: AbstractElement<T>.ToString
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.ToString
  nameWithType.vb: AbstractElement(Of T).ToString
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).ToString
- uid: EvilDICOM.Core.Element.AbstractElement`1.SetData*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.SetData
  name: SetData
  nameWithType: AbstractElement<T>.SetData
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.SetData
  nameWithType.vb: AbstractElement(Of T).SetData
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).SetData
- uid: EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault*
  commentId: Overload:EvilDICOM.Core.Element.AbstractElement`1.GetDataOrDefault
  name: GetDataOrDefault
  nameWithType: AbstractElement<T>.GetDataOrDefault
  fullName: EvilDICOM.Core.Element.AbstractElement<T>.GetDataOrDefault
  nameWithType.vb: AbstractElement(Of T).GetDataOrDefault
  fullName.vb: EvilDICOM.Core.Element.AbstractElement(Of T).GetDataOrDefault
