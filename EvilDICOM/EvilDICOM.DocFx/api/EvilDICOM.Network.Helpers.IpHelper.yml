### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Network.Helpers.IpHelper
  commentId: T:EvilDICOM.Network.Helpers.IpHelper
  id: IpHelper
  parent: EvilDICOM.Network.Helpers
  children:
  - EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress
  - EvilDICOM.Network.Helpers.IpHelper.Logger
  - EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: IpHelper
  nameWithType: IpHelper
  fullName: EvilDICOM.Network.Helpers.IpHelper
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Helpers/IpHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: IpHelper
    path: ../EvilDICOM/Network/Helpers/IpHelper.cs
    startLine: 11
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Helpers
  syntax:
    content: public class IpHelper
    content.vb: Public Class IpHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Network.Helpers.IpHelper.Logger
  commentId: F:EvilDICOM.Network.Helpers.IpHelper.Logger
  id: Logger
  parent: EvilDICOM.Network.Helpers.IpHelper
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: IpHelper.Logger
  fullName: EvilDICOM.Network.Helpers.IpHelper.Logger
  type: Field
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Helpers/IpHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Logger
    path: ../EvilDICOM/Network/Helpers/IpHelper.cs
    startLine: 13
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Helpers
  syntax:
    content: public static ILogger Logger
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Public Shared Logger As ILogger
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress
  commentId: M:EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress
  id: LocalIPAddress
  parent: EvilDICOM.Network.Helpers.IpHelper
  langs:
  - csharp
  - vb
  name: LocalIPAddress()
  nameWithType: IpHelper.LocalIPAddress()
  fullName: EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Helpers/IpHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: LocalIPAddress
    path: ../EvilDICOM/Network/Helpers/IpHelper.cs
    startLine: 15
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Helpers
  syntax:
    content: public static string LocalIPAddress()
    return:
      type: System.String
    content.vb: Public Shared Function LocalIPAddress As String
  overload: EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress(System.String,System.Int32)
  commentId: M:EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress(System.String,System.Int32)
  id: VerifyIPAddress(System.String,System.Int32)
  parent: EvilDICOM.Network.Helpers.IpHelper
  langs:
  - csharp
  - vb
  name: VerifyIPAddress(String, Int32)
  nameWithType: IpHelper.VerifyIPAddress(String, Int32)
  fullName: EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Helpers/IpHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: VerifyIPAddress
    path: ../EvilDICOM/Network/Helpers/IpHelper.cs
    startLine: 29
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Helpers
  syntax:
    content: public static (IPEndPoint Address, bool Success) VerifyIPAddress(string inputIpAddress, int port)
    parameters:
    - id: inputIpAddress
      type: System.String
    - id: port
      type: System.Int32
    return:
      type: System.ValueTuple{System.Net.IPEndPoint,System.Boolean}
    content.vb: Public Shared Function VerifyIPAddress(inputIpAddress As String, port As Integer) As(Address As IPEndPoint, Success As Boolean)
  overload: EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EvilDICOM.Network.Helpers
  commentId: N:EvilDICOM.Network.Helpers
  name: EvilDICOM.Network.Helpers
  nameWithType: EvilDICOM.Network.Helpers
  fullName: EvilDICOM.Network.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress*
  commentId: Overload:EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress
  name: LocalIPAddress
  nameWithType: IpHelper.LocalIPAddress
  fullName: EvilDICOM.Network.Helpers.IpHelper.LocalIPAddress
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress*
  commentId: Overload:EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress
  name: VerifyIPAddress
  nameWithType: IpHelper.VerifyIPAddress
  fullName: EvilDICOM.Network.Helpers.IpHelper.VerifyIPAddress
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueTuple{System.Net.IPEndPoint,System.Boolean}
  commentId: T:System.ValueTuple{System.Net.IPEndPoint,System.Boolean}
  parent: System
  isExternal: true
  name: ValueTuple<IPEndPoint, Boolean>
  nameWithType: ValueTuple<IPEndPoint, Boolean>
  fullName: System.ValueTuple<System.Net.IPEndPoint, System.Boolean>
  nameWithType.vb: ValueTuple(Of IPEndPoint, Boolean)
  fullName.vb: System.ValueTuple(Of System.Net.IPEndPoint, System.Boolean)
  name.vb: ValueTuple(Of IPEndPoint, Boolean)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPEndPoint
    name: IPEndPoint
    nameWithType: IPEndPoint
    fullName: System.Net.IPEndPoint
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
