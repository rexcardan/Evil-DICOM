### YamlMime:ManagedReference
items:
- uid: EvilDICOM.CV.Helpers.VolumeCalculator
  commentId: T:EvilDICOM.CV.Helpers.VolumeCalculator
  id: VolumeCalculator
  parent: EvilDICOM.CV.Helpers
  children:
  - EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta})
  - EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List{System.Double},System.Double)
  langs:
  - csharp
  - vb
  name: VolumeCalculator
  nameWithType: VolumeCalculator
  fullName: EvilDICOM.CV.Helpers.VolumeCalculator
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/Helpers/VolumeCalculator.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: VolumeCalculator
    path: ../EvilDICOM.CV/Helpers/VolumeCalculator.cs
    startLine: 9
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.Helpers
  syntax:
    content: public class VolumeCalculator
    content.vb: Public Class VolumeCalculator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta})
  commentId: M:EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta})
  id: CalculateVolume(System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta})
  parent: EvilDICOM.CV.Helpers.VolumeCalculator
  langs:
  - csharp
  - vb
  name: CalculateVolume(List<SliceContourMeta>)
  nameWithType: VolumeCalculator.CalculateVolume(List<SliceContourMeta>)
  fullName: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List<EvilDICOM.CV.RT.Meta.SliceContourMeta>)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/Helpers/VolumeCalculator.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: CalculateVolume
    path: ../EvilDICOM.CV/Helpers/VolumeCalculator.cs
    startLine: 16
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.Helpers
  summary: "\nCalculates the volume in cubic centimeters of a structure using slice contours\n"
  example: []
  syntax:
    content: public static double CalculateVolume(List<SliceContourMeta> sliceContours)
    parameters:
    - id: sliceContours
      type: System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta}
      description: the contours for all slices of a structure
    return:
      type: System.Double
      description: the volume in cubic centimeters
    content.vb: Public Shared Function CalculateVolume(sliceContours As List(Of SliceContourMeta)) As Double
  overload: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume*
  nameWithType.vb: VolumeCalculator.CalculateVolume(List(Of SliceContourMeta))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List(Of EvilDICOM.CV.RT.Meta.SliceContourMeta))
  name.vb: CalculateVolume(List(Of SliceContourMeta))
- uid: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List{System.Double},System.Double)
  commentId: M:EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List{System.Double},System.Double)
  id: CalculateVolume(System.Collections.Generic.List{System.Double},System.Double)
  parent: EvilDICOM.CV.Helpers.VolumeCalculator
  langs:
  - csharp
  - vb
  name: CalculateVolume(List<Double>, Double)
  nameWithType: VolumeCalculator.CalculateVolume(List<Double>, Double)
  fullName: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List<System.Double>, System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/Helpers/VolumeCalculator.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: CalculateVolume
    path: ../EvilDICOM.CV/Helpers/VolumeCalculator.cs
    startLine: 38
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.Helpers
  syntax:
    content: public static double CalculateVolume(List<double> areas, double voxelVol)
    parameters:
    - id: areas
      type: System.Collections.Generic.List{System.Double}
    - id: voxelVol
      type: System.Double
    return:
      type: System.Double
    content.vb: Public Shared Function CalculateVolume(areas As List(Of Double), voxelVol As Double) As Double
  overload: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume*
  nameWithType.vb: VolumeCalculator.CalculateVolume(List(Of Double), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume(System.Collections.Generic.List(Of System.Double), System.Double)
  name.vb: CalculateVolume(List(Of Double), Double)
references:
- uid: EvilDICOM.CV.Helpers
  commentId: N:EvilDICOM.CV.Helpers
  name: EvilDICOM.CV.Helpers
  nameWithType: EvilDICOM.CV.Helpers
  fullName: EvilDICOM.CV.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume*
  commentId: Overload:EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume
  name: CalculateVolume
  nameWithType: VolumeCalculator.CalculateVolume
  fullName: EvilDICOM.CV.Helpers.VolumeCalculator.CalculateVolume
- uid: System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta}
  commentId: T:System.Collections.Generic.List{EvilDICOM.CV.RT.Meta.SliceContourMeta}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SliceContourMeta>
  nameWithType: List<SliceContourMeta>
  fullName: System.Collections.Generic.List<EvilDICOM.CV.RT.Meta.SliceContourMeta>
  nameWithType.vb: List(Of SliceContourMeta)
  fullName.vb: System.Collections.Generic.List(Of EvilDICOM.CV.RT.Meta.SliceContourMeta)
  name.vb: List(Of SliceContourMeta)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.CV.RT.Meta.SliceContourMeta
    name: SliceContourMeta
    nameWithType: SliceContourMeta
    fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.CV.RT.Meta.SliceContourMeta
    name: SliceContourMeta
    nameWithType: SliceContourMeta
    fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Double>
  nameWithType: List<Double>
  fullName: System.Collections.Generic.List<System.Double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of System.Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
