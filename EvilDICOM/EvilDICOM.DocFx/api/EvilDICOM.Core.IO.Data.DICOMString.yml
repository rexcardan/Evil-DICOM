### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Data.DICOMString
  commentId: T:EvilDICOM.Core.IO.Data.DICOMString
  id: DICOMString
  parent: EvilDICOM.Core.IO.Data
  children:
  - EvilDICOM.Core.IO.Data.DICOMString.Read(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  - EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  - EvilDICOM.Core.IO.Data.DICOMString.Write(System.String,EvilDICOM.Core.Enums.StringEncoding)
  langs:
  - csharp
  - vb
  name: DICOMString
  nameWithType: DICOMString
  fullName: EvilDICOM.Core.IO.Data.DICOMString
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/DICOMString.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DICOMString
    path: ../EvilDICOM/Core/IO/Data/DICOMString.cs
    startLine: 12
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public class DICOMString
    content.vb: Public Class DICOMString
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.IO.Data.DICOMString.Read(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  commentId: M:EvilDICOM.Core.IO.Data.DICOMString.Read(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  id: Read(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  parent: EvilDICOM.Core.IO.Data.DICOMString
  langs:
  - csharp
  - vb
  name: Read(Byte[], StringEncoding)
  nameWithType: DICOMString.Read(Byte[], StringEncoding)
  fullName: EvilDICOM.Core.IO.Data.DICOMString.Read(System.Byte[], EvilDICOM.Core.Enums.StringEncoding)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/DICOMString.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Read
    path: ../EvilDICOM/Core/IO/Data/DICOMString.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static string Read(byte[] data, StringEncoding enc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: enc
      type: EvilDICOM.Core.Enums.StringEncoding
    return:
      type: System.String
    content.vb: Public Shared Function Read(data As Byte(), enc As StringEncoding) As String
  overload: EvilDICOM.Core.IO.Data.DICOMString.Read*
  nameWithType.vb: DICOMString.Read(Byte(), StringEncoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.DICOMString.Read(System.Byte(), EvilDICOM.Core.Enums.StringEncoding)
  name.vb: Read(Byte(), StringEncoding)
- uid: EvilDICOM.Core.IO.Data.DICOMString.Write(System.String,EvilDICOM.Core.Enums.StringEncoding)
  commentId: M:EvilDICOM.Core.IO.Data.DICOMString.Write(System.String,EvilDICOM.Core.Enums.StringEncoding)
  id: Write(System.String,EvilDICOM.Core.Enums.StringEncoding)
  parent: EvilDICOM.Core.IO.Data.DICOMString
  langs:
  - csharp
  - vb
  name: Write(String, StringEncoding)
  nameWithType: DICOMString.Write(String, StringEncoding)
  fullName: EvilDICOM.Core.IO.Data.DICOMString.Write(System.String, EvilDICOM.Core.Enums.StringEncoding)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/DICOMString.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Write
    path: ../EvilDICOM/Core/IO/Data/DICOMString.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static byte[] Write(string data, StringEncoding enc)
    parameters:
    - id: data
      type: System.String
    - id: enc
      type: EvilDICOM.Core.Enums.StringEncoding
    return:
      type: System.Byte[]
    content.vb: Public Shared Function Write(data As String, enc As StringEncoding) As Byte()
  overload: EvilDICOM.Core.IO.Data.DICOMString.Write*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  commentId: M:EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  id: ReadMultiple(System.Byte[],EvilDICOM.Core.Enums.StringEncoding)
  parent: EvilDICOM.Core.IO.Data.DICOMString
  langs:
  - csharp
  - vb
  name: ReadMultiple(Byte[], StringEncoding)
  nameWithType: DICOMString.ReadMultiple(Byte[], StringEncoding)
  fullName: EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple(System.Byte[], EvilDICOM.Core.Enums.StringEncoding)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/DICOMString.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadMultiple
    path: ../EvilDICOM/Core/IO/Data/DICOMString.cs
    startLine: 36
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static List<string> ReadMultiple(byte[] data, StringEncoding enc)
    parameters:
    - id: data
      type: System.Byte[]
    - id: enc
      type: EvilDICOM.Core.Enums.StringEncoding
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Shared Function ReadMultiple(data As Byte(), enc As StringEncoding) As List(Of String)
  overload: EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple*
  nameWithType.vb: DICOMString.ReadMultiple(Byte(), StringEncoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple(System.Byte(), EvilDICOM.Core.Enums.StringEncoding)
  name.vb: ReadMultiple(Byte(), StringEncoding)
references:
- uid: EvilDICOM.Core.IO.Data
  commentId: N:EvilDICOM.Core.IO.Data
  name: EvilDICOM.Core.IO.Data
  nameWithType: EvilDICOM.Core.IO.Data
  fullName: EvilDICOM.Core.IO.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.IO.Data.DICOMString.Read*
  commentId: Overload:EvilDICOM.Core.IO.Data.DICOMString.Read
  name: Read
  nameWithType: DICOMString.Read
  fullName: EvilDICOM.Core.IO.Data.DICOMString.Read
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.Enums.StringEncoding
  commentId: T:EvilDICOM.Core.Enums.StringEncoding
  parent: EvilDICOM.Core.Enums
  name: StringEncoding
  nameWithType: StringEncoding
  fullName: EvilDICOM.Core.Enums.StringEncoding
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: EvilDICOM.Core.Enums
  commentId: N:EvilDICOM.Core.Enums
  name: EvilDICOM.Core.Enums
  nameWithType: EvilDICOM.Core.Enums
  fullName: EvilDICOM.Core.Enums
- uid: EvilDICOM.Core.IO.Data.DICOMString.Write*
  commentId: Overload:EvilDICOM.Core.IO.Data.DICOMString.Write
  name: Write
  nameWithType: DICOMString.Write
  fullName: EvilDICOM.Core.IO.Data.DICOMString.Write
- uid: EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple*
  commentId: Overload:EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple
  name: ReadMultiple
  nameWithType: DICOMString.ReadMultiple
  fullName: EvilDICOM.Core.IO.Data.DICOMString.ReadMultiple
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
