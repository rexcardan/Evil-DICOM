### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader
  commentId: T:EvilDICOM.Core.IO.Data.LittleEndianReader
  id: LittleEndianReader
  parent: EvilDICOM.Core.IO.Data
  children:
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong(System.Byte[])
  - EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle(System.Byte[])
  langs:
  - csharp
  - vb
  name: LittleEndianReader
  nameWithType: LittleEndianReader
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: LittleEndianReader
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 11
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: 'public class LittleEndianReader : AbstractBinaryDataReader'
    content.vb: >-
      Public Class LittleEndianReader
          Inherits AbstractBinaryDataReader
  inheritance:
  - System.Object
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  inheritedMembers:
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],System.Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],System.Func{System.Byte[],System.Single})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],System.Func{System.Byte[],System.Double})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],System.Func{System.Byte[],System.Int32})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte[],System.Func{System.Byte[],System.Int64})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],System.Func{System.Byte[],System.UInt32})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte[],System.Func{System.Byte[],System.UInt64})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],System.Func{System.Byte[],System.Int16})
  - EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],System.Func{System.Byte[],System.UInt16})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag(System.Byte[])
  id: ReadTag(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadTag(Byte[])
  nameWithType: LittleEndianReader.ReadTag(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadTag
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 13
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static Tag ReadTag(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: EvilDICOM.Core.Element.Tag
    content.vb: Public Shared Function ReadTag(data As Byte()) As Tag
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag*
  nameWithType.vb: LittleEndianReader.ReadTag(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag(System.Byte())
  name.vb: ReadTag(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision(System.Byte[])
  id: ReadSinglePrecision(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSinglePrecision(Byte[])
  nameWithType: LittleEndianReader.ReadSinglePrecision(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSinglePrecision
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 20
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static float[] ReadSinglePrecision(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Single[]
    content.vb: Public Shared Function ReadSinglePrecision(data As Byte()) As Single()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision*
  nameWithType.vb: LittleEndianReader.ReadSinglePrecision(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision(System.Byte())
  name.vb: ReadSinglePrecision(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision(System.Byte[])
  id: ReadDoublePrecision(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadDoublePrecision(Byte[])
  nameWithType: LittleEndianReader.ReadDoublePrecision(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadDoublePrecision
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 25
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static double[] ReadDoublePrecision(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Double[]
    content.vb: Public Shared Function ReadDoublePrecision(data As Byte()) As Double()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision*
  nameWithType.vb: LittleEndianReader.ReadDoublePrecision(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision(System.Byte())
  name.vb: ReadDoublePrecision(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong(System.Byte[])
  id: ReadSignedLong(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSignedLong(Byte[])
  nameWithType: LittleEndianReader.ReadSignedLong(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSignedLong
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 30
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static int[] ReadSignedLong(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Int32[]
    content.vb: Public Shared Function ReadSignedLong(data As Byte()) As Integer()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong*
  nameWithType.vb: LittleEndianReader.ReadSignedLong(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong(System.Byte())
  name.vb: ReadSignedLong(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong(System.Byte[])
  id: ReadUnsignedLong(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedLong(Byte[])
  nameWithType: LittleEndianReader.ReadUnsignedLong(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadUnsignedLong
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 35
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static uint[] ReadUnsignedLong(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt32[]
    content.vb: Public Shared Function ReadUnsignedLong(data As Byte()) As UInteger()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong*
  nameWithType.vb: LittleEndianReader.ReadUnsignedLong(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong(System.Byte())
  name.vb: ReadUnsignedLong(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort(System.Byte[])
  id: ReadSignedShort(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSignedShort(Byte[])
  nameWithType: LittleEndianReader.ReadSignedShort(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSignedShort
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 40
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static short[] ReadSignedShort(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Int16[]
    content.vb: Public Shared Function ReadSignedShort(data As Byte()) As Short()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort*
  nameWithType.vb: LittleEndianReader.ReadSignedShort(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort(System.Byte())
  name.vb: ReadSignedShort(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort(System.Byte[])
  id: ReadUnsignedShort(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedShort(Byte[])
  nameWithType: LittleEndianReader.ReadUnsignedShort(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadUnsignedShort
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 45
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static ushort[] ReadUnsignedShort(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt16[]
    content.vb: Public Shared Function ReadUnsignedShort(data As Byte()) As UShort()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort*
  nameWithType.vb: LittleEndianReader.ReadUnsignedShort(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort(System.Byte())
  name.vb: ReadUnsignedShort(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong(System.Byte[])
  id: ReadSignedVeryLong(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSignedVeryLong(Byte[])
  nameWithType: LittleEndianReader.ReadSignedVeryLong(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSignedVeryLong
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 50
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static long[] ReadSignedVeryLong(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Int64[]
    content.vb: Public Shared Function ReadSignedVeryLong(data As Byte()) As Long()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong*
  nameWithType.vb: LittleEndianReader.ReadSignedVeryLong(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong(System.Byte())
  name.vb: ReadSignedVeryLong(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong(System.Byte[])
  id: ReadUnsignedVeryLong(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedVeryLong(Byte[])
  nameWithType: LittleEndianReader.ReadUnsignedVeryLong(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadUnsignedVeryLong
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 55
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static ulong[] ReadUnsignedVeryLong(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt64[]
    content.vb: Public Shared Function ReadUnsignedVeryLong(data As Byte()) As ULong()
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong*
  nameWithType.vb: LittleEndianReader.ReadUnsignedVeryLong(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong(System.Byte())
  name.vb: ReadUnsignedVeryLong(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle(System.Byte[])
  id: ReadTagSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadTagSingle(Byte[])
  nameWithType: LittleEndianReader.ReadTagSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadTagSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 62
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static Tag ReadTagSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: EvilDICOM.Core.Element.Tag
    content.vb: Public Shared Function ReadTagSingle(data As Byte()) As Tag
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle*
  nameWithType.vb: LittleEndianReader.ReadTagSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle(System.Byte())
  name.vb: ReadTagSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle(System.Byte[])
  id: ReadSinglePrecisionSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSinglePrecisionSingle(Byte[])
  nameWithType: LittleEndianReader.ReadSinglePrecisionSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSinglePrecisionSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 67
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static float ReadSinglePrecisionSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Single
    content.vb: Public Shared Function ReadSinglePrecisionSingle(data As Byte()) As Single
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle*
  nameWithType.vb: LittleEndianReader.ReadSinglePrecisionSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle(System.Byte())
  name.vb: ReadSinglePrecisionSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle(System.Byte[])
  id: ReadDoublePrecisionSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadDoublePrecisionSingle(Byte[])
  nameWithType: LittleEndianReader.ReadDoublePrecisionSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadDoublePrecisionSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 72
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static double ReadDoublePrecisionSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Double
    content.vb: Public Shared Function ReadDoublePrecisionSingle(data As Byte()) As Double
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle*
  nameWithType.vb: LittleEndianReader.ReadDoublePrecisionSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle(System.Byte())
  name.vb: ReadDoublePrecisionSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle(System.Byte[])
  id: ReadSignedLongSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSignedLongSingle(Byte[])
  nameWithType: LittleEndianReader.ReadSignedLongSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSignedLongSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 77
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static int ReadSignedLongSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Int32
    content.vb: Public Shared Function ReadSignedLongSingle(data As Byte()) As Integer
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle*
  nameWithType.vb: LittleEndianReader.ReadSignedLongSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle(System.Byte())
  name.vb: ReadSignedLongSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle(System.Byte[])
  id: ReadUnsignedLongSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedLongSingle(Byte[])
  nameWithType: LittleEndianReader.ReadUnsignedLongSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadUnsignedLongSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 82
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static uint ReadUnsignedLongSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt32
    content.vb: Public Shared Function ReadUnsignedLongSingle(data As Byte()) As UInteger
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle*
  nameWithType.vb: LittleEndianReader.ReadUnsignedLongSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle(System.Byte())
  name.vb: ReadUnsignedLongSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle(System.Byte[])
  id: ReadSignedShortSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSignedShortSingle(Byte[])
  nameWithType: LittleEndianReader.ReadSignedShortSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSignedShortSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 87
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static short ReadSignedShortSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Int16
    content.vb: Public Shared Function ReadSignedShortSingle(data As Byte()) As Short
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle*
  nameWithType.vb: LittleEndianReader.ReadSignedShortSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle(System.Byte())
  name.vb: ReadSignedShortSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle(System.Byte[])
  id: ReadUnsignedShortSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedShortSingle(Byte[])
  nameWithType: LittleEndianReader.ReadUnsignedShortSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadUnsignedShortSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 92
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static ushort ReadUnsignedShortSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt16
    content.vb: Public Shared Function ReadUnsignedShortSingle(data As Byte()) As UShort
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle*
  nameWithType.vb: LittleEndianReader.ReadUnsignedShortSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle(System.Byte())
  name.vb: ReadUnsignedShortSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle(System.Byte[])
  id: ReadSignedVeryLongSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadSignedVeryLongSingle(Byte[])
  nameWithType: LittleEndianReader.ReadSignedVeryLongSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadSignedVeryLongSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 97
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static long ReadSignedVeryLongSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.Int64
    content.vb: Public Shared Function ReadSignedVeryLongSingle(data As Byte()) As Long
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle*
  nameWithType.vb: LittleEndianReader.ReadSignedVeryLongSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle(System.Byte())
  name.vb: ReadSignedVeryLongSingle(Byte())
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle(System.Byte[])
  commentId: M:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle(System.Byte[])
  id: ReadUnsignedVeryLongSingle(System.Byte[])
  parent: EvilDICOM.Core.IO.Data.LittleEndianReader
  langs:
  - csharp
  - vb
  name: ReadUnsignedVeryLongSingle(Byte[])
  nameWithType: LittleEndianReader.ReadUnsignedVeryLongSingle(Byte[])
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle(System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/IO/Data/LittleEndianReader.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ReadUnsignedVeryLongSingle
    path: ../EvilDICOM/Core/IO/Data/LittleEndianReader.cs
    startLine: 102
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.IO.Data
  syntax:
    content: public static ulong ReadUnsignedVeryLongSingle(byte[] data)
    parameters:
    - id: data
      type: System.Byte[]
    return:
      type: System.UInt64
    content.vb: Public Shared Function ReadUnsignedVeryLongSingle(data As Byte()) As ULong
  overload: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle*
  nameWithType.vb: LittleEndianReader.ReadUnsignedVeryLongSingle(Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle(System.Byte())
  name.vb: ReadUnsignedVeryLongSingle(Byte())
references:
- uid: EvilDICOM.Core.IO.Data
  commentId: N:EvilDICOM.Core.IO.Data
  name: EvilDICOM.Core.IO.Data
  nameWithType: EvilDICOM.Core.IO.Data
  fullName: EvilDICOM.Core.IO.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  commentId: T:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  parent: EvilDICOM.Core.IO.Data
  name: AbstractBinaryDataReader
  nameWithType: AbstractBinaryDataReader
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],System.Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],System.Func{System.Byte[],EvilDICOM.Core.Element.Tag})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadTag(Byte[], Func<Byte[], Tag>)
  nameWithType: AbstractBinaryDataReader.ReadTag(Byte[], Func<Byte[], Tag>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[], System.Func<System.Byte[], EvilDICOM.Core.Element.Tag>)
  nameWithType.vb: AbstractBinaryDataReader.ReadTag(Byte(), Func(Of Byte(), Tag))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte(), System.Func(Of System.Byte(), EvilDICOM.Core.Element.Tag))
  name.vb: ReadTag(Byte(), Func(Of Byte(), Tag))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],System.Func{System.Byte[],EvilDICOM.Core.Element.Tag})
    name: ReadTag
    nameWithType: AbstractBinaryDataReader.ReadTag
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag(System.Byte[],System.Func{System.Byte[],EvilDICOM.Core.Element.Tag})
    name: ReadTag
    nameWithType: AbstractBinaryDataReader.ReadTag
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadTag
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: EvilDICOM.Core.Element.Tag
    name: Tag
    nameWithType: Tag
    fullName: EvilDICOM.Core.Element.Tag
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],System.Func{System.Byte[],System.Single})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],System.Func{System.Byte[],System.Single})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadSinglePrecision(Byte[], Func<Byte[], Single>)
  nameWithType: AbstractBinaryDataReader.ReadSinglePrecision(Byte[], Func<Byte[], Single>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[], System.Func<System.Byte[], System.Single>)
  nameWithType.vb: AbstractBinaryDataReader.ReadSinglePrecision(Byte(), Func(Of Byte(), Single))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte(), System.Func(Of System.Byte(), System.Single))
  name.vb: ReadSinglePrecision(Byte(), Func(Of Byte(), Single))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],System.Func{System.Byte[],System.Single})
    name: ReadSinglePrecision
    nameWithType: AbstractBinaryDataReader.ReadSinglePrecision
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision(System.Byte[],System.Func{System.Byte[],System.Single})
    name: ReadSinglePrecision
    nameWithType: AbstractBinaryDataReader.ReadSinglePrecision
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSinglePrecision
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],System.Func{System.Byte[],System.Double})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],System.Func{System.Byte[],System.Double})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadDoublePrecision(Byte[], Func<Byte[], Double>)
  nameWithType: AbstractBinaryDataReader.ReadDoublePrecision(Byte[], Func<Byte[], Double>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[], System.Func<System.Byte[], System.Double>)
  nameWithType.vb: AbstractBinaryDataReader.ReadDoublePrecision(Byte(), Func(Of Byte(), Double))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte(), System.Func(Of System.Byte(), System.Double))
  name.vb: ReadDoublePrecision(Byte(), Func(Of Byte(), Double))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],System.Func{System.Byte[],System.Double})
    name: ReadDoublePrecision
    nameWithType: AbstractBinaryDataReader.ReadDoublePrecision
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision(System.Byte[],System.Func{System.Byte[],System.Double})
    name: ReadDoublePrecision
    nameWithType: AbstractBinaryDataReader.ReadDoublePrecision
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadDoublePrecision
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],System.Func{System.Byte[],System.Int32})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],System.Func{System.Byte[],System.Int32})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadSignedLong(Byte[], Func<Byte[], Int32>)
  nameWithType: AbstractBinaryDataReader.ReadSignedLong(Byte[], Func<Byte[], Int32>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[], System.Func<System.Byte[], System.Int32>)
  nameWithType.vb: AbstractBinaryDataReader.ReadSignedLong(Byte(), Func(Of Byte(), Int32))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte(), System.Func(Of System.Byte(), System.Int32))
  name.vb: ReadSignedLong(Byte(), Func(Of Byte(), Int32))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],System.Func{System.Byte[],System.Int32})
    name: ReadSignedLong
    nameWithType: AbstractBinaryDataReader.ReadSignedLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong(System.Byte[],System.Func{System.Byte[],System.Int32})
    name: ReadSignedLong
    nameWithType: AbstractBinaryDataReader.ReadSignedLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte[],System.Func{System.Byte[],System.Int64})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte[],System.Func{System.Byte[],System.Int64})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadSignedVeryLong(Byte[], Func<Byte[], Int64>)
  nameWithType: AbstractBinaryDataReader.ReadSignedVeryLong(Byte[], Func<Byte[], Int64>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte[], System.Func<System.Byte[], System.Int64>)
  nameWithType.vb: AbstractBinaryDataReader.ReadSignedVeryLong(Byte(), Func(Of Byte(), Int64))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte(), System.Func(Of System.Byte(), System.Int64))
  name.vb: ReadSignedVeryLong(Byte(), Func(Of Byte(), Int64))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte[],System.Func{System.Byte[],System.Int64})
    name: ReadSignedVeryLong
    nameWithType: AbstractBinaryDataReader.ReadSignedVeryLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong(System.Byte[],System.Func{System.Byte[],System.Int64})
    name: ReadSignedVeryLong
    nameWithType: AbstractBinaryDataReader.ReadSignedVeryLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedVeryLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],System.Func{System.Byte[],System.UInt32})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],System.Func{System.Byte[],System.UInt32})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadUnsignedLong(Byte[], Func<Byte[], UInt32>)
  nameWithType: AbstractBinaryDataReader.ReadUnsignedLong(Byte[], Func<Byte[], UInt32>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[], System.Func<System.Byte[], System.UInt32>)
  nameWithType.vb: AbstractBinaryDataReader.ReadUnsignedLong(Byte(), Func(Of Byte(), UInt32))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte(), System.Func(Of System.Byte(), System.UInt32))
  name.vb: ReadUnsignedLong(Byte(), Func(Of Byte(), UInt32))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],System.Func{System.Byte[],System.UInt32})
    name: ReadUnsignedLong
    nameWithType: AbstractBinaryDataReader.ReadUnsignedLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong(System.Byte[],System.Func{System.Byte[],System.UInt32})
    name: ReadUnsignedLong
    nameWithType: AbstractBinaryDataReader.ReadUnsignedLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte[],System.Func{System.Byte[],System.UInt64})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte[],System.Func{System.Byte[],System.UInt64})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadUnsignedVeryLong(Byte[], Func<Byte[], UInt64>)
  nameWithType: AbstractBinaryDataReader.ReadUnsignedVeryLong(Byte[], Func<Byte[], UInt64>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte[], System.Func<System.Byte[], System.UInt64>)
  nameWithType.vb: AbstractBinaryDataReader.ReadUnsignedVeryLong(Byte(), Func(Of Byte(), UInt64))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte(), System.Func(Of System.Byte(), System.UInt64))
  name.vb: ReadUnsignedVeryLong(Byte(), Func(Of Byte(), UInt64))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte[],System.Func{System.Byte[],System.UInt64})
    name: ReadUnsignedVeryLong
    nameWithType: AbstractBinaryDataReader.ReadUnsignedVeryLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong(System.Byte[],System.Func{System.Byte[],System.UInt64})
    name: ReadUnsignedVeryLong
    nameWithType: AbstractBinaryDataReader.ReadUnsignedVeryLong
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedVeryLong
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],System.Func{System.Byte[],System.Int16})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],System.Func{System.Byte[],System.Int16})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadSignedShort(Byte[], Func<Byte[], Int16>)
  nameWithType: AbstractBinaryDataReader.ReadSignedShort(Byte[], Func<Byte[], Int16>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[], System.Func<System.Byte[], System.Int16>)
  nameWithType.vb: AbstractBinaryDataReader.ReadSignedShort(Byte(), Func(Of Byte(), Int16))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte(), System.Func(Of System.Byte(), System.Int16))
  name.vb: ReadSignedShort(Byte(), Func(Of Byte(), Int16))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],System.Func{System.Byte[],System.Int16})
    name: ReadSignedShort
    nameWithType: AbstractBinaryDataReader.ReadSignedShort
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort(System.Byte[],System.Func{System.Byte[],System.Int16})
    name: ReadSignedShort
    nameWithType: AbstractBinaryDataReader.ReadSignedShort
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadSignedShort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],System.Func{System.Byte[],System.UInt16})
  commentId: M:EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],System.Func{System.Byte[],System.UInt16})
  parent: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader
  isExternal: true
  name: ReadUnsignedShort(Byte[], Func<Byte[], UInt16>)
  nameWithType: AbstractBinaryDataReader.ReadUnsignedShort(Byte[], Func<Byte[], UInt16>)
  fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[], System.Func<System.Byte[], System.UInt16>)
  nameWithType.vb: AbstractBinaryDataReader.ReadUnsignedShort(Byte(), Func(Of Byte(), UInt16))
  fullName.vb: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte(), System.Func(Of System.Byte(), System.UInt16))
  name.vb: ReadUnsignedShort(Byte(), Func(Of Byte(), UInt16))
  spec.csharp:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],System.Func{System.Byte[],System.UInt16})
    name: ReadUnsignedShort
    nameWithType: AbstractBinaryDataReader.ReadUnsignedShort
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort(System.Byte[],System.Func{System.Byte[],System.UInt16})
    name: ReadUnsignedShort
    nameWithType: AbstractBinaryDataReader.ReadUnsignedShort
    fullName: EvilDICOM.Core.IO.Data.AbstractBinaryDataReader.ReadUnsignedShort
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag
  name: ReadTag
  nameWithType: LittleEndianReader.ReadTag
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTag
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.Element.Tag
  commentId: T:EvilDICOM.Core.Element.Tag
  parent: EvilDICOM.Core.Element
  name: Tag
  nameWithType: Tag
  fullName: EvilDICOM.Core.Element.Tag
- uid: EvilDICOM.Core.Element
  commentId: N:EvilDICOM.Core.Element
  name: EvilDICOM.Core.Element
  nameWithType: EvilDICOM.Core.Element
  fullName: EvilDICOM.Core.Element
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision
  name: ReadSinglePrecision
  nameWithType: LittleEndianReader.ReadSinglePrecision
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecision
- uid: System.Single[]
  isExternal: true
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullName.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision
  name: ReadDoublePrecision
  nameWithType: LittleEndianReader.ReadDoublePrecision
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecision
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong
  name: ReadSignedLong
  nameWithType: LittleEndianReader.ReadSignedLong
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLong
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong
  name: ReadUnsignedLong
  nameWithType: LittleEndianReader.ReadUnsignedLong
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLong
- uid: System.UInt32[]
  isExternal: true
  name: UInt32[]
  nameWithType: UInt32[]
  fullName: System.UInt32[]
  nameWithType.vb: UInt32()
  fullName.vb: System.UInt32()
  name.vb: UInt32()
  spec.csharp:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort
  name: ReadSignedShort
  nameWithType: LittleEndianReader.ReadSignedShort
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShort
- uid: System.Int16[]
  isExternal: true
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  nameWithType.vb: Int16()
  fullName.vb: System.Int16()
  name.vb: Int16()
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort
  name: ReadUnsignedShort
  nameWithType: LittleEndianReader.ReadUnsignedShort
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShort
- uid: System.UInt16[]
  isExternal: true
  name: UInt16[]
  nameWithType: UInt16[]
  fullName: System.UInt16[]
  nameWithType.vb: UInt16()
  fullName.vb: System.UInt16()
  name.vb: UInt16()
  spec.csharp:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong
  name: ReadSignedVeryLong
  nameWithType: LittleEndianReader.ReadSignedVeryLong
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLong
- uid: System.Int64[]
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong
  name: ReadUnsignedVeryLong
  nameWithType: LittleEndianReader.ReadUnsignedVeryLong
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLong
- uid: System.UInt64[]
  isExternal: true
  name: UInt64[]
  nameWithType: UInt64[]
  fullName: System.UInt64[]
  nameWithType.vb: UInt64()
  fullName.vb: System.UInt64()
  name.vb: UInt64()
  spec.csharp:
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle
  name: ReadTagSingle
  nameWithType: LittleEndianReader.ReadTagSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadTagSingle
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle
  name: ReadSinglePrecisionSingle
  nameWithType: LittleEndianReader.ReadSinglePrecisionSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSinglePrecisionSingle
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle
  name: ReadDoublePrecisionSingle
  nameWithType: LittleEndianReader.ReadDoublePrecisionSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadDoublePrecisionSingle
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle
  name: ReadSignedLongSingle
  nameWithType: LittleEndianReader.ReadSignedLongSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedLongSingle
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle
  name: ReadUnsignedLongSingle
  nameWithType: LittleEndianReader.ReadUnsignedLongSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedLongSingle
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle
  name: ReadSignedShortSingle
  nameWithType: LittleEndianReader.ReadSignedShortSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedShortSingle
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle
  name: ReadUnsignedShortSingle
  nameWithType: LittleEndianReader.ReadUnsignedShortSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedShortSingle
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle
  name: ReadSignedVeryLongSingle
  nameWithType: LittleEndianReader.ReadSignedVeryLongSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadSignedVeryLongSingle
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle*
  commentId: Overload:EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle
  name: ReadUnsignedVeryLongSingle
  nameWithType: LittleEndianReader.ReadUnsignedVeryLongSingle
  fullName: EvilDICOM.Core.IO.Data.LittleEndianReader.ReadUnsignedVeryLongSingle
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
