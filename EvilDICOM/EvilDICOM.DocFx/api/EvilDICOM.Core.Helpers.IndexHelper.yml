### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Helpers.IndexHelper
  commentId: T:EvilDICOM.Core.Helpers.IndexHelper
  id: IndexHelper
  parent: EvilDICOM.Core.Helpers
  children:
  - EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY(System.Int32,System.Int32)
  - EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ(System.Int32,System.Int32,System.Int32)
  - EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex(System.Int32,System.Int32,System.Int32)
  - EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: IndexHelper
  nameWithType: IndexHelper
  fullName: EvilDICOM.Core.Helpers.IndexHelper
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/IndexHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: IndexHelper
    path: ../EvilDICOM/Core/Helpers/IndexHelper.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  summary: "\nHas helpful methods for converting from an index to x,y,z coordinates in a pixel lattice and visa versa\n"
  example: []
  syntax:
    content: public class IndexHelper
    content.vb: Public Class IndexHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY(System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY(System.Int32,System.Int32)
  id: IndexToLatticeXY(System.Int32,System.Int32)
  parent: EvilDICOM.Core.Helpers.IndexHelper
  langs:
  - csharp
  - vb
  name: IndexToLatticeXY(Int32, Int32)
  nameWithType: IndexHelper.IndexToLatticeXY(Int32, Int32)
  fullName: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/IndexHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: IndexToLatticeXY
    path: ../EvilDICOM/Core/Helpers/IndexHelper.cs
    startLine: 13
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  summary: "\nConverts a input 1D index of a pixel in a lattice to the X, Y coordinates of the pixel\n"
  example: []
  syntax:
    content: public static (int x, int y) IndexToLatticeXY(int index, int dimX)
    parameters:
    - id: index
      type: System.Int32
      description: the 1D index of the pixel
    - id: dimX
      type: System.Int32
      description: the width of the lattice in the X direction
    return:
      type: System.ValueTuple{System.Int32,System.Int32}
      description: 'a value tuple of the X,Y,Z coordiantes '
    content.vb: Public Shared Function IndexToLatticeXY(index As Integer, dimX As Integer) As(x As Integer, y As Integer)
  overload: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex(System.Int32,System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex(System.Int32,System.Int32,System.Int32)
  id: LatticeXYToIndex(System.Int32,System.Int32,System.Int32)
  parent: EvilDICOM.Core.Helpers.IndexHelper
  langs:
  - csharp
  - vb
  name: LatticeXYToIndex(Int32, Int32, Int32)
  nameWithType: IndexHelper.LatticeXYToIndex(Int32, Int32, Int32)
  fullName: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/IndexHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: LatticeXYToIndex
    path: ../EvilDICOM/Core/Helpers/IndexHelper.cs
    startLine: 27
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  summary: "\nConverts X,Y coordinates in a 2D pixel lattice to a 1D index\n"
  example: []
  syntax:
    content: public static int LatticeXYToIndex(int x, int y, int dimX)
    parameters:
    - id: x
      type: System.Int32
      description: the x coordinate of the pixel
    - id: y
      type: System.Int32
      description: the y coordinate of the pixel
    - id: dimX
      type: System.Int32
      description: the width of the lattice in the X direction
    return:
      type: System.Int32
      description: the index of the pixel in the 2D lattife
    content.vb: Public Shared Function LatticeXYToIndex(x As Integer, y As Integer, dimX As Integer) As Integer
  overload: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ(System.Int32,System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ(System.Int32,System.Int32,System.Int32)
  id: IndexToLatticeXYZ(System.Int32,System.Int32,System.Int32)
  parent: EvilDICOM.Core.Helpers.IndexHelper
  langs:
  - csharp
  - vb
  name: IndexToLatticeXYZ(Int32, Int32, Int32)
  nameWithType: IndexHelper.IndexToLatticeXYZ(Int32, Int32, Int32)
  fullName: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/IndexHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: IndexToLatticeXYZ
    path: ../EvilDICOM/Core/Helpers/IndexHelper.cs
    startLine: 39
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  summary: "\nConverts a input 1D index of a pixel in a lattice to the X, Y, Z coordinates of the pixel\n"
  example: []
  syntax:
    content: public static (int x, int y, int z) IndexToLatticeXYZ(int index, int dimX, int dimY)
    parameters:
    - id: index
      type: System.Int32
      description: the 1D index of the pixel
    - id: dimX
      type: System.Int32
      description: the width of the lattice in the X direction
    - id: dimY
      type: System.Int32
      description: the height of the lattice in the Y direction
    return:
      type: System.ValueTuple{System.Int32,System.Int32,System.Int32}
      description: 'a value tuple of the X,Y,Z coordiantes '
    content.vb: Public Shared Function IndexToLatticeXYZ(index As Integer, dimX As Integer, dimY As Integer) As(x As Integer, y As Integer, z As Integer)
  overload: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: LatticeXYZToIndex(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: EvilDICOM.Core.Helpers.IndexHelper
  langs:
  - csharp
  - vb
  name: LatticeXYZToIndex(Int32, Int32, Int32, Int32, Int32)
  nameWithType: IndexHelper.LatticeXYZToIndex(Int32, Int32, Int32, Int32, Int32)
  fullName: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/IndexHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: LatticeXYZToIndex
    path: ../EvilDICOM/Core/Helpers/IndexHelper.cs
    startLine: 56
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  summary: "\nConverts X,Y,Z coordinates in a 3D pixel lattice to a 1D index\n"
  example: []
  syntax:
    content: public static int LatticeXYZToIndex(int x, int y, int z, int dimX, int dimY)
    parameters:
    - id: x
      type: System.Int32
      description: the x coordinate of the pixel
    - id: y
      type: System.Int32
      description: the y coordinate of the pixel
    - id: z
      type: System.Int32
      description: the z coordinate of the pixel
    - id: dimX
      type: System.Int32
      description: the width of the lattice in the X direction
    - id: dimY
      type: System.Int32
      description: the height of the lattice in the Y direction
    return:
      type: System.Int32
      description: the index of the pixel in the 3D lattice
    content.vb: Public Shared Function LatticeXYZToIndex(x As Integer, y As Integer, z As Integer, dimX As Integer, dimY As Integer) As Integer
  overload: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EvilDICOM.Core.Helpers
  commentId: N:EvilDICOM.Core.Helpers
  name: EvilDICOM.Core.Helpers
  nameWithType: EvilDICOM.Core.Helpers
  fullName: EvilDICOM.Core.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY*
  commentId: Overload:EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY
  name: IndexToLatticeXY
  nameWithType: IndexHelper.IndexToLatticeXY
  fullName: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXY
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueTuple{System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32}
  parent: System
  isExternal: true
  name: ValueTuple<Int32, Int32>
  nameWithType: ValueTuple<Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32>
  nameWithType.vb: ValueTuple(Of Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32)
  name.vb: ValueTuple(Of Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`2
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex*
  commentId: Overload:EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex
  name: LatticeXYToIndex
  nameWithType: IndexHelper.LatticeXYToIndex
  fullName: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYToIndex
- uid: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ*
  commentId: Overload:EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ
  name: IndexToLatticeXYZ
  nameWithType: IndexHelper.IndexToLatticeXYZ
  fullName: EvilDICOM.Core.Helpers.IndexHelper.IndexToLatticeXYZ
- uid: System.ValueTuple{System.Int32,System.Int32,System.Int32}
  commentId: T:System.ValueTuple{System.Int32,System.Int32,System.Int32}
  parent: System
  isExternal: true
  name: ValueTuple<Int32, Int32, Int32>
  nameWithType: ValueTuple<Int32, Int32, Int32>
  fullName: System.ValueTuple<System.Int32, System.Int32, System.Int32>
  nameWithType.vb: ValueTuple(Of Int32, Int32, Int32)
  fullName.vb: System.ValueTuple(Of System.Int32, System.Int32, System.Int32)
  name.vb: ValueTuple(Of Int32, Int32, Int32)
  spec.csharp:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ValueTuple`3
    name: ValueTuple
    nameWithType: ValueTuple
    fullName: System.ValueTuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex*
  commentId: Overload:EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex
  name: LatticeXYZToIndex
  nameWithType: IndexHelper.LatticeXYZToIndex
  fullName: EvilDICOM.Core.Helpers.IndexHelper.LatticeXYZToIndex
