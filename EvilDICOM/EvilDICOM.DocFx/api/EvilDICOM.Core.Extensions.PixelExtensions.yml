### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Extensions.PixelExtensions
  commentId: T:EvilDICOM.Core.Extensions.PixelExtensions
  id: PixelExtensions
  parent: EvilDICOM.Core.Extensions
  children:
  - EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int16[],System.Int32,System.Int32,System.Int32)
  - EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int32[],System.Int32,System.Int32,System.Int32)
  - EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int64[],System.Int32,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: PixelExtensions
  nameWithType: PixelExtensions
  fullName: EvilDICOM.Core.Extensions.PixelExtensions
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/PixelExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: PixelExtensions
    path: ../EvilDICOM/Core/Extensions/PixelExtensions.cs
    startLine: 4
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  syntax:
    content: public static class PixelExtensions
    content.vb: Public Module PixelExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int32[],System.Int32,System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int32[],System.Int32,System.Int32,System.Int32)
  id: GetSlice(System.Int32[],System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: EvilDICOM.Core.Extensions.PixelExtensions
  langs:
  - csharp
  - vb
  name: GetSlice(Int32[], Int32, Int32, Int32)
  nameWithType: PixelExtensions.GetSlice(Int32[], Int32, Int32, Int32)
  fullName: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int32[], System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/PixelExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: GetSlice
    path: ../EvilDICOM/Core/Extensions/PixelExtensions.cs
    startLine: 16
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  summary: "\nCopies a 2D slice from a 3D pixel matrix\n"
  example: []
  syntax:
    content: public static int[, ] GetSlice(this int[] pixels, int z, int dimX, int dimY)
    parameters:
    - id: pixels
      type: System.Int32[]
      description: a 1D array of pixel data
    - id: z
      type: System.Int32
      description: the z-slice index
    - id: dimX
      type: System.Int32
      description: the width of the image in the X direction
    - id: dimY
      type: System.Int32
      description: the height of the image in the Y direction
    return:
      type: System.Int32[,]
      description: a 2D array of the slice pixel data
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSlice(pixels As Integer(), z As Integer, dimX As Integer, dimY As Integer) As Integer(,)
  overload: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice*
  nameWithType.vb: PixelExtensions.GetSlice(Int32(), Int32, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int32(), System.Int32, System.Int32, System.Int32)
  name.vb: GetSlice(Int32(), Int32, Int32, Int32)
- uid: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int64[],System.Int32,System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int64[],System.Int32,System.Int32,System.Int32)
  id: GetSlice(System.Int64[],System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: EvilDICOM.Core.Extensions.PixelExtensions
  langs:
  - csharp
  - vb
  name: GetSlice(Int64[], Int32, Int32, Int32)
  nameWithType: PixelExtensions.GetSlice(Int64[], Int32, Int32, Int32)
  fullName: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int64[], System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/PixelExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: GetSlice
    path: ../EvilDICOM/Core/Extensions/PixelExtensions.cs
    startLine: 30
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  summary: "\nCopies a 2D slice from a 3D pixel matrix\n"
  example: []
  syntax:
    content: public static long[, ] GetSlice(this long[] pixels, int z, int dimX, int dimY)
    parameters:
    - id: pixels
      type: System.Int64[]
      description: a 1D array of pixel data
    - id: z
      type: System.Int32
      description: the z-slice index
    - id: dimX
      type: System.Int32
      description: the width of the image in the X direction
    - id: dimY
      type: System.Int32
      description: the height of the image in the Y direction
    return:
      type: System.Int64[,]
      description: a 2D array of the slice pixel data
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSlice(pixels As Long(), z As Integer, dimX As Integer, dimY As Integer) As Long(,)
  overload: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice*
  nameWithType.vb: PixelExtensions.GetSlice(Int64(), Int32, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int64(), System.Int32, System.Int32, System.Int32)
  name.vb: GetSlice(Int64(), Int32, Int32, Int32)
- uid: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int16[],System.Int32,System.Int32,System.Int32)
  commentId: M:EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int16[],System.Int32,System.Int32,System.Int32)
  id: GetSlice(System.Int16[],System.Int32,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: EvilDICOM.Core.Extensions.PixelExtensions
  langs:
  - csharp
  - vb
  name: GetSlice(Int16[], Int32, Int32, Int32)
  nameWithType: PixelExtensions.GetSlice(Int16[], Int32, Int32, Int32)
  fullName: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int16[], System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/PixelExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: GetSlice
    path: ../EvilDICOM/Core/Extensions/PixelExtensions.cs
    startLine: 43
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  summary: "\nCopies a 2D slice from a 3D pixel matrix\n"
  example: []
  syntax:
    content: public static short[, ] GetSlice(this short[] pixels, int z, int dimX, int dimY)
    parameters:
    - id: pixels
      type: System.Int16[]
      description: a 1D array of pixel data
    - id: z
      type: System.Int32
      description: the z-slice index
    - id: dimX
      type: System.Int32
      description: the width of the image in the X direction
    - id: dimY
      type: System.Int32
      description: the height of the image in the Y direction
    return:
      type: System.Int16[,]
      description: a 2D array of the slice pixel data
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSlice(pixels As Short(), z As Integer, dimX As Integer, dimY As Integer) As Short(,)
  overload: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice*
  nameWithType.vb: PixelExtensions.GetSlice(Int16(), Int32, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice(System.Int16(), System.Int32, System.Int32, System.Int32)
  name.vb: GetSlice(Int16(), Int32, Int32, Int32)
references:
- uid: EvilDICOM.Core.Extensions
  commentId: N:EvilDICOM.Core.Extensions
  name: EvilDICOM.Core.Extensions
  nameWithType: EvilDICOM.Core.Extensions
  fullName: EvilDICOM.Core.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice*
  commentId: Overload:EvilDICOM.Core.Extensions.PixelExtensions.GetSlice
  name: GetSlice
  nameWithType: PixelExtensions.GetSlice
  fullName: EvilDICOM.Core.Extensions.PixelExtensions.GetSlice
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullName.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32[,]
  isExternal: true
  name: Int32[,]
  nameWithType: Int32[,]
  fullName: System.Int32[,]
  nameWithType.vb: Int32(,)
  fullName.vb: System.Int32(,)
  name.vb: Int32(,)
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: System.Int64[]
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64[,]
  isExternal: true
  name: Int64[,]
  nameWithType: Int64[,]
  fullName: System.Int64[,]
  nameWithType.vb: Int64(,)
  fullName.vb: System.Int64(,)
  name.vb: Int64(,)
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: System.Int16[]
  isExternal: true
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  nameWithType.vb: Int16()
  fullName.vb: System.Int16()
  name.vb: Int16()
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int16[,]
  isExternal: true
  name: Int16[,]
  nameWithType: Int16[,]
  fullName: System.Int16[,]
  nameWithType.vb: Int16(,)
  fullName.vb: System.Int16(,)
  name.vb: Int16(,)
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: (,)
    nameWithType: (,)
    fullName: (,)
