### YamlMime:ManagedReference
items:
- uid: EvilDICOM.RT.DoseValue
  commentId: T:EvilDICOM.RT.DoseValue
  id: DoseValue
  parent: EvilDICOM.RT
  children:
  - EvilDICOM.RT.DoseValue.#ctor(System.Double,System.Double,System.Double,System.Double)
  - EvilDICOM.RT.DoseValue.Dose
  - EvilDICOM.RT.DoseValue.X
  - EvilDICOM.RT.DoseValue.Y
  - EvilDICOM.RT.DoseValue.Z
  langs:
  - csharp
  - vb
  name: DoseValue
  nameWithType: DoseValue
  fullName: EvilDICOM.RT.DoseValue
  type: Struct
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseValue.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DoseValue
    path: ../EvilDICOM/RT/DoseValue.cs
    startLine: 5
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  summary: "\nA simple container for dose values as a function of 3D space\n"
  example: []
  syntax:
    content: public struct DoseValue
    content.vb: Public Structure DoseValue
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: EvilDICOM.RT.DoseValue.X
  commentId: P:EvilDICOM.RT.DoseValue.X
  id: X
  parent: EvilDICOM.RT.DoseValue
  langs:
  - csharp
  - vb
  name: X
  nameWithType: DoseValue.X
  fullName: EvilDICOM.RT.DoseValue.X
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseValue.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: X
    path: ../EvilDICOM/RT/DoseValue.cs
    startLine: 7
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double X { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property X As Double
  overload: EvilDICOM.RT.DoseValue.X*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.RT.DoseValue.Y
  commentId: P:EvilDICOM.RT.DoseValue.Y
  id: Y
  parent: EvilDICOM.RT.DoseValue
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: DoseValue.Y
  fullName: EvilDICOM.RT.DoseValue.Y
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseValue.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Y
    path: ../EvilDICOM/RT/DoseValue.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double Y { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Y As Double
  overload: EvilDICOM.RT.DoseValue.Y*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.RT.DoseValue.Z
  commentId: P:EvilDICOM.RT.DoseValue.Z
  id: Z
  parent: EvilDICOM.RT.DoseValue
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: DoseValue.Z
  fullName: EvilDICOM.RT.DoseValue.Z
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseValue.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Z
    path: ../EvilDICOM/RT/DoseValue.cs
    startLine: 9
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double Z { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Z As Double
  overload: EvilDICOM.RT.DoseValue.Z*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.RT.DoseValue.Dose
  commentId: P:EvilDICOM.RT.DoseValue.Dose
  id: Dose
  parent: EvilDICOM.RT.DoseValue
  langs:
  - csharp
  - vb
  name: Dose
  nameWithType: DoseValue.Dose
  fullName: EvilDICOM.RT.DoseValue.Dose
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseValue.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Dose
    path: ../EvilDICOM/RT/DoseValue.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public double Dose { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Dose As Double
  overload: EvilDICOM.RT.DoseValue.Dose*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.RT.DoseValue.#ctor(System.Double,System.Double,System.Double,System.Double)
  commentId: M:EvilDICOM.RT.DoseValue.#ctor(System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double)'
  parent: EvilDICOM.RT.DoseValue
  langs:
  - csharp
  - vb
  name: DoseValue(Double, Double, Double, Double)
  nameWithType: DoseValue.DoseValue(Double, Double, Double, Double)
  fullName: EvilDICOM.RT.DoseValue.DoseValue(System.Double, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/RT/DoseValue.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/RT/DoseValue.cs
    startLine: 12
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.RT
  syntax:
    content: public DoseValue(double x, double y, double z, double dose)
    parameters:
    - id: x
      type: System.Double
    - id: y
      type: System.Double
    - id: z
      type: System.Double
    - id: dose
      type: System.Double
    content.vb: Public Sub New(x As Double, y As Double, z As Double, dose As Double)
  overload: EvilDICOM.RT.DoseValue.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: EvilDICOM.RT
  commentId: N:EvilDICOM.RT
  name: EvilDICOM.RT
  nameWithType: EvilDICOM.RT
  fullName: EvilDICOM.RT
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.RT.DoseValue.X*
  commentId: Overload:EvilDICOM.RT.DoseValue.X
  name: X
  nameWithType: DoseValue.X
  fullName: EvilDICOM.RT.DoseValue.X
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: EvilDICOM.RT.DoseValue.Y*
  commentId: Overload:EvilDICOM.RT.DoseValue.Y
  name: Y
  nameWithType: DoseValue.Y
  fullName: EvilDICOM.RT.DoseValue.Y
- uid: EvilDICOM.RT.DoseValue.Z*
  commentId: Overload:EvilDICOM.RT.DoseValue.Z
  name: Z
  nameWithType: DoseValue.Z
  fullName: EvilDICOM.RT.DoseValue.Z
- uid: EvilDICOM.RT.DoseValue.Dose*
  commentId: Overload:EvilDICOM.RT.DoseValue.Dose
  name: Dose
  nameWithType: DoseValue.Dose
  fullName: EvilDICOM.RT.DoseValue.Dose
- uid: EvilDICOM.RT.DoseValue.#ctor*
  commentId: Overload:EvilDICOM.RT.DoseValue.#ctor
  name: DoseValue
  nameWithType: DoseValue.DoseValue
  fullName: EvilDICOM.RT.DoseValue.DoseValue
