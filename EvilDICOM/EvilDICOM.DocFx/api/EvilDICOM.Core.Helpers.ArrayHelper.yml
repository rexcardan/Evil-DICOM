### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Helpers.ArrayHelper
  commentId: T:EvilDICOM.Core.Helpers.ArrayHelper
  id: ArrayHelper
  parent: EvilDICOM.Core.Helpers
  children:
  - EvilDICOM.Core.Helpers.ArrayHelper.AreEqual``1(``0[],``0[])
  - EvilDICOM.Core.Helpers.ArrayHelper.Pop``1(``0[])
  langs:
  - csharp
  - vb
  name: ArrayHelper
  nameWithType: ArrayHelper
  fullName: EvilDICOM.Core.Helpers.ArrayHelper
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/ArrayHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ArrayHelper
    path: ../EvilDICOM/Core/Helpers/ArrayHelper.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  syntax:
    content: public class ArrayHelper
    content.vb: Public Class ArrayHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Core.Helpers.ArrayHelper.Pop``1(``0[])
  commentId: M:EvilDICOM.Core.Helpers.ArrayHelper.Pop``1(``0[])
  id: Pop``1(``0[])
  parent: EvilDICOM.Core.Helpers.ArrayHelper
  langs:
  - csharp
  - vb
  name: Pop<T>(T[])
  nameWithType: ArrayHelper.Pop<T>(T[])
  fullName: EvilDICOM.Core.Helpers.ArrayHelper.Pop<T>(T[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/ArrayHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Pop
    path: ../EvilDICOM/Core/Helpers/ArrayHelper.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  syntax:
    content: public static T[] Pop<T>(T[] toPop)
    parameters:
    - id: toPop
      type: '{T}[]'
    typeParameters:
    - id: T
    return:
      type: '{T}[]'
    content.vb: Public Shared Function Pop(Of T)(toPop As T()) As T()
  overload: EvilDICOM.Core.Helpers.ArrayHelper.Pop*
  nameWithType.vb: ArrayHelper.Pop(Of T)(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Helpers.ArrayHelper.Pop(Of T)(T())
  name.vb: Pop(Of T)(T())
- uid: EvilDICOM.Core.Helpers.ArrayHelper.AreEqual``1(``0[],``0[])
  commentId: M:EvilDICOM.Core.Helpers.ArrayHelper.AreEqual``1(``0[],``0[])
  id: AreEqual``1(``0[],``0[])
  parent: EvilDICOM.Core.Helpers.ArrayHelper
  langs:
  - csharp
  - vb
  name: AreEqual<T>(T[], T[])
  nameWithType: ArrayHelper.AreEqual<T>(T[], T[])
  fullName: EvilDICOM.Core.Helpers.ArrayHelper.AreEqual<T>(T[], T[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Helpers/ArrayHelper.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: AreEqual
    path: ../EvilDICOM/Core/Helpers/ArrayHelper.cs
    startLine: 24
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Helpers
  summary: "\nA method that compares each object in two arrays to see if the arrays are equal\n"
  example: []
  syntax:
    content: public static bool AreEqual<T>(T[] array1, T[] array2)
    parameters:
    - id: array1
      type: '{T}[]'
      description: the first array to be compared
    - id: array2
      type: '{T}[]'
      description: the second array to be compared
    typeParameters:
    - id: T
      description: the class type of the array
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Shared Function AreEqual(Of T)(array1 As T(), array2 As T()) As Boolean
  overload: EvilDICOM.Core.Helpers.ArrayHelper.AreEqual*
  nameWithType.vb: ArrayHelper.AreEqual(Of T)(T(), T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Helpers.ArrayHelper.AreEqual(Of T)(T(), T())
  name.vb: AreEqual(Of T)(T(), T())
references:
- uid: EvilDICOM.Core.Helpers
  commentId: N:EvilDICOM.Core.Helpers
  name: EvilDICOM.Core.Helpers
  nameWithType: EvilDICOM.Core.Helpers
  fullName: EvilDICOM.Core.Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.Helpers.ArrayHelper.Pop*
  commentId: Overload:EvilDICOM.Core.Helpers.ArrayHelper.Pop
  name: Pop
  nameWithType: ArrayHelper.Pop
  fullName: EvilDICOM.Core.Helpers.ArrayHelper.Pop
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Core.Helpers.ArrayHelper.AreEqual*
  commentId: Overload:EvilDICOM.Core.Helpers.ArrayHelper.AreEqual
  name: AreEqual
  nameWithType: ArrayHelper.AreEqual
  fullName: EvilDICOM.Core.Helpers.ArrayHelper.AreEqual
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
