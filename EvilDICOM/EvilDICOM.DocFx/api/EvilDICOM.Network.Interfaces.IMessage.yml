### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Network.Interfaces.IMessage
  commentId: T:EvilDICOM.Network.Interfaces.IMessage
  id: IMessage
  parent: EvilDICOM.Network.Interfaces
  children:
  - EvilDICOM.Network.Interfaces.IMessage.DynPayload
  - EvilDICOM.Network.Interfaces.IMessage.Type
  langs:
  - csharp
  - vb
  name: IMessage
  nameWithType: IMessage
  fullName: EvilDICOM.Network.Interfaces.IMessage
  type: Interface
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Interfaces/IMessage.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: IMessage
    path: ../EvilDICOM/Network/Interfaces/IMessage.cs
    startLine: 8
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Interfaces
  syntax:
    content: public interface IMessage
    content.vb: Public Interface IMessage
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: EvilDICOM.Network.Interfaces.IMessage.Type
  commentId: P:EvilDICOM.Network.Interfaces.IMessage.Type
  id: Type
  parent: EvilDICOM.Network.Interfaces.IMessage
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: IMessage.Type
  fullName: EvilDICOM.Network.Interfaces.IMessage.Type
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Interfaces/IMessage.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Type
    path: ../EvilDICOM/Network/Interfaces/IMessage.cs
    startLine: 10
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Interfaces
  syntax:
    content: MessageType Type { get; }
    parameters: []
    return:
      type: EvilDICOM.Network.Enums.MessageType
    content.vb: ReadOnly Property Type As MessageType
  overload: EvilDICOM.Network.Interfaces.IMessage.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: EvilDICOM.Network.Interfaces.IMessage.DynPayload
  commentId: P:EvilDICOM.Network.Interfaces.IMessage.DynPayload
  id: DynPayload
  parent: EvilDICOM.Network.Interfaces.IMessage
  langs:
  - csharp
  - vb
  name: DynPayload
  nameWithType: IMessage.DynPayload
  fullName: EvilDICOM.Network.Interfaces.IMessage.DynPayload
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Interfaces/IMessage.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DynPayload
    path: ../EvilDICOM/Network/Interfaces/IMessage.cs
    startLine: 11
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Interfaces
  syntax:
    content: object DynPayload { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property DynPayload As Object
  overload: EvilDICOM.Network.Interfaces.IMessage.DynPayload*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: EvilDICOM.Network.Interfaces
  commentId: N:EvilDICOM.Network.Interfaces
  name: EvilDICOM.Network.Interfaces
  nameWithType: EvilDICOM.Network.Interfaces
  fullName: EvilDICOM.Network.Interfaces
- uid: EvilDICOM.Network.Interfaces.IMessage.Type*
  commentId: Overload:EvilDICOM.Network.Interfaces.IMessage.Type
  name: Type
  nameWithType: IMessage.Type
  fullName: EvilDICOM.Network.Interfaces.IMessage.Type
- uid: EvilDICOM.Network.Enums.MessageType
  commentId: T:EvilDICOM.Network.Enums.MessageType
  parent: EvilDICOM.Network.Enums
  name: MessageType
  nameWithType: MessageType
  fullName: EvilDICOM.Network.Enums.MessageType
- uid: EvilDICOM.Network.Enums
  commentId: N:EvilDICOM.Network.Enums
  name: EvilDICOM.Network.Enums
  nameWithType: EvilDICOM.Network.Enums
  fullName: EvilDICOM.Network.Enums
- uid: EvilDICOM.Network.Interfaces.IMessage.DynPayload*
  commentId: Overload:EvilDICOM.Network.Interfaces.IMessage.DynPayload
  name: DynPayload
  nameWithType: IMessage.DynPayload
  fullName: EvilDICOM.Network.Interfaces.IMessage.DynPayload
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
