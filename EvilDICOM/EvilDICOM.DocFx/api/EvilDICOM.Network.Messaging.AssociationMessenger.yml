### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Network.Messaging.AssociationMessenger
  commentId: T:EvilDICOM.Network.Messaging.AssociationMessenger
  id: AssociationMessenger
  parent: EvilDICOM.Network.Messaging
  children:
  - EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort(EvilDICOM.Network.Association,EvilDICOM.Network.Enums.AbortSource,EvilDICOM.Network.Enums.AbortReason)
  - EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept(EvilDICOM.Network.PDUs.Accept,EvilDICOM.Network.Association)
  - EvilDICOM.Network.Messaging.AssociationMessenger.SendReject(EvilDICOM.Network.Association)
  - EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest(EvilDICOM.Network.Association)
  - EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse(EvilDICOM.Network.Association)
  - EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest(EvilDICOM.Network.Association,System.String[])
  langs:
  - csharp
  - vb
  name: AssociationMessenger
  nameWithType: AssociationMessenger
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: AssociationMessenger
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 13
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public class AssociationMessenger
    content.vb: Public Class AssociationMessenger
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept(EvilDICOM.Network.PDUs.Accept,EvilDICOM.Network.Association)
  commentId: M:EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept(EvilDICOM.Network.PDUs.Accept,EvilDICOM.Network.Association)
  id: SendAccept(EvilDICOM.Network.PDUs.Accept,EvilDICOM.Network.Association)
  parent: EvilDICOM.Network.Messaging.AssociationMessenger
  langs:
  - csharp
  - vb
  name: SendAccept(Accept, Association)
  nameWithType: AssociationMessenger.SendAccept(Accept, Association)
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept(EvilDICOM.Network.PDUs.Accept, EvilDICOM.Network.Association)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SendAccept
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 15
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public static void SendAccept(Accept accept, Association asc)
    parameters:
    - id: accept
      type: EvilDICOM.Network.PDUs.Accept
    - id: asc
      type: EvilDICOM.Network.Association
    content.vb: Public Shared Sub SendAccept(accept As Accept, asc As Association)
  overload: EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendReject(EvilDICOM.Network.Association)
  commentId: M:EvilDICOM.Network.Messaging.AssociationMessenger.SendReject(EvilDICOM.Network.Association)
  id: SendReject(EvilDICOM.Network.Association)
  parent: EvilDICOM.Network.Messaging.AssociationMessenger
  langs:
  - csharp
  - vb
  name: SendReject(Association)
  nameWithType: AssociationMessenger.SendReject(Association)
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendReject(EvilDICOM.Network.Association)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SendReject
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 23
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public static void SendReject(Association asc)
    parameters:
    - id: asc
      type: EvilDICOM.Network.Association
    content.vb: Public Shared Sub SendReject(asc As Association)
  overload: EvilDICOM.Network.Messaging.AssociationMessenger.SendReject*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest(EvilDICOM.Network.Association,System.String[])
  commentId: M:EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest(EvilDICOM.Network.Association,System.String[])
  id: SendRequest(EvilDICOM.Network.Association,System.String[])
  parent: EvilDICOM.Network.Messaging.AssociationMessenger
  langs:
  - csharp
  - vb
  name: SendRequest(Association, String[])
  nameWithType: AssociationMessenger.SendRequest(Association, String[])
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest(EvilDICOM.Network.Association, System.String[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SendRequest
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 40
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public static void SendRequest(Association asc, params string[] abstractSyntaxes)
    parameters:
    - id: asc
      type: EvilDICOM.Network.Association
    - id: abstractSyntaxes
      type: System.String[]
    content.vb: Public Shared Sub SendRequest(asc As Association, ParamArray abstractSyntaxes As String())
  overload: EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest*
  nameWithType.vb: AssociationMessenger.SendRequest(Association, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest(EvilDICOM.Network.Association, System.String())
  name.vb: SendRequest(Association, String())
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest(EvilDICOM.Network.Association)
  commentId: M:EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest(EvilDICOM.Network.Association)
  id: SendReleaseRequest(EvilDICOM.Network.Association)
  parent: EvilDICOM.Network.Messaging.AssociationMessenger
  langs:
  - csharp
  - vb
  name: SendReleaseRequest(Association)
  nameWithType: AssociationMessenger.SendReleaseRequest(Association)
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest(EvilDICOM.Network.Association)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SendReleaseRequest
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 67
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public static void SendReleaseRequest(Association asc)
    parameters:
    - id: asc
      type: EvilDICOM.Network.Association
    content.vb: Public Shared Sub SendReleaseRequest(asc As Association)
  overload: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse(EvilDICOM.Network.Association)
  commentId: M:EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse(EvilDICOM.Network.Association)
  id: SendReleaseResponse(EvilDICOM.Network.Association)
  parent: EvilDICOM.Network.Messaging.AssociationMessenger
  langs:
  - csharp
  - vb
  name: SendReleaseResponse(Association)
  nameWithType: AssociationMessenger.SendReleaseResponse(Association)
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse(EvilDICOM.Network.Association)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SendReleaseResponse
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 80
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public static void SendReleaseResponse(Association asc)
    parameters:
    - id: asc
      type: EvilDICOM.Network.Association
    content.vb: Public Shared Sub SendReleaseResponse(asc As Association)
  overload: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort(EvilDICOM.Network.Association,EvilDICOM.Network.Enums.AbortSource,EvilDICOM.Network.Enums.AbortReason)
  commentId: M:EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort(EvilDICOM.Network.Association,EvilDICOM.Network.Enums.AbortSource,EvilDICOM.Network.Enums.AbortReason)
  id: SendAbort(EvilDICOM.Network.Association,EvilDICOM.Network.Enums.AbortSource,EvilDICOM.Network.Enums.AbortReason)
  parent: EvilDICOM.Network.Messaging.AssociationMessenger
  langs:
  - csharp
  - vb
  name: SendAbort(Association, AbortSource, AbortReason)
  nameWithType: AssociationMessenger.SendAbort(Association, AbortSource, AbortReason)
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort(EvilDICOM.Network.Association, EvilDICOM.Network.Enums.AbortSource, EvilDICOM.Network.Enums.AbortReason)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Network/Messaging/AssociationMessenger.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SendAbort
    path: ../EvilDICOM/Network/Messaging/AssociationMessenger.cs
    startLine: 92
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Network.Messaging
  syntax:
    content: public static void SendAbort(Association asc, AbortSource abortSource = AbortSource.DICOM_UL_SERV_PROVIDER, AbortReason reason = AbortReason.REASON_NOT_SPECIFIED)
    parameters:
    - id: asc
      type: EvilDICOM.Network.Association
    - id: abortSource
      type: EvilDICOM.Network.Enums.AbortSource
    - id: reason
      type: EvilDICOM.Network.Enums.AbortReason
    content.vb: Public Shared Sub SendAbort(asc As Association, abortSource As AbortSource = AbortSource.DICOM_UL_SERV_PROVIDER, reason As AbortReason = AbortReason.REASON_NOT_SPECIFIED)
  overload: EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EvilDICOM.Network.Messaging
  commentId: N:EvilDICOM.Network.Messaging
  name: EvilDICOM.Network.Messaging
  nameWithType: EvilDICOM.Network.Messaging
  fullName: EvilDICOM.Network.Messaging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept*
  commentId: Overload:EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept
  name: SendAccept
  nameWithType: AssociationMessenger.SendAccept
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendAccept
- uid: EvilDICOM.Network.PDUs.Accept
  commentId: T:EvilDICOM.Network.PDUs.Accept
  parent: EvilDICOM.Network.PDUs
  name: Accept
  nameWithType: Accept
  fullName: EvilDICOM.Network.PDUs.Accept
- uid: EvilDICOM.Network.Association
  commentId: T:EvilDICOM.Network.Association
  parent: EvilDICOM.Network
  name: Association
  nameWithType: Association
  fullName: EvilDICOM.Network.Association
- uid: EvilDICOM.Network.PDUs
  commentId: N:EvilDICOM.Network.PDUs
  name: EvilDICOM.Network.PDUs
  nameWithType: EvilDICOM.Network.PDUs
  fullName: EvilDICOM.Network.PDUs
- uid: EvilDICOM.Network
  commentId: N:EvilDICOM.Network
  name: EvilDICOM.Network
  nameWithType: EvilDICOM.Network
  fullName: EvilDICOM.Network
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendReject*
  commentId: Overload:EvilDICOM.Network.Messaging.AssociationMessenger.SendReject
  name: SendReject
  nameWithType: AssociationMessenger.SendReject
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendReject
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest*
  commentId: Overload:EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest
  name: SendRequest
  nameWithType: AssociationMessenger.SendRequest
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendRequest
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest*
  commentId: Overload:EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest
  name: SendReleaseRequest
  nameWithType: AssociationMessenger.SendReleaseRequest
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseRequest
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse*
  commentId: Overload:EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse
  name: SendReleaseResponse
  nameWithType: AssociationMessenger.SendReleaseResponse
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendReleaseResponse
- uid: EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort*
  commentId: Overload:EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort
  name: SendAbort
  nameWithType: AssociationMessenger.SendAbort
  fullName: EvilDICOM.Network.Messaging.AssociationMessenger.SendAbort
- uid: EvilDICOM.Network.Enums.AbortSource
  commentId: T:EvilDICOM.Network.Enums.AbortSource
  parent: EvilDICOM.Network.Enums
  name: AbortSource
  nameWithType: AbortSource
  fullName: EvilDICOM.Network.Enums.AbortSource
- uid: EvilDICOM.Network.Enums.AbortReason
  commentId: T:EvilDICOM.Network.Enums.AbortReason
  parent: EvilDICOM.Network.Enums
  name: AbortReason
  nameWithType: AbortReason
  fullName: EvilDICOM.Network.Enums.AbortReason
- uid: EvilDICOM.Network.Enums
  commentId: N:EvilDICOM.Network.Enums
  name: EvilDICOM.Network.Enums
  nameWithType: EvilDICOM.Network.Enums
  fullName: EvilDICOM.Network.Enums
