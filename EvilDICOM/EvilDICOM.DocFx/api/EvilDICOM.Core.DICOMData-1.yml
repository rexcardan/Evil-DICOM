### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.DICOMData`1
  commentId: T:EvilDICOM.Core.DICOMData`1
  id: DICOMData`1
  parent: EvilDICOM.Core
  children:
  - EvilDICOM.Core.DICOMData`1.#ctor
  - EvilDICOM.Core.DICOMData`1.CreateFromArray(`0[])
  - EvilDICOM.Core.DICOMData`1.CreateFromSingle(`0)
  - EvilDICOM.Core.DICOMData`1.MultipicityValue
  - EvilDICOM.Core.DICOMData`1.SingleValue
  - EvilDICOM.Core.DICOMData`1.ToString
  - EvilDICOM.Core.DICOMData`1.ToString(System.String)
  langs:
  - csharp
  - vb
  name: DICOMData<T>
  nameWithType: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: DICOMData
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 14
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nA class to hold DICOM data. DICOM data is unique in that it can be a single value, multiple values and null. This\nclass tries to encapsulate those attributes while maintaining a flexible programming interface.\n"
  example: []
  syntax:
    content: public class DICOMData<T>
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Class DICOMData(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: DICOMData(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
- uid: EvilDICOM.Core.DICOMData`1.#ctor
  commentId: M:EvilDICOM.Core.DICOMData`1.#ctor
  id: '#ctor'
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: DICOMData()
  nameWithType: DICOMData<T>.DICOMData()
  fullName: EvilDICOM.Core.DICOMData<T>.DICOMData()
  type: Constructor
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: .ctor
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 19
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nThe constructor which ininitializes the underlying enumerable collection\n"
  example: []
  syntax:
    content: public DICOMData()
    content.vb: Public Sub New
  overload: EvilDICOM.Core.DICOMData`1.#ctor*
  nameWithType.vb: DICOMData(Of T).DICOMData()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).DICOMData()
- uid: EvilDICOM.Core.DICOMData`1.SingleValue
  commentId: P:EvilDICOM.Core.DICOMData`1.SingleValue
  id: SingleValue
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: SingleValue
  nameWithType: DICOMData<T>.SingleValue
  fullName: EvilDICOM.Core.DICOMData<T>.SingleValue
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: SingleValue
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 30
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nGets and sets a single value for the data of the DICOM element. If the collection contains has more than one data\nelement, only the first is returned. If setting a value, the data is cleared and only a single entry is saved.\n"
  example: []
  syntax:
    content: public T SingleValue { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property SingleValue As T
  overload: EvilDICOM.Core.DICOMData`1.SingleValue*
  nameWithType.vb: DICOMData(Of T).SingleValue
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).SingleValue
- uid: EvilDICOM.Core.DICOMData`1.MultipicityValue
  commentId: P:EvilDICOM.Core.DICOMData`1.MultipicityValue
  id: MultipicityValue
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: MultipicityValue
  nameWithType: DICOMData<T>.MultipicityValue
  fullName: EvilDICOM.Core.DICOMData<T>.MultipicityValue
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: MultipicityValue
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 43
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nA list of the data within the element. This is designed to be accomodate the multiplicity aspect of DICOM data\n"
  example: []
  syntax:
    content: public List<T> MultipicityValue { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Property MultipicityValue As List(Of T)
  overload: EvilDICOM.Core.DICOMData`1.MultipicityValue*
  nameWithType.vb: DICOMData(Of T).MultipicityValue
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).MultipicityValue
- uid: EvilDICOM.Core.DICOMData`1.CreateFromSingle(`0)
  commentId: M:EvilDICOM.Core.DICOMData`1.CreateFromSingle(`0)
  id: CreateFromSingle(`0)
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: CreateFromSingle(T)
  nameWithType: DICOMData<T>.CreateFromSingle(T)
  fullName: EvilDICOM.Core.DICOMData<T>.CreateFromSingle(T)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: CreateFromSingle
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 54
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nCreates a new DICOM Data object from a single data value\n"
  example: []
  syntax:
    content: public static DICOMData<T> CreateFromSingle(T dataValue)
    parameters:
    - id: dataValue
      type: '{T}'
      description: the data value from which to initialize the DICOM Data object
    return:
      type: EvilDICOM.Core.DICOMData`1
      description: ''
    content.vb: Public Shared Function CreateFromSingle(dataValue As T) As DICOMData(Of T)
  overload: EvilDICOM.Core.DICOMData`1.CreateFromSingle*
  nameWithType.vb: DICOMData(Of T).CreateFromSingle(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).CreateFromSingle(T)
- uid: EvilDICOM.Core.DICOMData`1.CreateFromArray(`0[])
  commentId: M:EvilDICOM.Core.DICOMData`1.CreateFromArray(`0[])
  id: CreateFromArray(`0[])
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: CreateFromArray(T[])
  nameWithType: DICOMData<T>.CreateFromArray(T[])
  fullName: EvilDICOM.Core.DICOMData<T>.CreateFromArray(T[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: CreateFromArray
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 69
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nCreates a new DICOM Data object from an array of data\n"
  example: []
  syntax:
    content: public static DICOMData<T> CreateFromArray(T[] dataArray)
    parameters:
    - id: dataArray
      type: '{T}[]'
      description: the data array from which to initialize the DICOM Data object
    return:
      type: EvilDICOM.Core.DICOMData`1
      description: ''
    content.vb: Public Shared Function CreateFromArray(dataArray As T()) As DICOMData(Of T)
  overload: EvilDICOM.Core.DICOMData`1.CreateFromArray*
  nameWithType.vb: DICOMData(Of T).CreateFromArray(T())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).CreateFromArray(T())
  name.vb: CreateFromArray(T())
- uid: EvilDICOM.Core.DICOMData`1.ToString
  commentId: M:EvilDICOM.Core.DICOMData`1.ToString
  id: ToString
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: DICOMData<T>.ToString()
  fullName: EvilDICOM.Core.DICOMData<T>.ToString()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ToString
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 79
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: EvilDICOM.Core.DICOMData`1.ToString*
  nameWithType.vb: DICOMData(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).ToString()
- uid: EvilDICOM.Core.DICOMData`1.ToString(System.String)
  commentId: M:EvilDICOM.Core.DICOMData`1.ToString(System.String)
  id: ToString(System.String)
  parent: EvilDICOM.Core.DICOMData`1
  langs:
  - csharp
  - vb
  name: ToString(String)
  nameWithType: DICOMData<T>.ToString(String)
  fullName: EvilDICOM.Core.DICOMData<T>.ToString(System.String)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/DICOMData.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ToString
    path: ../EvilDICOM/Core/DICOMData.cs
    startLine: 89
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core
  summary: "\nConverts the data to a string separated value\n"
  example: []
  syntax:
    content: public string ToString(string split = "\\")
    parameters:
    - id: split
      type: System.String
      description: the separation character to use between the data elements (default is \)
    return:
      type: System.String
      description: the data as a string
    content.vb: Public Function ToString(split As String = "\") As String
  overload: EvilDICOM.Core.DICOMData`1.ToString*
  nameWithType.vb: DICOMData(Of T).ToString(String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).ToString(System.String)
references:
- uid: EvilDICOM.Core
  commentId: N:EvilDICOM.Core
  name: EvilDICOM.Core
  nameWithType: EvilDICOM.Core
  fullName: EvilDICOM.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.DICOMData`1.#ctor*
  commentId: Overload:EvilDICOM.Core.DICOMData`1.#ctor
  name: DICOMData
  nameWithType: DICOMData<T>.DICOMData
  fullName: EvilDICOM.Core.DICOMData<T>.DICOMData
  nameWithType.vb: DICOMData(Of T).DICOMData
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).DICOMData
- uid: EvilDICOM.Core.DICOMData`1.SingleValue*
  commentId: Overload:EvilDICOM.Core.DICOMData`1.SingleValue
  name: SingleValue
  nameWithType: DICOMData<T>.SingleValue
  fullName: EvilDICOM.Core.DICOMData<T>.SingleValue
  nameWithType.vb: DICOMData(Of T).SingleValue
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).SingleValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: EvilDICOM.Core.DICOMData`1.MultipicityValue*
  commentId: Overload:EvilDICOM.Core.DICOMData`1.MultipicityValue
  name: MultipicityValue
  nameWithType: DICOMData<T>.MultipicityValue
  fullName: EvilDICOM.Core.DICOMData<T>.MultipicityValue
  nameWithType.vb: DICOMData(Of T).MultipicityValue
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).MultipicityValue
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: EvilDICOM.Core.DICOMData`1.CreateFromSingle*
  commentId: Overload:EvilDICOM.Core.DICOMData`1.CreateFromSingle
  name: CreateFromSingle
  nameWithType: DICOMData<T>.CreateFromSingle
  fullName: EvilDICOM.Core.DICOMData<T>.CreateFromSingle
  nameWithType.vb: DICOMData(Of T).CreateFromSingle
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).CreateFromSingle
- uid: EvilDICOM.Core.DICOMData`1
  commentId: T:EvilDICOM.Core.DICOMData`1
  parent: EvilDICOM.Core
  name: DICOMData<T>
  nameWithType: DICOMData<T>
  fullName: EvilDICOM.Core.DICOMData<T>
  nameWithType.vb: DICOMData(Of T)
  fullName.vb: EvilDICOM.Core.DICOMData(Of T)
  name.vb: DICOMData(Of T)
  spec.csharp:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: EvilDICOM.Core.DICOMData`1
    name: DICOMData
    nameWithType: DICOMData
    fullName: EvilDICOM.Core.DICOMData
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.DICOMData`1.CreateFromArray*
  commentId: Overload:EvilDICOM.Core.DICOMData`1.CreateFromArray
  name: CreateFromArray
  nameWithType: DICOMData<T>.CreateFromArray
  fullName: EvilDICOM.Core.DICOMData<T>.CreateFromArray
  nameWithType.vb: DICOMData(Of T).CreateFromArray
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).CreateFromArray
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.Core.DICOMData`1.ToString*
  commentId: Overload:EvilDICOM.Core.DICOMData`1.ToString
  name: ToString
  nameWithType: DICOMData<T>.ToString
  fullName: EvilDICOM.Core.DICOMData<T>.ToString
  nameWithType.vb: DICOMData(Of T).ToString
  fullName.vb: EvilDICOM.Core.DICOMData(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
