### YamlMime:ManagedReference
items:
- uid: EvilDICOM.Core.Extensions.ByteExtensions
  commentId: T:EvilDICOM.Core.Extensions.ByteExtensions
  id: ByteExtensions
  parent: EvilDICOM.Core.Extensions
  children:
  - EvilDICOM.Core.Extensions.ByteExtensions.Append(System.Byte[],System.Byte[])
  - EvilDICOM.Core.Extensions.ByteExtensions.GetBit(System.Byte,System.Int32)
  langs:
  - csharp
  - vb
  name: ByteExtensions
  nameWithType: ByteExtensions
  fullName: EvilDICOM.Core.Extensions.ByteExtensions
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: ByteExtensions
    path: ../EvilDICOM/Core/Extensions/ByteExtensions.cs
    startLine: 12
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  summary: "\nAdds useful methods to the byte and byte[] data types\n"
  example: []
  syntax:
    content: public static class ByteExtensions
    content.vb: Public Module ByteExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EvilDICOM.Core.Extensions.ByteExtensions.GetBit(System.Byte,System.Int32)
  commentId: M:EvilDICOM.Core.Extensions.ByteExtensions.GetBit(System.Byte,System.Int32)
  id: GetBit(System.Byte,System.Int32)
  isExtensionMethod: true
  parent: EvilDICOM.Core.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: GetBit(Byte, Int32)
  nameWithType: ByteExtensions.GetBit(Byte, Int32)
  fullName: EvilDICOM.Core.Extensions.ByteExtensions.GetBit(System.Byte, System.Int32)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: GetBit
    path: ../EvilDICOM/Core/Extensions/ByteExtensions.cs
    startLine: 20
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  summary: "\nGets a specific bit in a byte\n"
  example: []
  syntax:
    content: public static bool GetBit(this byte b, int bitNumber)
    parameters:
    - id: b
      type: System.Byte
      description: the byte containing the bit
    - id: bitNumber
      type: System.Int32
      description: the index of the bit within the byte (zero index based)
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetBit(b As Byte, bitNumber As Integer) As Boolean
  overload: EvilDICOM.Core.Extensions.ByteExtensions.GetBit*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EvilDICOM.Core.Extensions.ByteExtensions.Append(System.Byte[],System.Byte[])
  commentId: M:EvilDICOM.Core.Extensions.ByteExtensions.Append(System.Byte[],System.Byte[])
  id: Append(System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: EvilDICOM.Core.Extensions.ByteExtensions
  langs:
  - csharp
  - vb
  name: Append(Byte[], Byte[])
  nameWithType: ByteExtensions.Append(Byte[], Byte[])
  fullName: EvilDICOM.Core.Extensions.ByteExtensions.Append(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM/Core/Extensions/ByteExtensions.cs
      branch: master
      repo: https://github.com/isachpaz/Evil-DICOM.git
    id: Append
    path: ../EvilDICOM/Core/Extensions/ByteExtensions.cs
    startLine: 32
  assemblies:
  - EvilDICOM
  namespace: EvilDICOM.Core.Extensions
  summary: "\nAppends a byte array to another byte array\n"
  example: []
  syntax:
    content: public static byte[] Append(this byte[] first, byte[] toAppend)
    parameters:
    - id: first
      type: System.Byte[]
      description: the first byte array
    - id: toAppend
      type: System.Byte[]
      description: the second byte array which will be appended to the first
    return:
      type: System.Byte[]
      description: the finished appended byte array
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Append(first As Byte(), toAppend As Byte()) As Byte()
  overload: EvilDICOM.Core.Extensions.ByteExtensions.Append*
  nameWithType.vb: ByteExtensions.Append(Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EvilDICOM.Core.Extensions.ByteExtensions.Append(System.Byte(), System.Byte())
  name.vb: Append(Byte(), Byte())
references:
- uid: EvilDICOM.Core.Extensions
  commentId: N:EvilDICOM.Core.Extensions
  name: EvilDICOM.Core.Extensions
  nameWithType: EvilDICOM.Core.Extensions
  fullName: EvilDICOM.Core.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.Core.Extensions.ByteExtensions.GetBit*
  commentId: Overload:EvilDICOM.Core.Extensions.ByteExtensions.GetBit
  name: GetBit
  nameWithType: ByteExtensions.GetBit
  fullName: EvilDICOM.Core.Extensions.ByteExtensions.GetBit
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EvilDICOM.Core.Extensions.ByteExtensions.Append*
  commentId: Overload:EvilDICOM.Core.Extensions.ByteExtensions.Append
  name: Append
  nameWithType: ByteExtensions.Append
  fullName: EvilDICOM.Core.Extensions.ByteExtensions.Append
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
