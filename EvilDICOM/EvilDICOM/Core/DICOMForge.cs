// THIS CODE WAS GENERATED AUTOMATICALLY

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using EvilDICOM.Core.Element;
using EvilDICOM.Core.Enums;

namespace EvilDICOM.Core
{
    public static class DICOMForge
    {
        public static UnsignedLong File​Meta​Information​Group​Length(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00020000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString File​Meta​Information​Version(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00020001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Media​Storage​SOP​Class​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00020002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Media​Storage​SOP​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00020003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Transfer​Syntax​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00020010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Implementation​Class​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00020012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Implementation​Version​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00020013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Source​Application​Entity​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00020016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Sending​Application​Entity​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00020017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Receiving​Application​Entity​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00020018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Private​Information​Creator​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00020100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Private​Information(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00020102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString File​Set​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00041130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString File​Set​Descriptor​File​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00041141"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Specific​Character​Set​Of​File​Set​Descriptor​File(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00041142"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Offset​Of​The​First​Directory​Record​Of​The​Root​Directory​Entity(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00041200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Offset​Of​The​Last​Directory​Record​Of​The​Root​Directory​Entity(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00041202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort File​Set​Consistency​Flag(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00041212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Directory​Record​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00041220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Offset​Of​The​Next​Directory​Record(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00041400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Record​In​Use​Flag(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00041410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Offset​Of​Referenced​Lower​Level​Directory​Entity(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00041420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Directory​Record​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00041430"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Private​Record​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00041432"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Referenced​File​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00041500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong MRDR​Directory​Record​Offset(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00041504"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​SOP​Class​UID​In​File(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00041510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​SOP​Instance​UID​In​File(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00041511"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Transfer​Syntax​UID​In​File(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00041512"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Related​General​SOP​Class​UID​In​File(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0004151A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​References(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00041600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Length​To​End(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00080001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Specific​Character​Set(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Language​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Recognition​Code(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Instance​Creation​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Instance​Creation​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Instance​Creator​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Instance​Coercion​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00080015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier SOP​Class​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier SOP​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Related​General​SOP​Class​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0008001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Original​Specialized​SOP​Class​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0008001B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Study​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Series​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Acquisition​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Content​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Overlay​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Curve​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00080025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Acquisition​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0008002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Study​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Series​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Acquisition​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Content​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Overlay​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Curve​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00080035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Data​Set​Type(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00080040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Data​Set​Subtype(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Nuclear​Medicine​Series​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Accession​Number(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Issuer​Of​Accession​Number​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Query​Retrieve​Level(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Query​Retrieve​View(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Retrieve​AE​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00080054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Station​AE​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00080055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Instance​Availability(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Failed​SOP​Instance​UID​List(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modalities​In​Study(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier SOP​Classes​In​Study(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Regions​In​StudyC​ode​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Conversion​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presentation​Intent​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Institution​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Institution​Address(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00080081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Institution​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Referring​Physician​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00080090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Referring​Physician​Address(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00080092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Referring​Physician​Telephone​Numbers(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referring​Physician​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080096"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Consulting​Physician​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0008009C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Consulting​Physician​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008009D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Code​Value(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Extended​Code​Value(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Coding​Scheme​Designator(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Coding​Scheme​Version(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Code​Meaning(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Mapping​Resource(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Context​Group​Version(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00080106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Context​Group​Local​Version(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00080107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Extended​Code​Meaning(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00080108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Coding​Scheme​Resources​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080109"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Coding​Scheme​URL​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0008010A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Context​Group​Extension​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0008010B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Coding​Scheme​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0008010C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Context​Group​Extension​Creator​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0008010D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Coding​Scheme​URL(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("0008010E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Context​Identifier(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0008010F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Coding​Scheme​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Coding​Scheme​Registry(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Coding​Scheme​External​ID(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00080114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Coding​Scheme​Name(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00080115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Coding​Scheme​Responsible​Organization(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00080116"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Context​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080117"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Mapping​Resource​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00080118"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Long​Code​Value(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("00080119"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId URN​Code​Value(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("00080120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Equivalent​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Mapping​Resource​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Context​Group​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080123"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mapping​Resource​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Timezone​Offset​From​UTC(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00080201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Responsible​Group​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Equipment​Modality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080221"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Manufacturer​Related​Model​Group(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Private​Data​Element​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Private​Group​Reference(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00080301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Private​Creator​Reference(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00080302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Block​Identifying​Information​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Nonidentifying​Private​Elements(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00080304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Identifying​Private​Elements(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00080306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Deidentification​Action​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080305"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Deidentification​Action(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00080307"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Private​Data​Element(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00080308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Private​Data​Element​Value​Multiplicity(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00080309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Private​Data​Element​Value​Representation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0008030A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Private​Data​Element​Number​Of​Items(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0008030B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Private​Data​Element​Name(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("0008030C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Private​Data​Element​Keyword(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("0008030D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Private​Data​Element​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0008030E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Private​Data​Element​Encoding(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0008030F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Private​Data​Element​Definition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00080310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Network​ID(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00081000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Station​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00081010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Study​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00081030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Series​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0008103E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Series​Description​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008103F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Institutional​Department​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00081040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Institutional​Department​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Physicians​Of​Record(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00081048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Physicians​Of​Record​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081049"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Performing​Physician​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00081050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performing​Physician​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Name​Of​Physicians​Reading​Study(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00081060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Physicians​Reading​Study​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Operators​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00081070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Operator​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Admitting​Diagnoses​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00081080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Admitting​Diagnoses​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Manufacturer​Model​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00081090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Results​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Study​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Performed​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Series​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Patient​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Visit​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Overlay​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Stereometric​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Waveform​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008113A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Curve​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081145"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008114A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Real​World​Value​Mapping​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008114B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​SOP​Class​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00081150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​SOP​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00081155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Definition​Source​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081156"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier SOP​Classes​Supported(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0008115A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Frame​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00081160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Simple​Frame​List(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00081161"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Calculated​Frame​List(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00081162"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Time​Range(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00081163"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Extraction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081164"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Multi​Frame​Source​SOP​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00081167"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Retrieve​URL(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("00081190"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Transaction​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00081195"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Warning​Reason(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00081196"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Failure​Reason(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00081197"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Failed​SOP​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081198"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​SOP​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081199"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Other​Failures​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008119A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Studies​Containing​Other​Referenced​Instances​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Related​Series​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00081250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Lossy​Image​Compression​Retired(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00082110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Derivation​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00082111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Stage​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00082120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Stage​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Stages(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString View​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00082127"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString View​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082128"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Event​Timers(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082129"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Views​In​Stage(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("0008212A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Event​Elapsed​Times(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00082130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Event​Timer​Names(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00082132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Event​Timer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082133"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Event​Time​Offset(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00082134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Event​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082135"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Start​Trim(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082142"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Stop​Trim(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082143"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Recommended​Display​Frame​Rate(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00082144"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Transducer​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00082200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Transducer​Orientation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00082204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Anatomic​Structure(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00082208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Region​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Region​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Primary​Anatomic​Structure​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082228"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Structure​Space​Or​Region​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082229"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Primary​Anatomic​Structure​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082240"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Position​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Orientation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Orientation​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082246"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Structure​Space​Or​Region​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Portal​Of​Entrance​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082253"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Approach​Direction​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082255"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Anatomic​Perspective​Description​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00082256"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Perspective​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082257"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Anatomic​Location​Of​Examining​Instrument​Description​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00082258"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Location​Of​Examining​Instrument​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00082259"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anatomic​Structure​Space​Or​Region​Modifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008225A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence On​Axis​Background​Anatomic​Structure​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0008225C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Alternate​Representation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00083001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Irradiation​Event​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00083010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Irradiation​Event​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00083011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Radiopharmaceutical​Administration​Event​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00083012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Identifying​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00084000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Frame​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Evidence​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Raw​Data​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Creator​Version​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00089123"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Derivation​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Image​Evidence​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089154"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pixel​Presentation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089205"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Volumetric​Properties(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089206"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Volume​Based​Calculation​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089207"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Complex​Image​Component(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Contrast(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089209"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Derivation​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089215"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Presentation​State​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089237"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Other​Plane​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Display​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00089458"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Recommended​Display​Frame​Rate​In​Float(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00089459"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Skip​Frame​Range​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00089460"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Patient​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00100010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Issuer​Of​Patient​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Type​Of​Patient​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00100022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Issuer​Of​Patient​ID​Qualifiers​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Patient​Group​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Group​Of​Patients​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Subject​Relative​Position​In​Image(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00100028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Patient​Birth​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00100030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Patient​Birth​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00100032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Birth​Date​In​Alternative​Calendar(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Death​Date​In​Alternative​Calendar(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Alternative​Calendar(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00100035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Sex(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00100040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Insurance​Plan​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Primary​Language​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Primary​Language​Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Quality​Control​Subject(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00100200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Quality​Control​Subject​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Strain​Description(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("00100212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Strain​Nomenclature(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100213"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Strain​Stock​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Strain​Source​Registry​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100215"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Strain​Stock​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100216"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Strain​Source(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100217"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Strain​Additional​Information(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00100218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Strain​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100219"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Genetic​Modifications​​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100221"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Genetic​Modifications​Description(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("00100222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Genetic​Modifications​Nomenclature(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00100223"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Genetic​Modifications​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00100229"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Other​Patient​IDs(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00101000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Other​Patient​Names(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00101001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Other​Patient​IDs​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00101002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Patient​Birth​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00101005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AgeString Patient​Age(params String[] data)
        {
            var element = (new AgeString());
            element.Tag = (new Tag("00101010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Patient​Size(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00101020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Size​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00101021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Patient​Body​Mass​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00101022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​APDimension(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00101023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​Lateral​Dimension(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00101024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Patient​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00101030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Address(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00101040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Insurance​Plan​Identification(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00101050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Patient​Mother​Birth​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00101060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Military​Rank(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00101080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Branch​Of​Service(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00101081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Medical​Record​Locator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00101090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Patient​Photo​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00101100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Medical​Alerts(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Allergies(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Country​Of​Residence(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Region​Of​Residence(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102152"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Patient​Telephone​Numbers(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00102154"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Patient​Telecom​Information​(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00102155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Ethnic​Group(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00102160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Occupation(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00102180"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Smoking​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("001021A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Additional​Patient​History(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("001021B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pregnancy​Status(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("001021C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Last​Menstrual​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("001021D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Religious​Preference(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("001021F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Species​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Species​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00102202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Sex​Neutered(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00102203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Anatomical​Orientation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00102210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Breed​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102292"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Breed​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00102293"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Breed​Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00102294"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Breed​Registration​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102295"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Breed​Registry​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00102296"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Responsible​Person(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00102297"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Responsible​Person​Role(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00102298"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Responsible​Organization(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00102299"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Patient​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00104000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Examined​Body​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00109431"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Sponsor​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Protocol​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Protocol​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Site​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Site​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Subject​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Subject​Reading​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Time​Point​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Clinical​Trial​Time​Point​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00120051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Longitudinal​Temporal​Offset​From​Event(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00120052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Longitudinal​Temporal​Event​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00120053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Coordinating​Center​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Identity​Removed(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00120062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Deidentification​Method(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Deidentification​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00120064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Series​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Series​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Protocol​Ethics​Committee​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Clinical​Trial​Protocol​Ethics​Committee​Approval​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00120082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Consent​For​Clinical​Trial​Use​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00120083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Distribution​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00120084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Consent​For​Distribution​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00120085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Ethics​Committee​Approval​Effectiveness​Start​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00120086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Ethics​Committee​Approval​Effectiveness​End​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00120087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText CAD​File​Format(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Component​Reference​System(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Component​Manufacturing​Procedure(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Component​Manufacturer(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Material​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00140030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Material​Pipe​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00140032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Material​Isolation​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00140034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Material​Grade(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Material​Properties​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Material​Properties​File​Format​Retired(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Material​Notes(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00140046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Component​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00140050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Curvature​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00140052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Outer​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00140054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Inner​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00140056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Component​Welder​IDs(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00140100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Secondary​Approval​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00140101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Secondary​Review​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00140102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Secondary​Review​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00140103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Secondary​Reviewer​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00140104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Repair​ID(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00140105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multiple​Component​Approval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00140106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Other​Approval​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00140107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Other​Secondary​Approval​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00140108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Actual​Environmental​Conditions(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00141010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Expiry​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00141020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Environmental​Conditions(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00141040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Evaluator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00142002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Evaluator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00142004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Evaluator​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00142006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Evaluation​Attempt(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00142008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Indication​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00142012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Indication​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00142014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Indication​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00142016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Indication​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00142018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Indication​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0014201A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Indication​Disposition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0014201C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Indication​ROI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0014201E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Indication​Physical​Property​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00142030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Property​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00142032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Coordinate​System​Number​Of​Axes(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00142202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Coordinate​System​Axes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00142204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Coordinate​System​Axis​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00142206"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Coordinate​System​Data​Set​Mapping(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00142208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Coordinate​System​Axis​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("0014220A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Coordinate​System​Axis​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0014220C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Coordinate​System​Axis​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0014220E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Coordinate​System​Axis​Values(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00142210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Coordinate​System​Transform​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00142220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Transform​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00142222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Transform​Number​Of​Axes(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00142224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Transform​Order​Of​Axes(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00142226"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Transformed​Axis​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00142228"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Coordinate​System​Transform​Rotation​And​Scale​Matrix(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014222A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Coordinate​System​Transform​Translation​Matrix(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014222C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Internal​Detector​Frame​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Number​Of​Frames​Integrated(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Detector​Temperature​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00143020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Sensor​Name(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00143022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Horizontal​Offset​Of​Sensor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Vertical​Offset​Of​Sensor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Sensor​Temperature(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dark​Current​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00143040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Dark​Current​Counts(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00143050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Gain​Correction​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00143060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Air​Counts(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00143070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString KV​Used​In​Gain​Calibration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString MA​Used​In​Gain​Calibration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Number​Of​Frames​Used​For​Integration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Filter​Material​Used​In​Gain​Calibration(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00143074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Filter​Thickness​Used​In​Gain​Calibration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00143075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Date​Of​Gain​Calibration(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00143076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Time​Of​Gain​Calibration(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00143077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Bad​Pixel​Image(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00143080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Calibration​Notes(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00143099"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pulser​Equipment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pulser​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00144004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Pulser​Notes(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00144006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Receiver​Equipment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Amplifier​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0014400A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Receiver​Notes(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("0014400C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pre​Amplifier​Equipment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0014400E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Pre​Amplifier​Notes(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("0014400F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transmit​Transducer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Receive​Transducer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Elements(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00144012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Element​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00144013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Element​Dimension​A(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Element​Dimension​B(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Element​Pitch​A(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​Beam​Dimension​A(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​Beam​Dimension​B(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Location​Of​Measured​Beam​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014401A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​Center​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014401B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​Bandwidth(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014401C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Element​Pitch​B(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014401D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pulser​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Pulse​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Excitation​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modulation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00144026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Damping(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Receiver​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Acquired​Soundpath​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Compression​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00144032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Acquisition​Sample​Size(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00144033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Rectifier​Smoothing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence DAC​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString DAC​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00144036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DAC​Gain​Points(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DAC​Time​Points(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014403A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DAC​Amplitude(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014403C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pre​Amplifier​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transmit​Transducer​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Receive​Transducer​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Incident​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Coupling​Technique(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00144054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Coupling​Medium(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00144056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Coupling​Velocity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Probe​Center​Location​X(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Probe​Center​Location​Z(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144059"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Sound​Path​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014405A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Delay​Law​Identifier(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0014405C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Gate​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Gate​Threshold(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Velocity​Of​Sound(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Calibration​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Calibration​Procedure(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00144072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Procedure​Version(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00144074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Procedure​Creation​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00144076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Procedure​Expiration​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00144078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Procedure​Last​Modified​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0014407A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Calibration​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0014407C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Calibration​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0014407E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Probe​Drive​Equipment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Drive​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00144081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Probe​Drive​Notes(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00144082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Drive​Probe​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Probe​Inductance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Probe​Resistance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Receive​Probe​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Probe​Drive​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Bridge​Resistors(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Probe​Orientation​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144089"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString User​Selected​Gain​Y(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014408B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString User​Selected​Phase(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014408C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString User​Selected​Offset​X(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014408D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString User​Selected​Offset​Y(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014408E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00144091"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Threshold(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00144092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scanner​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0014409A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Scan​Procedure(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0014409B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Translation​Rate​X(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014409C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Translation​Rate​Y(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014409D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Overlap(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014409F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Image​Quality​Indicator​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("001440A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Image​Quality​Indicator​Material(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("001440A1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Image​Quality​Indicator​Size(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("001440A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString LINAC​Energy(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00145002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString LINAC​Output(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00145004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Active​Aperture(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00145100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Total​Aperture(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Aperture​Elevation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Main​Lobe​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Main​Roof​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Connector​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00145105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Wedge​Model​Number(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00145106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Angle​Float(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Roof​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Wedge​Element​1​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00145109"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Material​Velocity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014510A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Wedge​Material(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("0014510B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Offset​Z(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014510C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Origin​Offset​X(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014510D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Time​Delay(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014510E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Wedge​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("0014510F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Wedge​Manufacturer​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00145110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Wedge​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00145111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Beam​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Offset​X(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Offset​Y(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Total​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​In​Contact​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145116"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Front​Gap(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145117"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Total​Height(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145118"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Front​Height(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00145119"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Rear​Height(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014511A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Total​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014511B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​In​Contact​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014511C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Chamfer​Height(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014511D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Wedge​Curve(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0014511E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radius​Along​Wedge(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0014511F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Contrast​Bolus​Agent(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00180010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contrast​Bolus​Agent​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00180012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Contrast​Bolus​​T1​Relaxivity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00180013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contrast​Bolus​Administration​Route​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00180014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Body​Part​Examined(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scanning​Sequence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Sequence​Variant(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scan​Options(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString MR​Acquisition​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Sequence​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00180024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Angio​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intervention​Drug​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00180026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Intervention​Drug​Stop​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00180027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Intervention​Drug​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intervention​Drug​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00180029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Additional​Drug​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Radionuclide(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00180030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Radio​pharmaceutical(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00180031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Energy​Window​Centerline(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Energy​Window​Total​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Intervention​Drug​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00180034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Intervention​Drug​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00180035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intervention​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00180036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Therapy​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Intervention​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Therapy​Description(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Intervention​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0018003A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Cine​Rate(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Initial​Cine​Run​State(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Slice​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString KVP(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Counts​Accumulated(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Termination​Condition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Effective​Duration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Start​Condition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00180073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Acquisition​Start​Condition​Data(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Acquisition​Termination​Condition​Data(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Repetition​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Echo​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Inversion​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Number​Of​Averages(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Imaging​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Imaged​Nucleus(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00180085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Echo​Numbers(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Magnetic​Field​Strength(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Spacing​Between​Slices(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Phase​Encoding​Steps(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180089"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Data​Collection​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Echo​Train​Length(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00180091"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Percent​Sampling(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180093"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Percent​Phase​Field​Of​View(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Pixel​Bandwidth(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00180095"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Device​Serial​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Device​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00181002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Device​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Plate​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Generator​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Grid​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Cassette​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Gantry​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Unique​Device​Identifier(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00181009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence UDI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018100A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Secondary​Capture​Device​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hardcopy​Creation​Device​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Date​Of​Secondary​Capture(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00181012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Time​Of​Secondary​Capture(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00181014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Secondary​Capture​Device​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hardcopy​Device​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Secondary​Capture​Device​Manufacturer​Model​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Secondary​Capture​Device​Software​Versions(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hardcopy​Device​Software​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0018101A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hardcopy​Device​Manufacturer​Model​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0018101B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Software​Versions(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Video​Image​Format​Acquired(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Digital​Image​Format​Acquired(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Protocol​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Contrast​Bolus​Route(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contrast​Bolus​Volume(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Contrast​Bolus​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00181042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Contrast​Bolus​Stop​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00181043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contrast​Bolus​Total​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Syringe​Counts(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contrast​Flow​Rate(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contrast​Flow​Duration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Contrast​Bolus​Ingredient(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contrast​Bolus​Ingredient​Concentration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181049"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Spatial​Resolution(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Trigger​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Trigger​Source​Or​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Nominal​Interval(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Cardiac​Framing​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Time​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Delay(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Trigger​Delay(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Multiplex​Group​Time​Offset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Trigger​Time​Offset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Synchronization​Trigger(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018106A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Synchronization​Channel(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0018106C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Trigger​Sample​Position(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018106E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Radio​pharmaceutical​Route(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radio​pharmaceutical​Volume(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Radio​pharmaceutical​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00181072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Radio​pharmaceutical​Stop​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00181073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radionuclide​Total​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radionuclide​Half​Life(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radionuclide​Positron​Fraction(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radio​pharmaceutical​Specific​Activity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Radio​pharmaceutical​Start​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00181078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Radio​pharmaceutical​Stop​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00181079"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beat​Rejection​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Low​RR​Value(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString High​RR​Value(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Intervals​Acquired(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Intervals​Rejected(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString PVC​Rejection(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Skip​Beats(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Heart​Rate(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Cardiac​Number​Of​Images(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Trigger​Window(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Reconstruction​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Distance​Source​To​Detector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Distance​Source​To​Patient(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Estimated​Radiographic​Magnification​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Gantry​Detector​Tilt(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Gantry​Detector​Slew(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Height(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Traverse(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181131"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Table​Motion(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Vertical​Increment(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181135"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Lateral​Increment(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181136"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Longitudinal​Increment(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181137"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181138"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Table​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018113A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Angular​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181141"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radial​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181142"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Scan​Arc(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181143"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Angular​Step(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181144"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Center​Of​Rotation​Offset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181145"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Rotation​Offset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181146"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Field​Of​View​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181147"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Field​Of​View​Dimensions(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181149"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Exposure​Time(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString X​Ray​Tube​Current(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181151"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Exposure(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181152"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Exposure​Inu​As(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181153"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Average​Pulse​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181154"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Radiation​Setting(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Rectification​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181156"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Radiation​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018115A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​And​Fluoroscopy​Area​Dose​Product(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0018115E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Filter​Type(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Type​Of​Filters(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181161"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Intensifier​Size(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181162"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Imager​Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181164"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Grid(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181166"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Generator​Power(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181170"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Collimator​Grid​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181180"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Collimator​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181181"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Focal​Distance(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181182"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString X​Focus​Center(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181183"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Y​Focus​Center(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181184"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Focal​Spots(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181190"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Anode​Target​Material(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181191"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Body​Part​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("001811A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compression​Force(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("001811A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compression​​Pressure(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("001811A3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Paddle​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("001811A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compression​​Contact​​Area(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("001811A5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Date​Of​Last​Calibration(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00181200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Time​Of​Last​Calibration(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00181201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Date​Time​Of​Last​Calibration(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00181202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Convolution​Kernel(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Upper​Lower​Pixel​Values(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181240"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Actual​Frame​Duration(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Count​Rate(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181243"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Preferred​Playback​Sequencing(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00181244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Receive​Coil​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Transmit​Coil​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Plate​Type(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181260"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Phosphor​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181261"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Water​Equivalent​Diameter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00181271"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Water​Equivalent​Diameter​Calculation​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00181272"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Scan​Velocity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Whole​Body​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Scan​Length(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Acquisition​Matrix(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00181310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString In​Plane​Phase​Encoding​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Flip​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181314"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Variable​Flip​Angle​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181315"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString SAR(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181316"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString d​Bdt(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181318"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle B1rms(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00181320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Acquisition​Device​Processing​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Acquisition​Device​Processing​Code(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Cassette​Orientation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Cassette​Size(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Exposures​On​Plate(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00181404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Relative​X​Ray​Exposure(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181405"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Exposure​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181411"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Target​Exposure​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181412"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Deviation​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181413"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Column​Angulation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181450"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Tomo​Layer​Height(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181460"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Tomo​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181470"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Tomo​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181480"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Tomo​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181490"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Tomo​Class(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181491"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Tomosynthesis​Source​Images(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181495"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Positioner​Motion(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Positioner​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181508"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Positioner​Primary​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Positioner​Secondary​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181511"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Positioner​Primary​Angle​Increment(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Positioner​Secondary​Angle​Increment(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181521"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Primary​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181530"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Secondary​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00181531"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Shutter​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Shutter​Left​Vertical​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181602"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Shutter​Right​Vertical​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181604"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Shutter​Upper​Horizontal​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181606"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Shutter​Lower​Horizontal​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181608"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Center​Of​Circular​Shutter(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181610"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Radius​Of​Circular​Shutter(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181612"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Vertices​Of​The​Polygonal​Shutter(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181620"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Shutter​Presentation​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00181622"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Shutter​Overlay​Group(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00181623"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Shutter​Presentation​Color​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00181624"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Collimator​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181700"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Collimator​Left​Vertical​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181702"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Collimator​Right​Vertical​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181704"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Collimator​Upper​Horizontal​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181706"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Collimator​Lower​Horizontal​Edge(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181708"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Center​Of​Circular​Collimator(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181710"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Radius​Of​Circular​Collimator(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181712"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Vertices​Of​The​Polygonal​Collimator(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00181720"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Time​Synchronized(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181800"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Time​Source(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00181801"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Time​Distribution​Protocol(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00181802"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString NTP​Source​Address(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00181803"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Page​Number​Vector(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00182001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Frame​Label​Vector(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00182002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Primary​Angle​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00182003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Secondary​Angle​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00182004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Slice​Location​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00182005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Display​Window​Label​Vector(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00182006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Scanned​Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00182010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Digitizing​Device​Transport​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00182020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Rotation​Of​Scanned​Film(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00182030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Biopsy​Target​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00182041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Target​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00182042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Localizing​Cursor​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00182043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Calculated​Target​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00182044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Target​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00182045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Displayed​Z​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00182046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString IVUS​Acquisition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00183100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString IVUS​Pullback​Rate(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00183101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString IVUS​Gated​Rate(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00183102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString IVUS​Pullback​Start​Frame​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00183103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString IVUS​Pullback​Stop​Frame​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00183104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Lesion​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00183105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Acquisition​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00184000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Output​Power(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00185000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Transducer​Data(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00185010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Focus​Depth(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Processing​Function(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00185020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Postprocessing​Function(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00185021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Mechanical​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Bone​Thermal​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Cranial​Thermal​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Soft​Tissue​Thermal​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Soft​Tissue​Focus​Thermal​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Soft​Tissue​Surface​Thermal​Index(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dynamic​Range(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Total​Gain(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Depth​Of​Scan​Field(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00185050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00185100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString View​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00185101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Projection​Eponymous​Name​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00185104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Transformation​Matrix(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Translation​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00185212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Sensitivity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00186000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Sequence​Of​Ultrasound​Regions(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00186011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Region​Spatial​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00186012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Region​Data​Type(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00186014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Region​Flags(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Region​Location​Min​X0(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Region​Location​Min​Y0(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018601A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Region​Location​Max​X1(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018601C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Region​Location​Max​Y1(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018601E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Reference​Pixel​X0(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00186020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Reference​Pixel​Y0(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00186022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Physical​Units​X​Direction(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00186024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Physical​Units​Y​Direction(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00186026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reference​Pixel​Physical​Value​X(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00186028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reference​Pixel​Physical​Value​Y(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0018602A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Physical​Delta​X(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0018602C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Physical​Delta​Y(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0018602E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Transducer​Frequency(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Transducer​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00186031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Pulse​Repetition​Frequency(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Doppler​Correction​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00186034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Steering​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00186036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Doppler​Sample​Volume​X​Position​Retired(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Doppler​Sample​Volume​X​Position(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00186039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Doppler​Sample​Volume​Y​Position​Retired(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018603A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Doppler​Sample​Volume​Y​Position(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0018603B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong TM​Line​Position​X0Retired(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018603C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong TM​Line​Position​X0(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0018603D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong TM​Line​Position​Y0Retired(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018603E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong TM​Line​Position​Y0(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0018603F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong TM​Line​Position​X1Retired(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong TM​Line​Position​X1(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00186041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong TM​Line​Position​Y1Retired(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong TM​Line​Position​Y1(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00186043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Component​Organization(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00186044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Pixel​Component​Mask(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Pixel​Component​Range​Start(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Pixel​Component​Range​Stop(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018604A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Component​Physical​Units(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0018604C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Component​Data​Type(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0018604E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Table​Break​Points(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Table​Of​X​Break​Points(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Of​Y​Break​Points(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00186054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Table​Entries(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Table​Of​Pixel​Values(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00186058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Of​Parameter​Values(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0018605A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle R​Wave​Time​Vector(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00186060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Detector​Conditions​Nominal​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Temperature(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Detector​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Detector​Configuration(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Detector​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00187006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Detector​Mode(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00187008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Detector​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("0018700A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Date​Of​Last​Detector​Calibration(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0018700C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Time​Of​Last​Detector​Calibration(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0018700E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Exposures​On​Detector​Since​Last​Calibration(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00187010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Exposures​On​Detector​Since​Manufactured(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00187011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Time​Since​Last​Exposure(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Active​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Activation​Offset​From​Exposure(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Binning(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0018701A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Element​Physical​Size(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Element​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Detector​Active​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Active​Dimensions(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Active​Origin(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Detector​Manufacturer​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0018702A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Detector​Manufacturer​Model​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0018702B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Field​Of​View​Origin(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Field​Of​View​Rotation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Field​Of​View​Horizontal​Flip(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Pixel​Data​Area​Origin​Relative​To​FOV(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00187036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Pixel​Data​Area​Rotation​Angle​Relative​To​FOV(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00187038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Grid​Absorbing​Material(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00187040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Grid​Spacing​Material(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00187041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Grid​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Grid​Pitch(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Grid​Aspect​Ratio(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00187046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Grid​Period(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Grid​Focal​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0018704C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Filter​Material(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Filter​Thickness​Minimum(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Filter​Thickness​Maximum(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Filter​Beam​Path​Length​Minimum(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00187056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Filter​Beam​Path​Length​Maximum(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00187058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Exposure​Control​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Exposure​Control​Mode​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00187062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Exposure​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00187064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Phototimer​Setting(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00187065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Exposure​Time​InuS(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00188150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString X​Ray​Tube​Current​InuA(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00188151"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Content​Qualification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Pulse​Sequence​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00189005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Imaging​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Echo​Pulse​Sequence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Inversion​Recovery(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Flow​Compensation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multiple​Spin​Echo(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multi​Planar​Excitation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Phase​Contrast(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Time​Of​Flight​Contrast(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Spoiling(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Steady​State​Pulse​Sequence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Echo​Planar​Pulse​Sequence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Tag​Angle​First​Axis(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Magnetization​Transfer(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString T2Preparation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blood​Signal​Nulling(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Saturation​Recovery(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Spectrally​Selected​Suppression(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Spectrally​Selected​Excitation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Spatial​Presaturation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Tagging(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Oversampling​Phase(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Tag​Spacing​First​Dimension(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Geometry​Of​K​Space​Traversal(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Segmented​K​Space​Traversal(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Rectilinear​Phase​Encode​Reordering(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Tag​Thickness(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Partial​Fourier​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Cardiac​Synchronization​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Receive​Coil​Manufacturer​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Receive​Coil​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Receive​Coil​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Quadrature​Receive​Coil(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multi​Coil​Definition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Multi​Coil​Configuration(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Multi​Coil​Element​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00189047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multi​Coil​Element​Used(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Transmit​Coil​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189049"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Transmit​Coil​Manufacturer​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Transmit​Coil​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Spectral​Width(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Chemical​Shift​Reference(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Volume​Localization​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MR​Acquisition​Frequency​Encoding​Steps(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decoupling(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189059"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decoupled​Nucleus(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Decoupling​Frequency(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decoupling​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Decoupling​Chemical​Shift​Reference(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString K​Space​Filtering(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Time​Domain​Filtering(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Zero​Fills(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Baseline​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Parallel​Reduction​Factor​In​Plane(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Cardiac​RR​Interval​Specified(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Acquisition​Duration(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Frame​Acquisition​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Diffusion​Directionality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Diffusion​Gradient​Direction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Parallel​Acquisition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Parallel​Acquisition​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Inversion​Times(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189079"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Metabolite​Map​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00189080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Partial​Fourier(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Effective​Echo​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Metabolite​Map​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Chemical​Shift​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Cardiac​Signal​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​Gradient​Orientation(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189089"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Velocity​Encoding​Direction(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Velocity​Encoding​Minimum​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189091"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Velocity​Encoding​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​K​Space​Trajectories(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189093"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Coverage​Of​K​Space(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Spectroscopy​Acquisition​Phase​Rows(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00189095"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Parallel​Reduction​Factor​In​Plane​Retired(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189096"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Transmitter​Frequency(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189098"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Resonant​Nucleus(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Frequency​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Spectroscopy​FOV​Geometry​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Slab​Thickness(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Slab​Orientation(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Mid​Slab​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Spatial​Saturation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Timing​And​Related​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Echo​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Diffusion​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189117"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Cardiac​Synchronization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189118"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Averages​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189119"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MRFOV​Geometry​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volume​Localization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189126"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Spectroscopy​Acquisition​Data​Columns(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00189127"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Diffusion​Anisotropy​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189147"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Frame​Reference​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189151"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Metabolite​Map​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189152"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Parallel​Reduction​Factor​Out​Of​Plane(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Spectroscopy​Acquisition​Out​Of​Plane​Phase​Steps(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00189159"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Bulk​Motion​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189166"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Parallel​Reduction​Factor​Second​In​Plane(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189168"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Cardiac​Beat​Rejection​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189169"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Respiratory​Motion​Compensation​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189170"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Respiratory​Signal​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189171"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Bulk​Motion​Compensation​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189172"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Bulk​Motion​Signal​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189173"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Applicable​Safety​Standard​Agency(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189174"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Applicable​Safety​Standard​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189175"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Operating​Mode​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189176"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Operating​Mode​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189177"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Operating​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189178"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Specific​Absorption​Rate​Definition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189179"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Gradient​Output​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189180"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Specific​Absorption​Rate​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189181"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Gradient​Output(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189182"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Flow​Compensation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189183"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Tagging​Delay(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189184"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Respiratory​Motion​Compensation​Technique​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00189185"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Respiratory​Signal​Source​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00189186"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Chemical​Shift​Minimum​Integration​Limit​In​Hz(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189195"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Chemical​Shift​Maximum​Integration​Limit​In​Hz(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189196"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Velocity​Encoding​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189197"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString First​Order​Phase​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189198"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Water​Referenced​Phase​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189199"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString MR​Spectroscopy​Acquisition​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Respiratory​Cycle​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Velocity​Encoding​Maximum​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189217"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Tag​Spacing​Second​Dimension(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Tag​Angle​Second​Axis(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189219"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Frame​Acquisition​Duration(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Image​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189226"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Spectroscopy​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189227"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MR​Acquisition​Phase​Encoding​Steps​In​Plane(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189231"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MR​Acquisition​Phase​Encoding​Steps​Out​Of​Plane(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189232"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Spectroscopy​Acquisition​Phase​Columns(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00189234"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Cardiac​Cycle​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189236"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specific​Absorption​Rate​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189239"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort RF​Echo​Train​Length(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189240"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Gradient​Echo​Train​Length(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189241"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Arterial​Spin​Labeling​Contrast(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MR​Arterial​Spin​Labeling​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString ASL​Technique​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189252"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort ASL​Slab​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189253"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble ASL​Slab​Thickness(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189254"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble ASL​Slab​Orientation(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189255"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble ASL​Mid​Slab​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189256"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ASL​Context(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189257"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong ASL​Pulse​Train​Duration(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00189258"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ASL​Crusher​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189259"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble ASL​Crusher​Flow​Limit(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0018925A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString ASL​Crusher​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0018925B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ASL​Bolus​Cutoff​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018925C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ASL​Bolus​Cutoff​Timing​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018925D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString ASL​Bolus​Cutoff​Technique(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0018925E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong ASL​Bolus​Cutoff​Delay​Time(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0018925F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ASL​Slab​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189260"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Chemical​Shift​Minimum​Integration​Limit​Inppm(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189295"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Chemical​Shift​Maximum​Integration​Limit​Inppm(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189296"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Water​Reference​Acquisition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189297"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Echo​Peak​Position(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00189298"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Acquisition​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Tube​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Acquisition​Details​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Revolution​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189305"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Single​Collimation​Width(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Total​Collimation​Width(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189307"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Table​Dynamics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Speed(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Feed​Per​Rotation(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Spiral​Pitch​Factor(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189311"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Geometry​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Data​Collection​Center​Patient(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189313"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Reconstruction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189314"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reconstruction​Algorithm(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189315"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Convolution​Kernel​Group(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189316"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reconstruction​Field​Of​View(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189317"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reconstruction​Target​Center​Patient(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189318"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reconstruction​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189319"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Image​Filter(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00189320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Exposure​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189321"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reconstruction​Pixel​Spacing(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189322"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Exposure​Modulation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189323"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Estimated​Dose​Saving(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189324"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​X​Ray​Details​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189325"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189326"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189327"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Exposure​Time​Inms(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189328"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Image​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189329"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble X​Ray​Tube​Current​InmA(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Exposure​Inm​As(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189332"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Constant​Volume​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189333"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fluoroscopy​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189334"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Distance​Source​To​Data​Collection​Center(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189335"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Contrast​Bolus​Agent​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189337"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contrast​Bolus​Ingredient​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189338"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contrast​Administration​Profile​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189340"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contrast​Bolus​Usage​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189341"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Contrast​Bolus​Agent​Administered(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189342"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Contrast​Bolus​Agent​Detected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189343"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Contrast​Bolus​Agent​Phase(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189344"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble CTD​Ivol(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189345"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CTDI​Phantom​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189346"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Calcium​Scoring​Mass​Factor​Patient(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189351"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Calcium​Scoring​Mass​Factor​Device(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189352"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Energy​Weighting​Factor(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189353"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence CT​Additional​X​Ray​Source​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189360"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multienergy​CT​Acquisition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189361"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multienergy​CT​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189362"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multienergy​CT​Processing​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189363"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multienergy​CT​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189364"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multienergy​CT​XRay​Source​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189365"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort XRay​Source​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189366"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter XRay​Source​ID(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("00189367"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multienergy​Source​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189368"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Source​Start​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189369"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Source​End​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0018936A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Switching​Phase​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0018936B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Switching​Phase​Nominal​Duration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0018936C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Switching​Phase​Transition​Duration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0018936D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Effective​Bin​Energy(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0018936E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multienergy​CT​XRay​Detector​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018936F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort XRay​Detector​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189370"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter XRay​Detector​ID(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("00189371"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multienergy​Detector​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189372"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText XRay​Detector​Label(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00189373"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Max​Energy(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00189374"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Min​Energy(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00189375"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​XRay​Detector​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189376"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​XRay​Source​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189377"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Path​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189378"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multienergy​CT​Path​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189379"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Multienergy​CT​Path​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0018937A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Multienergy​Acquisition​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0018937B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Monoenergetic​Energy​Equivalent(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0018937C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Material​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018937D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decomposition​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018937E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Decomposition​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0018937F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Decomposition​Algorithm​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189380"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Decomposition​Material​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189381"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Material​Attenuation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189382"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Photon​Energy(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00189383"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString XRay​Mass​Attenuation​Coefficient(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00189384"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Projection​Pixel​Calibration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distance​Source​To​Isocenter(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distance​Object​To​Table​Top(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Object​Pixel​Spacing​In​Center​Of​Beam(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Positioner​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189405"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Table​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189406"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Collimator​Shape​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189407"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Planes​In​Acquisition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence XAXRF​Frame​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189412"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189417"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString X​Ray​Receptor​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Acquisition​Protocol​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189423"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Acquisition​Protocol​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00189424"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Contrast​Bolus​Ingredient​Opaque(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189425"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distance​Receptor​Plane​To​Detector​Housing(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189426"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Intensifier​Active​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189427"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Intensifier​Active​Dimensions(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189428"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Physical​Detector​Size(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189429"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Position​Of​Isocenter​Projection(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189430"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Field​Of​View​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189432"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Field​Of​View​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189433"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Exposure​Control​Sensing​Regions​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189434"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Exposure​Control​Sensing​Region​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189435"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Exposure​Control​Sensing​Region​Left​Vertical​Edge(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189436"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Exposure​Control​Sensing​Region​Right​Vertical​Edge(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189437"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Exposure​Control​Sensing​Region​Upper​Horizontal​Edge(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189438"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Exposure​Control​Sensing​Region​Lower​Horizontal​Edge(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189439"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Center​Of​Circular​Exposure​Control​Sensing​Region(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189440"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Radius​Of​Circular​Exposure​Control​Sensing​Region(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189441"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Vertices​Of​The​Polygonal​Exposure​Control​Sensing​Region(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189442"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Column​Angulation​Patient(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189447"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Beam​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189449"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Detector​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189451"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Calculated​Anatomy​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189452"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Calibration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189455"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Object​Thickness​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189456"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Plane​Identification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189457"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Field​Of​View​Dimensions​In​Float(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189461"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Isocenter​Reference​System​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189462"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Positioner​Isocenter​Primary​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189463"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Positioner​Isocenter​Secondary​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189464"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Positioner​Isocenter​Detector​Rotation​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189465"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​X​Position​To​Isocenter(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189466"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Y​Position​To​Isocenter(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189467"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Z​Position​To​Isocenter(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189468"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Horizontal​Rotation​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189469"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Head​Tilt​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189470"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Cradle​Tilt​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189471"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Display​Shutter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189472"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Acquired​Image​Area​Dose​Product(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189473"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString C​Arm​Positioner​Tabletop​Relationship(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189474"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence X​Ray​Geometry​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189476"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Irradiation​Event​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189477"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence X​Ray3D​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189504"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contributing​Sources​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189506"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence X​Ray3D​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189507"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Primary​Positioner​Scan​Arc(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189508"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Secondary​Positioner​Scan​Arc(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189509"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Primary​Positioner​Scan​Start​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Secondary​Positioner​Scan​Start​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189511"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Primary​Positioner​Increment(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189514"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Secondary​Positioner​Increment(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00189515"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Start​Acquisition​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189516"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime End​Acquisition​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189517"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Primary​Positioner​Increment​Sign(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189518"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Secondary​Positioner​Increment​Sign(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00189519"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Application​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189524"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Application​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189525"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Application​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189526"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Algorithm​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189527"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Algorithm​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189528"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence X​Ray3D​Reconstruction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189530"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reconstruction​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189531"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Per​Projection​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189538"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Detector​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189541"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence XRay​Acquisition​Dose​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189542"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble XRay​Source​Isocenter​Primary​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189543"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble XRay​Source​Isocenter​Secondary​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189544"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Breast​Support​Isocenter​Primary​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189545"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Breast​Support​Isocenter​Secondary​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189546"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Breast​Support​XPosition​To​Isocenter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189547"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Breast​Support​YPosition​To​Isocenter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189548"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Breast​Support​ZPosition​To​Isocenter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189549"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​Isocenter​Primary​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189550"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​Isocenter​Secondary​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189551"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​XPosition​To​Isocenter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189552"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​YPosition​To​Isocenter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189553"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​ZPosition​To​Isocenter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189554"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence XRay​Grid​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189555"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence XRay​Filter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189556"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​Active​Area​TLHCPosition(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189557"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Detector​Active​Area​Orientation(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189558"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Positioner​Primary​Angle​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189559"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Diffusion​B​Matrix​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189601"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value​XX(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189602"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value​XY(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189603"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value​XZ(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189604"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value​YY(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189605"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value​YZ(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189606"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffusion​B​Value​ZZ(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189607"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Functional​MR​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189621"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Functional​Settling​Phase​Frames​Present(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189622"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Functional​Sync​Pulse(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189623"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Settling​Phase​Frame(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189624"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Decay​Correction​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189701"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Start​Density​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189715"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Start​Relative​Density​Difference​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189716"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Start​Cardiac​Trigger​Count​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189717"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Start​Respiratory​Trigger​Count​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189718"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Termination​Counts​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189719"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Termination​Density​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189720"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Termination​Relative​Density​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189721"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Termination​Time​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189722"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Termination​Cardiac​Trigger​Count​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189723"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Termination​Respiratory​Trigger​Count​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189724"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Detector​Geometry(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189725"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Transverse​Detector​Separation(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189726"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Axial​Detector​Dimension(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189727"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Radio​pharmaceutical​Agent​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189729"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Frame​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189732"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Detector​Motion​Details​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189733"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Table​Dynamics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189734"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189735"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Frame​Correction​Factors​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189736"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Radio​pharmaceutical​Usage​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189737"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Attenuation​Correction​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189738"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Iterations(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189739"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Subsets(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189740"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Reconstruction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189749"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PET​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189751"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Time​Of​Flight​Information​Used(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189755"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reconstruction​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189756"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decay​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189758"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Attenuation​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189759"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scatter​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189760"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dead​Time​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189761"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Gantry​Motion​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189762"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Motion​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189763"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Count​Loss​Normalization​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189764"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Randoms​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189765"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Non​Uniform​Radial​Sampling​Corrected(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189766"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Sensitivity​Calibrated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189767"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Detector​Normalization​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189768"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Iterative​Reconstruction​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189769"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Attenuation​Correction​Temporal​Relationship(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189770"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Physiological​State​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189771"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Physiological​State​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189772"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Depths​Of​Focus(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189801"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Excluded​Intervals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189803"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Exclusion​Start​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189804"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Exclusion​Duration(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189805"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence US​Image​Description​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189806"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Data​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189807"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Data​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189808"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Scan​Pattern​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189809"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Aliased​Data​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018980B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Position​Measuring​Device​Used(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0018980C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Geometry​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018980D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Beam​Steering​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018980E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transducer​Application​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018980F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Zero​Velocity​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189810"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reference​Location​L​abel(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189900"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Reference​Location​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00189901"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reference​Basis​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189902"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reference​Geometry​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189903"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Offset​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00189904"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Offset​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189905"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Potential​Scheduled​Protocol​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189906"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Potential​Requested​Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189907"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Potential​Reasons​For​Procedure(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("00189908"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Potential​Reasons​For​Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189909"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Potential​Diagnostic​Tasks(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("0018990A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contraindications​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018990B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Defined​Protocol​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018990C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Performed​Protocol​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018990D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Predecessor​Protocol​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018990E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Protocol​Planning​Information(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0018990F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Protocol​Design​Rationale(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00189910"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Specification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189911"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Model​Specification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189912"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Parameters​Specification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189913"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Instruction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189914"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Instruction​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189915"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Instruction​Text(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189916"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Instruction​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00189917"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Instruction​Performed​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189918"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Instruction​Performed​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00189919"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Instruction​Performance​Comment(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0018991A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Positioning​Instruction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018991B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Positioning​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018991C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Positioning​Landmark​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018991D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Target​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0018991E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Protocol​Element​Specification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018991F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Protocol​Element​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189920"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Protocol​Element​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189921"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Protocol​Element​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189922"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Protocol​Element​Characteristics​Summary(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00189923"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Protocol​Element​Purpose(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00189924"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Motion(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189930"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Start​Location​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189931"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​End​Location​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189932"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reconstruction​Protocol​Element​Specification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189933"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reconstruction​Protocol​Element​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189934"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Storage​Protocol​Element​Specification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189935"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Storage​Protocol​Element​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00189936"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requested​Series​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00189937"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Source​Acquisition​Protocol​Element​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189938"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Source​Acquisition​Beam​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00189939"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Source​Reconstruction​Protocol​Element​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0018993A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reconstruction​Start​Location​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018993B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reconstruction​End​Location​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018993C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reconstruction​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018993D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reconstruction​Target​Center​Location​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018993E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Image​Filter​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00189941"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble CTDIvol​Notification​Trigger(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189942"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble DLP​Notification​Trigger(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189943"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Auto​KVP​Selection​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189944"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Auto​KVP​Upper​Bound(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189945"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Auto​KVP​Lower​Bound(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00189946"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Protocol​Defined​Patient​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00189947"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contributing​Equipment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0018A001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Contribution​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0018A002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Contribution​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0018A003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Study​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0020000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Series​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0020000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Study​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00200010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Series​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Acquisition​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Instance​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Isotope​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Phase​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Interval​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Time​Slot​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Angle​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Item​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Orientation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00200020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Overlay​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Curve​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString LUT​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00200030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Position​Patient(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00200032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Orientation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00200035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Orientation​Patient(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00200037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Location(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00200050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00200052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Laterality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00200060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Laterality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00200062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Image​Geometry​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00200070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Masking​Image(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00200080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Report​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("002000AA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Temporal​Position​Identifier(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Temporal​Positions(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00200105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Temporal​Resolution(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00200110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Synchronization​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00200200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier SOP​Instance​UID​Of​Concatenation​Source(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00200242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Series​In​Study(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Acquisitions​In​Series(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Images​In​Acquisition(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Images​In​Series(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Acquisitions​In​Study(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Images​In​Study(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reference(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00201020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Target​Position​Reference​Indicator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0020103F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Position​Reference​Indicator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00201040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Slice​Location(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00201041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Other​Study​Numbers(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Patient​Related​Studies(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Patient​Related​Series(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Patient​Related​Instances(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Study​Related​Series(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201206"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Study​Related​Instances(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Series​Related​Instances(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00201209"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Source​Image​IDs(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("002031xx"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modifying​Device​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00203401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modified​Image​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00203402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Modified​Image​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00203403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Modifying​Device​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00203404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Modified​Image​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00203405"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Modified​Image​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00203406"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Image​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00204000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Original​Image​Identification(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00205000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Original​Image​Identification​Nomenclature(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00205002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Stack​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00209056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong In​Stack​Position​Number(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00209057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Anatomy​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Frame​Laterality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00209072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Plane​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Plane​Orientation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209116"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Temporal​Position​Index(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00209128"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Nominal​Cardiac​Trigger​Delay​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209153"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Nominal​Cardiac​Trigger​Time​Prior​To​R​Peak(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00209154"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Actual​Cardiac​Trigger​Time​Prior​To​R​Peak(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00209155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Frame​Acquisition​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00209156"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Dimension​Index​Values(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00209157"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Frame​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00209158"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Concatenation​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00209161"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort In​Concatenation​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00209162"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort In​Concatenation​Total​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00209163"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Dimension​Organization​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00209164"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Dimension​Index​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00209165"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Functional​Group​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00209167"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Unassigned​Shared​Converted​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209170"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Unassigned​Per​Frame​Converted​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209171"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conversion​Source​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209172"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Dimension​Index​Private​Creator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00209213"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dimension​Organization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209221"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dimension​Index​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Concatenation​Frame​Offset​Number(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00209228"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Functional​Group​Private​Creator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00209238"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Nominal​Percentage​Of​Cardiac​Phase(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00209241"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Nominal​Percentage​Of​Respiratory​Phase(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00209245"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Starting​Respiratory​Amplitude(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00209246"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Starting​Respiratory​Phase(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00209247"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ending​Respiratory​Amplitude(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00209248"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ending​Respiratory​Phase(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00209249"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Respiratory​Trigger​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00209250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble RR​Interval​Time​Nominal(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Actual​Cardiac​Trigger​Delay​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209252"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Respiratory​Synchronization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209253"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Respiratory​Interval​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209254"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Nominal​Respiratory​Trigger​Delay​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209255"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Respiratory​Trigger​Delay​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209256"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Actual​Respiratory​Trigger​Delay​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209257"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Image​Position​Volume(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Image​Orientation​Volume(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ultrasound​Acquisition​Geometry(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00209307"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Apex​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Volume​To​Transducer​Mapping​Matrix(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00209309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Volume​To​Table​Mapping​Matrix(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0020930A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Volume​To​Transducer​Relationship(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0020930B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Frame​Of​Reference​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0020930C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Temporal​Position​Time​Offset(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0020930D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Plane​Position​Volume​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0020930E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Plane​Orientation​Volume​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0020930F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Temporal​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dimension​Organization​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00209311"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Volume​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00209312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Table​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00209313"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Dimension​Description​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00209421"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Orientation​In​Frame​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209450"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Frame​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00209453"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Acquisition​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00209518"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contributing​SOP​Instances​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00209529"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Reconstruction​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00209536"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Light​Path​Filter​Pass​Through​Wavelength(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00220001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Light​Path​Filter​Pass​Band(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00220002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Path​Filter​Pass​Through​Wavelength(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00220003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Path​Filter​Pass​Band(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00220004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Eye​Movement​Commanded(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00220005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Eye​Movement​Command​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Spherical​Lens​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Cylinder​Lens​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Cylinder​Axis(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Emmetropic​Magnification(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0022000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Intra​Ocular​Pressure(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0022000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Horizontal​Field​Of​View(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0022000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pupil​Dilated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0022000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Degree​Of​Dilation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0022000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stereo​Baseline​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stereo​Baseline​Displacement(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stereo​Horizontal​Pixel​Offset(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stereo​Vertical​Pixel​Offset(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stereo​Rotation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Device​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Illumination​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Light​Path​Filter​Type​Stack​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Path​Filter​Type​Stack​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Lenses​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Description​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0022001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Refractive​State​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0022001B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mydriatic​Agent​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0022001C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Relative​Image​Position​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0022001D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Camera​Angle​Of​View(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0022001E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Stereo​Pairs​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Left​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Right​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Stereo​Pairs​Present(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00220028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Axial​Length​Of​The​Eye(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Frame​Location​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Reference​Coordinates(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Depth​Spatial​Resolution(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Depth​Distortion(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Along​Scan​Spatial​Resolution(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Along​Scan​Distortion(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Image​Orientation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00220039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Depth​Of​Transverse​Image(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mydriatic​Agent​Concentration​Units​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Across​Scan​Spatial​Resolution(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Across​Scan​Distortion(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220049"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Mydriatic​Agent​Concentration(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0022004E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Illumination​Wave​Length(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Illumination​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Illumination​Bandwidth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00220057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mydriatic​Agent​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00220058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Measurements​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Measurements​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Axial​Measurements​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Axial​Length​Measurements​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ophthalmic​Axial​Length(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Lens​Status​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Vitreous​Status​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence IOL​Formula​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString IOL​Formula​Detail(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Keratometer​Index(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Of​Ophthalmic​Axial​Length​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Of​Corneal​Size​Data​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Target​Refraction(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Refractive​Procedure​Occurred(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Refractive​Surgery​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Ultrasound​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle IOL​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Predicted​Refractive​Error(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ophthalmic​Axial​Length​Velocity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221059"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Lens​Status​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Vitreous​Status​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence IOL​Power​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Lens​Constant​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString IOL​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221093"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Lens​Constant​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221095"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Keratometry​Measurement​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221096"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Part​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221097"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Ophthalmic​Axial​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Measurements​Segment​Name​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Refractive​Error​Before​Refractive​Surgery​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle IOL​Power​For​Exact​Emmetropia(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle IOL​Power​For​Exact​Target​Refraction(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anterior​Chamber​Depth​Definition​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Lens​Thickness​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221127"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anterior​Chamber​Depth​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221128"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Lens​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Anterior​Chamber​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221131"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Of​Lens​Thickness​Data​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Of​Anterior​Chamber​Depth​Data​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221133"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Of​Refractive​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Of​Refractive​Measurements​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221135"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Axial​Length​Measurement​Modified(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Data​Source​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Acquisition​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221153"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Signal​To​Noise​Ratio(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Ophthalmic​Axial​Length​Data​Source​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221159"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Measurements​Total​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Measurements​Segmental​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221211"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Measurements​Length​Summation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ultrasound​Ophthalmic​Axial​Length​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Optical​Ophthalmic​Axial​Length​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221225"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ultrasound​Selected​Ophthalmic​Axial​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Selection​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Optical​Selected​Ophthalmic​Axial​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221255"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Selected​Segmental​Ophthalmic​Axial​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221257"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Selected​Total​Ophthalmic​Axial​Length​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221260"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Quality​Metric​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221262"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Axial​Length​Quality​Metric​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221265"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Ophthalmic​Axial​Length​Quality​Metric​Type​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221273"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intraocular​Lens​Calculations​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intraocular​Lens​Calculations​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Ophthalmic​Axial​Length​Measurement​QC​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Mapping​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221415"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Method​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221423"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Thickness​Map​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221436"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Thickness​Mapping​Normals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221443"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Retinal​Thickness​Definition​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221445"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Value​Mapping​To​Coded​Concept​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221450"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Mapped​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00221452"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Pixel​Value​Mapping​Explanation(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221454"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Thickness​Map​Quality​Threshold​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221458"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ophthalmic​Thickness​Map​Threshold​Quality​Rating(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221460"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Anatomic​Structure​Reference​Point(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221463"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Registration​To​Localizer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221465"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Registered​Localizer​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221466"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Registered​Localizer​Top​Left​Hand​Corner(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221467"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Registered​Localizer​Bottom​Right​Hand​Corner(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221468"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Thickness​Map​Quality​Rating​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221470"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Relevant​OPT​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221472"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transformation​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221512"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Transformation​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221513"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Axial​Length​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221515"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ophthalmic​FOV(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221517"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Two​Dimensional​To​Three​Dimensional​Map​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221518"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Wide​Field​Ophthalmic​Photography​Quality​Rating​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221525"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Wide​Field​Ophthalmic​Photography​Quality​Threshold​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221526"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Wide​Field​Ophthalmic​Photography​Threshold​Quality​Rating(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221527"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle X​Coordinates​Center​Pixel​View​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221528"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Y​Coordinates​Center​Pixel​View​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221529"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Map​Points(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00221530"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Two​Dimensional​To​Three​Dimensional​Map​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00221531"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Derivation​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221612"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Image​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221615"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Ophthalmic​Image​Type​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00221616"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scan​Pattern​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221618"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Surface​Mesh​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221620"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ophthalmic​Volumetric​Properties​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00221622"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ophthalmic​Anatomic​Reference​Point​XCoordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221624"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ophthalmic​Anatomic​Reference​Point​YCoordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221626"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​En​Face​Image​Quality​Rating​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221628"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Quality​Threshold(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00221630"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence OCTBscan​Analysis​Acquisition​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00221640"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Numberof​Bscans​Per​Frame(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00221642"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bscan​Slab​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221643"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distance​Between​Bscan​Slabs(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221644"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bscan​Cycle​Time(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221645"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bscan​Cycle​Time​Vector(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221646"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Ascan​Rate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221649"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bscan​Rate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00221650"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Surface​Mesh​ZPixel​Offset(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00221658"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Visual​Field​Horizontal​Extent(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Visual​Field​Vertical​Extent(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Visual​Field​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Screening​Test​Mode​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Stimulus​Luminance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Background​Luminance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Stimulus​Color​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Background​Illumination​Color​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stimulus​Area(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Stimulus​Presentation​Time(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fixation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fixation​Monitoring​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Field​Catch​Trial​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Fixation​Checked​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Patient​Not​Properly​Fixated​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presented​Visual​Stimuli​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Visual​Stimuli(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Excessive​Fixation​Losses​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Excessive​Fixation​Losses(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Stimuli​Retesting​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Comments​On​Patient​Performance​Of​Visual​Field(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00240044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString False​Negatives​Estimate​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle False​Negatives​Estimate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Negative​Catch​Trials​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort False​Negatives​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Excessive​False​Negatives​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Excessive​False​Negatives(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString False​Positives​Estimate​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle False​Positives​Estimate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Catch​Trials​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Positive​Catch​Trials​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Test​Point​Normals​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Test​Point​Normals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Global​Deviation​Probability​Normals​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240059"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort False​Positives​Quantity(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00240060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Excessive​False​Positives​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Excessive​False​Positives(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Visual​Field​Test​Normals​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Results​Normals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Age​Corrected​Sensitivity​Deviation​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Global​Deviation​From​Normal(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Generalized​Defect​Sensitivity​Deviation​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Localized​Deviation​From​Normal(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Reliability​Indicator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00240069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Visual​Field​Mean​Sensitivity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Global​Deviation​Probability(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Local​Deviation​Probability​Normals​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Localized​Deviation​Probability(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Short​Term​Fluctuation​Calculated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Short​Term​Fluctuation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Short​Term​Fluctuation​Probability​Calculated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Short​Term​Fluctuation​Probability(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Corrected​Localized​Deviation​From​Normal​Calculated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corrected​Localized​Deviation​From​Normal(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240079"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Corrected​Localized​Deviation​From​Normal​Probability​Calculated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corrected​Localized​Deviation​From​Normal​Probability(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Global​Deviation​Probability​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Localized​Deviation​Probability​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Foveal​Sensitivity​Measured(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Foveal​Sensitivity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Visual​Field​Test​Duration(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Field​Test​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240089"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Visual​Field​Test​Point​X​Coordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Visual​Field​Test​Point​Y​Coordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240091"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Age​Corrected​Sensitivity​Deviation​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Stimulus​Results(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240093"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Sensitivity​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Retest​Stimulus​Seen(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240095"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Retest​Sensitivity​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240096"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Field​Test​Point​Normals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240097"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Quantified​Defect(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240098"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Age​Corrected​Sensitivity​Deviation​Probability​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Generalized​Defect​Corrected​Sensitivity​Deviation​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Generalized​Defect​Corrected​Sensitivity​Deviation​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Generalized​Defect​Corrected​Sensitivity​Deviation​Probability​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Minimum​Sensitivity​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blind​Spot​Localized(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Blind​Spot​X​Coordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Blind​Spot​Y​Coordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Acuity​Measurement​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Refractive​Parameters​Used​On​Patient​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Measurement​Laterality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Patient​Clinical​Information​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ophthalmic​Patient​Clinical​Information​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Foveal​Point​Normative​Data​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240117"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Foveal​Point​Probability​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240118"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Screening​Baseline​Measured(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Screening​Baseline​Measured​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Screening​Baseline​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Screening​Baseline​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240126"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Algorithm​Source(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00240202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Data​Set​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00240306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Data​Set​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00240307"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Data​Set​Source(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00240308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Data​Set​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00240309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Field​Test​Reliability​Global​Index​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240317"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Field​Global​Results​Index​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Data​Observation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240325"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Index​Normals​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00240338"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Index​Probability(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00240341"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Index​Probability​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00240344"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Samples​Per​Pixel(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Samples​Per​Pixel​Used(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Photometric​Interpretation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Dimensions(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Planar​Configuration(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Frames(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00280008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Frame​Increment​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00280009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Frame​Dimension​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("0028000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Rows(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Columns(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Planes(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Ultrasound​Color​Data​Present(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00280030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Zoom​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00280031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Zoom​Center(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00280032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Pixel​Aspect​Ratio(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00280034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Format(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Manipulated​Image(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Corrected​Image(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Compression​Recognition​Code(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0028005F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compression​Code(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Compression​Originator(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00280061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Compression​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Compression​Description(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00280063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compression​Sequence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Compression​Step​Pointers(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00280066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Repeat​Interval(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Bits​Grouped(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Perimeter​Table(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Perimeter​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Predictor​Rows(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Predictor​Columns(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Predictor​Constants(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blocked​Pixels(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Block​Rows(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280091"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Block​Columns(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Row​Overlap(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280093"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Column​Overlap(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Bits​Allocated(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Bits​Stored(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort High​Bit(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Representation(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Smallest​Valid​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Largest​Valid​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Smallest​Image​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Largest​Image​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Smallest​Pixel​Value​In​Series(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Largest​Pixel​Value​In​Series(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280109"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Smallest​Image​Pixel​Value​In​Plane(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Largest​Image​Pixel​Value​In​Plane(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Padding​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Padding​Range​Limit(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Float​Pixel​Padding​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00280122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Double​Float​Pixel​Padding​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00280123"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Float​Pixel​Padding​Range​Limit(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00280124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Double​Float​Pixel​Padding​Range​Limit(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00280125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Location(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Quality​Control​Image(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Burned​In​Annotation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Recognizable​Visual​Features(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Longitudinal​Temporal​Information​Modified(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Color​Palette​Instance​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00280304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Transform​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Transform​Version​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Transform​Steps(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Sequence​Of​Compressed​Data(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Details​Of​Coefficients(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00280404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Rows​For​Nth​Order​Coefficients(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("002804x0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Columns​For​Nth​Order​Coefficients(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("002804x1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Coefficient​Coding(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("002804x2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Coefficient​Coding​Pointers(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("002804x3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString DCT​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280700"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Data​Block​Description(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280701"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Data​Block(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00280702"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Normalization​Factor​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280710"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Zonal​Map​Number​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280720"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Zonal​Map​Location(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00280721"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Zonal​Map​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280722"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Adaptive​Map​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280730"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Code​Number​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00280740"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Code​Label(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("002808x0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Tables(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("002808x2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Code​Table​Location(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("002808x3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Bits​For​Code​Word(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("002808x4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Image​Data​Location(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("002808x8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pixel​Spacing​Calibration​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00280A02"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Pixel​Spacing​Calibration​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00280A04"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pixel​Intensity​Relationship(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Pixel​Intensity​Relationship​Sign(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00281041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Window​Center(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00281050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Window​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00281051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Rescale​Intercept(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00281052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Rescale​Slope(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00281053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Rescale​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00281054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Window​Center​Width​Explanation(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00281055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString VOILUT​Function(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Gray​Scale(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Recommended​Viewing​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Gray​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Red​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Green​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Blue​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Alpha​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Large​Red​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Large​Green​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Large​Blue​Palette​Color​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Palette​Color​Lookup​Table​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00281199"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Gray​Lookup​Table​Data(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Red​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Green​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Blue​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Alpha​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Large​Red​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281211"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Large​Green​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Large​Blue​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281213"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Large​Palette​Color​Lookup​Table​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00281214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Segmented​Red​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281221"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Segmented​Green​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Segmented​Blue​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281223"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Segmented​Alpha​Palette​Color​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Stored​Value​Color​Range​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00281230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Minimum​Stored​Value​Mapped(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00281231"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Maximum​Stored​Value​Mapped(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00281232"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Breast​Implant​Present(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Partial​View(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281350"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Partial​View​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00281351"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Partial​View​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00281352"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Spatial​Locations​Preserved(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0028135A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Data​Frame​Assignment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00281401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Data​Path​Assignment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Bits​Mapped​To​Color​Lookup​Table(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Blending​LUT1Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00281404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blending​LUT1Transfer​Function(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281405"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Blending​Weight​Constant(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00281406"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Blending​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00281407"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Blending​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00281408"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Enhanced​Palette​Color​Lookup​Table​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028140B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Blending​LUT2Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028140C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blending​LUT2Transfer​Function(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0028140D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Data​Path​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0028140E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RGBLUT​Transfer​Function(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0028140F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Alpha​LUT​Transfer​Function(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00281410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString ICC​Profile(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00282000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Color​Space(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00282002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Lossy​Image​Compression(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00282110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Lossy​Image​Compression​Ratio(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00282112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Lossy​Image​Compression​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00282114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Modality​LUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00283000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort LUT​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00283002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString LUT​Explanation(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00283003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Modality​LUT​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00283004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort LUT​Data(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00283006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence VOILUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00283010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Softcopy​VOILUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00283110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Image​Presentation​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00284000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Bi​Plane​Acquisition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00285000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Representative​Frame​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Frame​Numbers​Of​Interest(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Frame​Of​Interest​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00286022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Frame​Of​Interest​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00286023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Mask​Pointers(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort R​Wave​Pointer(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mask​Subtraction​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00286100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Mask​Operation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00286101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Applicable​Frame​Range(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Mask​Frame​Numbers(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Contrast​Frame​Averaging(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00286112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Mask​Sub​Pixel​Shift(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00286114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort TID​Offset(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00286120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Mask​Operation​Explanation(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00286190"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Equipment​Administrator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Display​Subsystems(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00287001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Current​Configuration​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00287002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Display​Subsystem​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00287003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Display​Subsystem​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00287004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Display​Subsystem​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00287005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString System​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString System​Status​Comment(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00287007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Target​Luminance​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Luminance​Characteristics​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00287009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Display​Subsystem​Configuration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028700A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Configuration​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0028700B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Configuration​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("0028700C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Configuration​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0028700D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Target​Luminance​Characteristics​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0028700E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence QAResults​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028700F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Display​Subsystem​QAResults​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Configuration​QAResults​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measurement​Equipment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Measurement​Functions(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Measurement​Equipment​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Evaluation​Result​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Display​Calibration​Result​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort DDLValue(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00287017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle CIExy​White​Point(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00287018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Display​Function​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Gamma​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0028701A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Luminance​Points(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0028701B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Luminance​Response​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028701C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Target​Minimum​Luminance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0028701D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Target​Maximum​Luminance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0028701E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Luminance​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0028701F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Luminance​Response​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00287020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString White​Point​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Display​Device​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Display​Subsystem​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Luminance​Result​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Ambient​Light​Value​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Measured​Characteristics(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Luminance​Uniformity​Result​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Evaluation​Test​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00287028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Test​Result(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00287029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Test​Result​Comment(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0028702A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Test​Image​Validation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0028702B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Test​Pattern​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028702C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measurement​Pattern​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028702D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Evaluation​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0028702E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Pixel​Data​Provider​URL(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("00287FE0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Data​Point​Rows(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00289001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Data​Point​Columns(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00289002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Signal​Domain​Columns(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Largest​Monochrome​Pixel​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00289099"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Data​Representation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Measures​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​VOILUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Value​Transformation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289145"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Signal​Domain​Rows(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289235"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Display​Filter​Percentage(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00289411"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Pixel​Shift​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289415"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Subtraction​Item​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00289416"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Intensity​Relationship​LUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289422"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Pixel​Data​Properties​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289443"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Geometrical​Properties(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289444"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Geometric​Maximum​Distortion(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00289445"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Processing​Applied(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289446"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Mask​Selection​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289454"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString LUT​Function(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289474"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Mask​Visibility​Percentage(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00289478"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Shift​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289501"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Region​Pixel​Shift​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289502"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Vertices​Of​The​Region(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00289503"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multi​Frame​Presentation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00289505"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pixel​Shift​Frame​Range(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00289506"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort LUT​Frame​Range(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00289507"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​To​Equipment​Mapping​Matrix(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00289520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Equipment​Coordinate​System​Identification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00289537"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Study​Status​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0032000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Study​Priority​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0032000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Study​ID​Issuer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00320012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Study​Verified​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00320032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Study​Verified​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00320033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Study​Read​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00320034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Study​Read​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00320035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Scheduled​Study​Start​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00321000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Scheduled​Study​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00321001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Scheduled​Study​Stop​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00321010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Scheduled​Study​Stop​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00321011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Scheduled​Study​Location(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00321020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Scheduled​Study​Location​AE​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00321021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reason​For​Study(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00321030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Requesting​Physician​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00321031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Requesting​Physician(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00321032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requesting​Service(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00321033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Requesting​Service​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00321034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Study​Arrival​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00321040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Study​Arrival​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00321041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Study​Completion​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00321050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Study​Completion​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00321051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Study​Component​Status​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00321055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requested​Procedure​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00321060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Requested​Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00321064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requested​Contrast​Agent(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00321070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Study​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00324000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Patient​Alias​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Visit​Status​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00380008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Admission​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Issuer​Of​Admission​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Issuer​Of​Admission​ID​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Route​Of​Admissions(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Scheduled​Admission​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0038001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Scheduled​Admission​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0038001B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Scheduled​Discharge​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0038001C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Scheduled​Discharge​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0038001D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Scheduled​Patient​Institution​Residence(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0038001E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Admitting​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00380020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Admitting​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00380021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Discharge​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00380030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Discharge​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00380032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Discharge​Diagnosis​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Discharge​Diagnosis​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Special​Needs(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Service​Episode​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Issuer​Of​Service​Episode​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Service​Episode​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Issuer​Of​Service​Episode​ID​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pertinent​Documents​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pertinent​Resources​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Resource​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Current​Patient​Location(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Institution​Residence(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​State(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00380500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Clinical​Trial​Participation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00380502"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Visit​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00384000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Waveform​Originality(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("003A0004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Waveform​Channels(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("003A0005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Waveform​Samples(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("003A0010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Sampling​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Multiplex​Group​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("003A0020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Definition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Waveform​Channel​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("003A0202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Channel​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("003A0203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Channel​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("003A0205"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Source​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Source​Modifiers​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0209"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Waveform​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A020A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Channel​Derivation​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("003A020C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Sensitivity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Sensitivity​Units​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0211"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Sensitivity​Correction​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Baseline(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0213"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Time​Skew(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Sample​Skew(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0215"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Offset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Waveform​Bits​Stored(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("003A021A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Filter​Low​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Filter​High​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0221"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Notch​Filter​Frequency(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Notch​Filter​Bandwidth(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("003A0223"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Waveform​Data​Display​Scale(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("003A0230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Waveform​Display​Background​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("003A0231"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Waveform​Presentation​Group​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0240"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Presentation​Group​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("003A0241"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Display​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Channel​Recommended​Display​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("003A0244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Channel​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("003A0245"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Display​Shading​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("003A0246"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Fractional​Channel​Display​Scale(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("003A0247"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Absolute​Channel​Display​Scale(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("003A0248"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Multiplexed​Audio​Channels​Description​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("003A0300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Channel​Identification​Code(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("003A0301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Channel​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("003A0302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Scheduled​Station​AE​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00400001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Scheduled​Procedure​Step​Start​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00400002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Scheduled​Procedure​Step​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00400003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Scheduled​Procedure​Step​End​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00400004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Scheduled​Procedure​Step​End​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00400005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Scheduled​Performing​Physician​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00400006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Scheduled​Procedure​Step​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Protocol​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Scheduled​Procedure​Step​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00400009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Stage​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Performing​Physician​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Scheduled​Station​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00400010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Scheduled​Procedure​Step​Location(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00400011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Pre​Medication(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scheduled​Procedure​Step​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00400020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Order​Placer​Identifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Order​Filler​Identifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Local​Namespace​Entity​ID(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00400031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Universal​Entity​ID(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00400032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Universal​Entity​ID​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00400033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Identifier​Type​Code(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00400035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assigning​Facility​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assigning​Jurisdiction​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assigning​Agency​Or​Department​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040003A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Non​Image​Composite​SOP​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Performed​Station​AE​Title(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00400241"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Performed​Station​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00400242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Performed​Location(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00400243"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Performed​Procedure​Step​Start​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00400244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Performed​Procedure​Step​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00400245"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Performed​Procedure​Step​End​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00400250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Performed​Procedure​Step​End​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00400251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Performed​Procedure​Step​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00400252"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Performed​Procedure​Step​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00400253"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Performed​Procedure​Step​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400254"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Performed​Procedure​Type​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400255"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Protocol​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400260"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Performed​Protocol​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00400261"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Step​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400270"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Request​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400275"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Comments​On​The​Performed​Procedure​Step(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00400280"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Procedure​Step​Discontinuation​Reason​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400281"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Quantity​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400293"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Quantity(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00400294"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measuring​Units​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400295"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Billing​Item​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400296"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Total​Time​Of​Fluoroscopy(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00400300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Total​Number​Of​Exposures(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00400301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Entrance​Dose(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00400302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Exposed​Area(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00400303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Distance​Source​To​Entrance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00400306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Distance​Source​To​Support(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00400307"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Exposure​Dose​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040030E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Comments​On​Radiation​Dose(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00400310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString X​Ray​Output(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00400312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Half​Value​Layer(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00400314"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Organ​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00400316"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Organ​Exposed(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00400318"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Billing​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Film​Consumption​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400321"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Billing​Supplies​And​Devices​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400324"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Series​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400340"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Comments​On​The​Scheduled​Procedure​Step(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00400400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Protocol​Context​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400440"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Content​Item​Modifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400441"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Specimen​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Specimen​Accession​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040050A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Container​Identifier(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400512"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Issuer​Of​The​Container​Identifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400513"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Alternate​Container​Identifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400515"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Container​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400518"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Container​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040051A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Container​Component​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400550"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Specimen​Identifier(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400551"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Description​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400552"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Specimen​Description​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00400553"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Specimen​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00400554"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Acquisition​Context​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400555"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Acquisition​Context​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00400556"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040059A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Description​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400560"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Issuer​Of​The​Specimen​Identifier​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400562"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Specimen​Short​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00400600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Specimen​Detailed​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00400602"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Preparation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400610"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Preparation​Step​Content​Item​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400612"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Localization​Content​Item​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400620"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Slide​Identifier(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("004006FA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Whole​Slide​Microscopy​Image​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00400710"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Center​Point​Coordinates​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040071A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString X​Offset​In​Slide​Coordinate​System(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0040072A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Y​Offset​In​Slide​Coordinate​System(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0040073A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Z​Offset​In​Slide​Coordinate​System(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0040074A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Spacing​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("004008D8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Coordinate​System​Axis​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("004008DA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measurement​Units​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("004008EA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Vital​Stain​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("004009F8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Requested​Procedure​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00401001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reason​For​The​Requested​Procedure(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00401002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Requested​Procedure​Priority(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00401003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Transport​Arrangements(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00401004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requested​Procedure​Location(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00401005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Placer​Order​Number​Procedure(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00401006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Filler​Order​Number​Procedure(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00401007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Confidentiality​Code(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00401008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Reporting​Priority(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00401009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reason​For​Requested​Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040100A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Names​Of​Intended​Recipients​Of​Results(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00401010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intended​Recipients​Of​Results​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00401011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Reason​For​Performed​Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00401012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requested​Procedure​Description​Trial(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00401060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Person​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00401101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Person​Address(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00401102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Person​Telephone​Numbers(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00401103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Person​Telecom​Information(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00401104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Requested​Procedure​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00401400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reason​For​The​Imaging​Service​Request(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00402001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Issue​Date​Of​Imaging​Service​Request(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00402004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Issue​Time​Of​Imaging​Service​Request(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00402005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Placer​Order​Number​Imaging​Service​Request​Retired(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00402006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Filler​Order​Number​Imaging​Service​Request​Retired(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00402007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Order​Entered​By(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00402008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Order​Enterer​Location(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00402009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Order​Callback​Phone​Number(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00402010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Order​Callback​Telecom​Information(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00402011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Placer​Order​Number​Imaging​Service​Request(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00402016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Filler​Order​Number​Imaging​Service​Request(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00402017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Imaging​Service​Request​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00402400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Confidentiality​Constraint​On​Patient​Data​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00403001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString General​Purpose​Scheduled​Procedure​Step​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString General​Purpose​Performed​Procedure​Step​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString General​Purpose​Scheduled​Procedure​Step​Priority(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Processing​Applications​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Scheduled​Procedure​Step​Start​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multiple​Copies​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Processing​Applications​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Scheduled​Procedure​Step​Expiration​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Human​Performer​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Scheduled​Procedure​Step​Modification​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Expected​Completion​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Resulting​General​Purpose​Performed​Procedure​Steps​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​General​Purpose​Scheduled​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Workitem​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Workitem​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Input​Availability​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Input​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Relevant​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​General​Purpose​Scheduled​Procedure​Step​Transaction​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00404023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Station​Name​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Station​Class​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Station​Geographic​Location​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Station​Name​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Station​Class​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Station​Geographic​Location​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Requested​Subsequent​Workitem​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Non​DICOM​Output​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Output​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Human​Performers​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Actual​Human​Performers​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Human​Performer​Organization(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00404036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Human​Performer​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00404037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Raw​Data​Handling(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Input​Readiness​State(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00404041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Performed​Procedure​Step​Start​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Performed​Procedure​Step​End​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Procedure​Step​Cancellation​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00404052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Output​Destination​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence DICOM​Storage​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence STOWRS​Storage​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Storage​URL(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("00404073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence XDS​Storage​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00404074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Entrance​Dose​In​mGy(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00408302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Entrance​Dose​Derivation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00408303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Parametric​​Map​​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00409092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Real​World​Value​Mapping​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00409094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Real​World​Value​Mapping​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00409096"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pixel​Value​Mapping​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00409098"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString LUT​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00409210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Real​World​Value​Last​Value​Mapped(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00409211"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Real​World​Value​LUT​Data(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00409212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Double​Float​Real​World​Value​Last​Value​Mapped(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00409213"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Double​Float​Real​World​Value​First​Value​Mapped(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00409214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Real​World​Value​First​Value​Mapped(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00409216"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Quantity​​Definition​​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00409220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Real​World​Value​Intercept(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00409224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Real​World​Value​Slope(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00409225"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Findings​Flag​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Relationship​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Findings​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Findings​Group​UID​Trial(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040A021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Findings​Group​UID​Trial(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040A022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Findings​Group​Recording​Date​Trial(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0040A023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Findings​Group​Recording​Time​Trial(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0040A024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Findings​Source​Category​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Verifying​Organization(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040A027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Documenting​Organization​Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Verification​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040A030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Observation​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040A032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Value​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Concept​Name​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Measurement​Precision​Description​Trial(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040A047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Continuity​Of​Content(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Urgency​Or​Priority​Alerts​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Sequencing​Indicator​Trial(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040A060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Document​Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Document​Author​Trial(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0040A067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Document​Author​Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Verifying​Observer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Object​Binary​Identifier​Trial(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("0040A074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Verifying​Observer​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0040A075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Documenting​Observer​Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Author​Observer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Participant​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A07A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Custodial​Organization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A07C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Participation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Participation​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040A082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Observer​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Verifying​Observer​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Object​Directory​Binary​Identifier​Trial(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("0040A089"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Equivalent​CDA​Document​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Waveform​Channels(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0040A0B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Date​Of​Document​Or​Verbal​Transaction​Trial(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0040A110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Time​Of​Document​Creation​Or​Verbal​Transaction​Trial(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0040A112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040A120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0040A121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0040A122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Person​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0040A123"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040A124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Report​Status​ID​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Temporal​Range​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Referenced​Sample​Positions(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0040A132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Frame​Numbers(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0040A136"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Referenced​Time​Offsets(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0040A138"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Referenced​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040A13A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Text​Value(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0040A160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Floating​Point​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0040A161"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Rational​Numerator​Value(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0040A162"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Rational​Denominator​Value(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0040A163"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Observation​Category​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A167"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Concept​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A168"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Bibliographic​Citation​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040A16A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Purpose​Of​Reference​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A170"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Observation​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040A171"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Observation​UID​Trial(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040A172"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Referenced​Observation​Class​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A173"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Referenced​Object​Observation​Class​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A174"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Annotation​Group​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0040A180"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Observation​Date​Trial(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("0040A192"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Observation​Time​Trial(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0040A193"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Measurement​Automation​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A194"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A195"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Identification​Description​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040A224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Coordinates​Set​Geometric​Type​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A290"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Algorithm​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A296"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Algorithm​Description​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040A297"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Pixel​Coordinates​Set​Trial(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0040A29A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measured​Value​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Numeric​Value​Qualifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Current​Observer​Trial(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0040A307"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Numeric​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0040A30A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Accession​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A313"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Report​Status​Comment​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040A33A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Context​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A340"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Verbal​Source​Trial(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0040A352"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Address​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040A353"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Telephone​Number​Trial(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040A354"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Verbal​Source​Identifier​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A358"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Predecessor​Documents​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A360"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Request​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A370"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Procedure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A372"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Current​Requested​Procedure​Evidence​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A375"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Report​Detail​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A380"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pertinent​Other​Evidence​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A385"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence HL7Structured​Document​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A390"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Observation​Subject​UID​Trial(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040A402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Observation​Subject​Class​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Observation​Subject​Type​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Completion​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A491"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Completion​Flag​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0040A492"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Verification​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A493"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Archive​Requested(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A494"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Preliminary​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A496"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Content​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A504"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Identical​Documents​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A525"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Observation​Subject​Context​Flag​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Observer​Context​Flag​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A601"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Procedure​Context​Flag​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040A603"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A730"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Relationship​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A731"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Relationship​Type​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A732"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Language​Code​Sequence​Trial(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040A744"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Uniform​Resource​Locator​Trial(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040A992"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Waveform​Annotation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040B020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Template​Identifier(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040DB00"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Template​Version(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040DB06"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Template​Local​Version(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040DB07"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Template​Extension​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040DB0B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Template​Extension​Organization​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040DB0C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Template​Extension​Creator​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040DB0D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Referenced​Content​Item​Identifier(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0040DB73"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText HL7Instance​Identifier(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0040E001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime HL7Document​Effective​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0040E004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence HL7Document​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Document​Class​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Retrieve​URI(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("0040E010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Retrieve​Location​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040E011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Type​Of​Instances(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0040E020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence DICOM​Retrieval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence DICOM​Media​Retrieval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence WADO​Retrieval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence XDS​Retrieval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence WADORS​Retrieval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0040E025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Repository​Unique​ID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040E030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Home​Community​ID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0040E031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Document​Title(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00420010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Encapsulated​Document(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00420011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString MIME​Type​Of​Encapsulated​Document(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00420012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00420013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString List​Of​MIME​Types(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00420014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Product​Package​Identifier(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00440001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Substance​Administration​Approval(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00440002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Approval​Status​Further​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00440003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Approval​Status​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00440004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Product​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Product​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00440008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Product​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00440009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Product​Lot​Identifier(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0044000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Product​Expiration​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0044000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Substance​Administration​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00440010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Substance​Administration​Notes(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00440011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Substance​Administration​Device​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00440012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Product​Parameter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Substance​Administration​Parameter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Approval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assertion​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Assertion​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00440102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Asserter​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Assertion​DateTime(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00440104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Assertion​Expiration​DateTime(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00440105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Assertion​Comments(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00440106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Related​Assertion​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Assertion​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00440108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Approval​Subject​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00440109"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Organizational​Role​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0044010A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Lens​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00460012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Right​Lens​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Left​Lens​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Unspecified​Laterality​Lens​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Cylinder​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Prism​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Horizontal​Prism​Power(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Horizontal​Prism​Base(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Vertical​Prism​Power(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Vertical​Prism​Base(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Lens​Segment​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Optical​Transmittance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Channel​Width(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Pupil​Size(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Corneal​Size(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Corneal​Size​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Autorefraction​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Autorefraction​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Distance​Pupillary​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Near​Pupillary​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Intermediate​Pupillary​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Other​Pupillary​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Keratometry​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Keratometry​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Steep​Keratometric​Axis​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Radius​Of​Curvature(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Keratometric​Power(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Keratometric​Axis(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Flat​Keratometric​Axis​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Background​Color(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Optotype(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Optotype​Presentation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460095"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Subjective​Refraction​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460097"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Subjective​Refraction​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460098"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Add​Near​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Add​Intermediate​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Add​Other​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Add​Power(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Viewing​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Acuity​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Acuity​Right​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Acuity​Left​Eye​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460123"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Visual​Acuity​Both​Eyes​Open​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Viewing​Distance​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Visual​Acuity​Modifiers(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00460135"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Decimal​Visual​Acuity(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460137"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Optotype​Detailed​Definition(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00460139"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Refractive​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460145"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Sphere​Power(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460146"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Cylinder​Power(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00460147"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Corneal​Topography​Surface(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corneal​Vertex​Location(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Pupil​Centroid​X​Coordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Pupil​Centroid​Y​Coordinate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Equivalent​Pupil​Radius(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460205"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Corneal​Topography​Map​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460207"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Vertices​Of​The​Outline​Of​Pupil(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00460208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Corneal​Topography​Mapping​Normals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Maximum​Corneal​Curvature​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460211"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Corneal​Curvature(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Corneal​Curvature​Location(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460213"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Minimum​Keratometric​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460215"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Simulated​Keratometric​Cylinder​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Average​Corneal​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corneal​IS​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Analyzed​Area(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460227"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Surface​Regularity​Index(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Surface​Asymmetry​Index(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460232"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corneal​Eccentricity​Index(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460234"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Keratoconus​Prediction​Index(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460236"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Decimal​Potential​Visual​Acuity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460238"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Corneal​Topography​Map​Quality​Evaluation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Image​Corneal​Processed​Data​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00460244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corneal​Point​Location(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460247"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Corneal​Point​Estimated(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00460248"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Axial​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460249"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Tangential​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Refractive​Power(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Relative​Elevation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460252"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Corneal​Wavefront(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00460253"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Imaged​Volume​Width(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00480001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Imaged​Volume​Height(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00480002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Imaged​Volume​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00480003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Total​Pixel​Matrix​Columns(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00480006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Total​Pixel​Matrix​Rows(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00480007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Total​Pixel​Matrix​Origin​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Specimen​Label​In​Image(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00480010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Focus​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00480011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Extended​Depth​Of​Field(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00480012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Focal​Planes(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00480013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distance​Between​Focal​Planes(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00480014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Recommended​Absent​Pixel​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00480015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Illuminator​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Orientation​Slide(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00480102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Optical​Path​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Optical​Path​Identifier(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00480106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Optical​Path​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00480107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Illumination​Color​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Specimen​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Condenser​Lens​Power(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00480111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Objective​Lens​Power(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00480112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Objective​Lens​Numerical​Aperture(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00480113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Palette​Color​Lookup​Table​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Navigation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Top​Left​Hand​Corner​Of​Localizer​Area(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00480201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Bottom​Right​Hand​Corner​Of​Localizer​Area(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00480202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Optical​Path​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00480207"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Plane​Position​Slide​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0048021A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Column​Position​In​Total​Image​Pixel​Matrix(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0048021E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Row​Position​In​Total​Image​Pixel​Matrix(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0048021F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pixel​Origin​Interpretation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00480301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Optical​Paths(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00480302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Total​Pixel​Matrix​Focal​Planes(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00480303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Calibration​Image(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00500004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00500010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Container​Component​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00500012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Container​Component​Thickness(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00500013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Device​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00500014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Container​Component​Width(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00500015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Device​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00500016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Device​Diameter​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00500017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Device​Volume(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00500018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Inter​Marker​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00500019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Container​Component​Material(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0050001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Container​Component​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0050001B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Container​Component​Length(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0050001C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Container​Component​Diameter(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0050001D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Container​Component​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0050001E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Device​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00500020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Long​Device​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00500021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Contrast​Bolus​Ingredient​Percent​By​Volume(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00520001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble OCT​Focal​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Beam​Spot​Size(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Effective​Refractive​Index(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString OCT​Acquisition​Domain(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00520006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble OCT​Optical​Center​Wavelength(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Axial​Resolution(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Ranging​Depth(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble A​Line​Rate(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort A​Lines​Per​Frame(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00520012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Catheter​Rotational​Rate(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble A​Line​Pixel​Spacing(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mode​Of​Percutaneous​Access​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00520016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intravascular​OCT​Frame​Type​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00520025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString OCTZ​Offset​Applied(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00520026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intravascular​Frame​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00520027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Intravascular​Longitudinal​Distance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intravascular​OCT​Frame​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00520029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort OCTZ​Offset​Correction(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("00520030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Catheter​Direction​Of​Rotation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00520031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Seam​Line​Location(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble First​A​Line​Location(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00520034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Seam​Line​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00520036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Padded​ALines(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00520038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Interpolation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00520039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Refractive​Index​Applied(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0052003A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Energy​Window​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Energy​Windows(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Energy​Window​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Energy​Window​Range​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Energy​Window​Lower​Limit(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00540014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Energy​Window​Upper​Limit(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00540015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Radio​pharmaceutical​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Residual​Syringe​Counts(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00540017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Energy​Window​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00540018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Detector​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Detectors(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Detector​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Phase​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Phases(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Phase​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Frames​In​Phase(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Phase​Delay(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00540036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Pause​Between​Frames(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00540038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Phase​Description(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00540039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Rotation​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Rotations(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Rotation​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Frames​In​Rotation(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort RR​Interval​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​RR​Intervals(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Gated​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Data​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Time​Slot​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Time​Slots(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Time​Slot​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Time​Slot​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00540073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Slice​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Slices(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Angular​View​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Time​Slice​Vector(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Time​Slices(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Start​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00540200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Type​Of​Detector​Motion(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00540202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Trigger​Vector(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00540210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Triggers​In​Phase(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540211"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence View​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence View​Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Radionuclide​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Administration​Route​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Radio​pharmaceutical​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Calibration​Data​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Energy​Window​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00540308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Image​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00540400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Orientation​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Orientation​Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540412"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Gantry​Relationship​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00540414"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Slice​Progression​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00540500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scan​Progression​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00540501"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Series​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Counts​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reprojection​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString SUV​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Randoms​Correction​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Attenuation​Correction​Method(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00541101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decay​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reconstruction​Method(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00541103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Detector​Lines​Of​Response​Used(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00541104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Scatter​Correction​Method(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00541105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Axial​Acceptance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Axial​Mash(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00541201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Transverse​Mash(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00541202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Detector​Element​Size(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Coincidence​Window​Width(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Secondary​Counts​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Reference​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Primary​Prompts​Counts​Accumulated(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00541310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Secondary​Counts​Accumulated(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00541311"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Slice​Sensitivity​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Decay​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541321"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dose​Calibration​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541322"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Scatter​Fraction​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541323"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dead​Time​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00541324"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00541330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Counts​Included(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dead​Time​Correction​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00541401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Histogram​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00603000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Histogram​Number​Of​Bins(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00603002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Histogram​First​Bin​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00603004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Histogram​Last​Bin​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00603006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Histogram​Bin​Width(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00603008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Histogram​Explanation(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00603010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Histogram​Data(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00603020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Segmentation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00620001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00620002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segmented​Property​Category​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00620003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Segment​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00620004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Segment​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00620005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Segment​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00620006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segmentation​Algorithm​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00620007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Segment​Algorithm​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00620008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Segment​Algorithm​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00620009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0062000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Segment​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0062000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Recommended​Display​Grayscale​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0062000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Recommended​Display​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0062000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Maximum​Fractional​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0062000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segmented​Property​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0062000F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Segmentation​Fractional​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00620010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segmented​Property​Type​Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00620011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Used​Segments​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00620012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Segments​Overlap(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00620013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Tracking​ID(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00620020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Tracking​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00620021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Deformable​Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00640002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Source​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00640003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Deformable​Registration​Grid​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00640005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Grid​Dimensions(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00640007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Grid​Resolution(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00640008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Vector​Grid​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00640009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pre​Deformation​Matrix​Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0064000F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Post​Deformation​Matrix​Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00640010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Surfaces(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00660001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Surface​Number(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00660003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Surface​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00660004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Surface​Processing(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00660009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Surface​Processing​Ratio(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0066000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Surface​Processing​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0066000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Recommended​Presentation​Opacity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0066000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Recommended​Presentation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0066000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Finite​Volume(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0066000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Manifold(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00660010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Points​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Points​Normals​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Mesh​Primitives​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Surface​Points(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00660015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Point​Coordinates​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00660016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Point​Position​Accuracy(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00660017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Mean​Point​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00660018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Maximum​Point​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00660019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Points​Bounding​Box​Coordinates(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0066001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Axis​Of​Rotation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0066001B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Center​Of​Rotation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("0066001C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Vectors(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0066001E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Vector​Dimensionality(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0066001F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Vector​Accuracy(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00660020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Vector​Coordinate​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00660021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Triangle​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00660023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Edge​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00660024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Vertex​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00660025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Triangle​Strip​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Triangle​Fan​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Line​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Primitive​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00660029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Surface​Count(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0066002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Surface​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0066002B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Referenced​Surface​Number(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0066002C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Surface​Generation​Algorithm​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0066002D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Surface​Source​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0066002E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Algorithm​Family​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0066002F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Algorithm​Name​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Algorithm​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00660031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Algorithm​Parameters(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00660032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Facet​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Processing​Algorithm​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Algorithm​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00660036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Recommended​Point​Radius(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00660037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Recommended​Line​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00660038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherLongString Long​Primitive​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherLongString());
            element.Tag = (new Tag("00660040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherLongString Long​Triangle​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherLongString());
            element.Tag = (new Tag("00660041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherLongString Long​Edge​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherLongString());
            element.Tag = (new Tag("00660042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherLongString Long​Vertex​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherLongString());
            element.Tag = (new Tag("00660043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Track​Set​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Track​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Recommended​Display​CIELab​Value​List(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00660103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Tracking​Algorithm​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Track​Set​Number(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00660105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Track​Set​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00660106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Track​Set​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00660107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Track​Set​Anatomical​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Track​Set​Statistics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Floating​Point​Values(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00660125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherLongString Track​Point​Index​List(params Byte[] data)
        {
            var element = (new OtherLongString());
            element.Tag = (new Tag("00660129"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Track​Statistics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measurement​Values​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Diffusion​Acquisition​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660133"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Diffusion​Model​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00660134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Size(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00686210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Template​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00686221"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Replaced​Implant​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Implant​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00686223"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Derivation​Implant​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Original​Implant​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686225"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Effective​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00686226"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Target​Anatomy​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Information​From​Manufacturer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686260"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Notification​From​Manufacturer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686265"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Information​Issue​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00686270"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Information​Summary(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00686280"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Regulatory​Disapproval​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006862A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Overall​Template​Spatial​Tolerance(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006862A5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence HPGL​Document​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006862C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort HPGL​Document​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("006862D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString HPGL​Document​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("006862D5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence View​Orientation​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006862E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence View​Orientation​Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006862F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble HPGL​Document​Scaling(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006862F2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString HPGL​Document(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00686300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort HPGL​Contour​Pen​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00686310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence HPGL​Pen​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort HPGL​Pen​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00686330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString HPGL​Pen​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00686340"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText HPGL​Pen​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00686345"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Recommended​Rotation​Point(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686346"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Bounding​Rectangle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686347"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Implant​Template3D​Model​Surface​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00686350"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Model​Description​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686360"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Surface​Model​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00686380"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Surface​Model​Scaling​Factor(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686390"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Materials​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006863A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Coating​Materials​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006863A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006863A8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fixation​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006863AC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mating​Feature​Sets​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006863B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Mating​Feature​Set​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("006863C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Mating​Feature​Set​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("006863D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mating​Feature​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006863E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Mating​Feature​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("006863F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Mating​Feature​Degree​Of​Freedom​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Degree​Of​Freedom​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00686410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Degree​Of​Freedom​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00686420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Two​D​Mating​Feature​Coordinates​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686430"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​HPGL​Document​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00686440"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Mating​Point(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686450"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Mating​Axes(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686460"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Two​D​Degree​Of​Freedom​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686470"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Degree​Of​Freedom​Axis(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686490"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Range​Of​Freedom(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006864A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Mating​Point(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006864C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Mating​Axes(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006864D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Degree​Of​Freedom​Axis(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006864F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Planning​Landmark​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Planning​Landmark​Line​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Planning​Landmark​Plane​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Planning​Landmark​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00686530"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Planning​Landmark​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00686540"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Planning​Landmark​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686545"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Two​D​Point​Coordinates​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00686550"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Point​Coordinates(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686560"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Point​Coordinates(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686590"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Two​D​Line​Coordinates​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006865A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Line​Coordinates(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006865B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Line​Coordinates(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006865D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Two​D​Plane​Coordinates​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("006865E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Plane​Intersection(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("006865F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Plane​Origin(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686610"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Plane​Normal(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00686620"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Model​Modification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00687001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Model​Mirroring(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00687002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Model​Usage​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00687003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Graphic​Annotation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Graphic​Layer(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Bounding​Box​Annotation​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Anchor​Point​Annotation​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Graphic​Annotation​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Unformatted​Text​Value(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00700006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Text​Object​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Graphic​Object​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bounding​Box​Top​Left​Hand​Corner(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bounding​Box​Bottom​Right​Hand​Corner(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Bounding​Box​Text​Horizontal​Justification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Anchor​Point(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Anchor​Point​Visibility(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Graphic​Dimensions(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Graphic​Points(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Graphic​Data(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Graphic​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Graphic​Filled(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Image​Rotation​Retired(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00700040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Horizontal​Flip(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Rotation(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Displayed​Area​Top​Left​Hand​Corner​Trial(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Displayed​Area​Bottom​Right​Hand​Corner​Trial(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Displayed​Area​Top​Left​Hand​Corner(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00700052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Displayed​Area​Bottom​Right​Hand​Corner(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("00700053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Displayed​Area​Selection​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070005A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Graphic​Layer​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Graphic​Layer​Order(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00700062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Graphic​Layer​Recommended​Display​Grayscale​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Graphic​Layer​Recommended​Display​RGB​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Graphic​Layer​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00700068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Content​Label(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Content​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00700081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Presentation​Creation​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00700082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Presentation​Creation​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("00700083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Content​Creator​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("00700084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Content​Creator​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Alternate​Content​Description​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presentation​Size​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Presentation​Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00700101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Presentation​Pixel​Aspect​Ratio(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00700102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Presentation​Pixel​Magnification​Ratio(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Graphic​Group​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00700207"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Graphic​Group​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00700208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Compound​Graphic​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700209"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Compound​Graphic​Instance​ID(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00700226"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Font​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00700227"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Font​Name​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700228"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString CSS​Font​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00700229"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Rotation​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00700230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Text​Style​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700231"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Line​Style​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700232"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fill​Style​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700233"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Graphic​Group​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700234"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Text​Color​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700241"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Horizontal​Alignment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Vertical​Alignment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700243"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Shadow​Style(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Shadow​Offset​X(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700245"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Shadow​Offset​Y(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700246"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Shadow​Color​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700247"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Underlined(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700248"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Bold(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700249"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Italic(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pattern​On​Color​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pattern​Off​Color​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700252"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Line​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700253"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Line​Dashing​Style(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700254"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Line​Pattern(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00700255"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Fill​Pattern(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00700256"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fill​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700257"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Shadow​Opacity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700258"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Gap​Length(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700261"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Diameter​Of​Visibility(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700262"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Rotation​Point(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700273"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Tick​Alignment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700274"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Show​Tick​Label(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700278"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Tick​Label​Alignment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700279"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compound​Graphic​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700282"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Pattern​On​Opacity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700284"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Pattern​Off​Opacity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700285"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Major​Ticks​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700287"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Tick​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700288"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Tick​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00700289"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compound​Graphic​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700294"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Graphic​Group​ID(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00700295"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Shape​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Matrix​Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Matrix​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070030A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Frame​Of​Reference​To​Displayed​Coordinate​System​Transformation​Matrix(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0070030B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Frame​Of​Reference​Transformation​Matrix​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0070030C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Registration​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070030D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Fiducial​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0070030F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Fiducial​Identifier(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00700310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fiducial​Identifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700311"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Contour​Uncertainty​Radius(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00700312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Used​Fiducials​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700314"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Graphic​Coordinates​Data​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700318"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Fiducial​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0070031A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Fiducial​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0070031B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fiducial​Set​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070031C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fiducial​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070031E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fiducials​Property​Category​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070031F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Graphic​Layer​Recommended​Display​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00700401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Blending​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Relative​Opacity(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00700403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Spatial​Registration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00700404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blending​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00700405"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Presentation​Display​Collection​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00701101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Presentation​Sequence​Collection​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00701102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Presentation​Sequence​Position​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Rendered​Image​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volumetric​Presentation​State​Input​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presentation​Input​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Input​Sequence​Position​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Crop(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Cropping​Specification​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701205"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compositing​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701206"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Volumetric​Presentation​Input​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701207"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Volume​Geometry(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Volumetric​Presentation​Input​Set​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00701209"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volumetric​Presentation​Input​Set​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0070120A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Global​Crop(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0070120B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Global​Cropping​Specification​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0070120C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Rendering​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0070120D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volume​Cropping​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Volume​Cropping​Method(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Bounding​Box​Crop(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Oblique​Cropping​Plane​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Plane(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701305"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Plane​Normal(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Cropping​Specification​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Multi​Planar​Reconstruction​Style(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701501"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString MPRThickness​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701502"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble MPRSlab​Thickness(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701503"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble MPRTop​Left​Hand​Corner(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701505"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble MPRView​Width​Direction(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701507"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble MPRView​Width(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701508"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Volumetric​Curve​Points(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("0070150C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherDoubleString Volumetric​Curve​Points(params Byte[] data)
        {
            var element = (new OtherDoubleString());
            element.Tag = (new Tag("0070150D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble MPRView​Height​Direction(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701511"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble MPRView​Height(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701512"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Render​Projection(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701602"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Viewpoint​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701603"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Viewpoint​LookAt​Point(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701604"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Viewpoint​Up​Direction(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701605"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Render​Field​Of​View(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701606"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Sampling​Step​Size(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701607"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Shading​Style(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701701"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Ambient​Reflection​Intensity(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701702"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Light​Direction(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701703"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Diffuse​Reflection​Intensity(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701704"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Specular​Reflection​Intensity(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701705"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Shininess(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701706"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Presentation​State​Classification​Component​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701801"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Component​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701802"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Component​Input​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701803"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Volumetric​Presentation​Input​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701804"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Presentation​State​Compositor​Component​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701805"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Weighting​Transfer​Function​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701806"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Weighting​Lookup​Table​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701807"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Weighting​Lookup​Table​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00701808"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volumetric​Annotation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701901"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Structured​Context​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701903"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Content​Item(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00701904"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volumetric​Presentation​Input​Annotation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701905"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Annotation​Clipping(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701907"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presentation​Animation​Style(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701A01"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Recommended​Animation​Rate(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701A03"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Animation​Curve​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701A04"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Animation​Step​Size(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701A05"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Swivel​Range(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701A06"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherDoubleString Volumetric​Curve​Up​Directions(params Byte[] data)
        {
            var element = (new OtherDoubleString());
            element.Tag = (new Tag("00701A07"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Volume​Stream​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701A08"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString RGBA​Transfer​Function​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00701A09"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Advanced​Blending​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701B01"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Blending​Input​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00701B02"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Blending​Display​Input​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701B03"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Blending​Display​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701B04"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blending​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701B06"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Time​Series​Blending(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701B07"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Geometry​For​Display(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701B08"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Threshold​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701B11"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Threshold​Value​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00701B12"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Threshold​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00701B13"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Threshold​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00701B14"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Hanging​Protocol​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00720002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hanging​Protocol​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Hanging​Protocol​Level(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hanging​Protocol​Creator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Hanging​Protocol​Creation​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("0072000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Hanging​Protocol​Definition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0072000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Hanging​Protocol​User​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0072000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Hanging​Protocol​User​Group​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Hanging​Protocol​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Priors​Referenced(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Sets​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Set​Selector​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Set​Selector​Usage​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Selector​Attribute(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00720026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Selector​Value​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Time​Based​Image​Sets​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Set​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Set​Selector​Category(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Relative​Time(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Relative​Time​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0072003A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Abstract​Prior​Value(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("0072003C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Abstract​Prior​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0072003E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Image​Set​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Selector​Attribute​VR(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Selector​Sequence​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00720052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Selector​Sequence​Pointer​Private​Creator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Selector​Attribute​Private​Creator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Selector​AEValue(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("0072005E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AgeString Selector​ASValue(params String[] data)
        {
            var element = (new AgeString());
            element.Tag = (new Tag("0072005F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Selector​AT​Value(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00720060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Selector​DAValue(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("00720061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Selector​CS​Value(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Selector​DTValue(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("00720063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Selector​IS​Value(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00720064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Selector​OBValue(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("00720065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Selector​LO​Value(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Selector​OFValue(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00720067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Selector​LT​Value(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00720068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Selector​OWValue(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("00720069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Selector​PN​Value(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("0072006A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Selector​TMValue(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("0072006B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Selector​SH​Value(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("0072006C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Unknown Selector​UNValue(params Byte[] data)
        {
            var element = (new Unknown());
            element.Tag = (new Tag("0072006D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Selector​ST​Value(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("0072006E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Selector​UCValue(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("0072006F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Selector​UT​Value(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00720070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Selector​URValue(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("00720071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Selector​DS​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00720072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherDoubleString Selector​ODValue(params Byte[] data)
        {
            var element = (new OtherDoubleString());
            element.Tag = (new Tag("00720073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Selector​FD​Value(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00720074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherLongString Selector​OLValue(params Byte[] data)
        {
            var element = (new OtherLongString());
            element.Tag = (new Tag("00720075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Selector​FL​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("00720076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Selector​UL​Value(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00720078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Selector​US​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0072007A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedLong Selector​SL​Value(params Int32[] data)
        {
            var element = (new SignedLong());
            element.Tag = (new Tag("0072007C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Selector​SS​Value(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("0072007E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Selector​UI​Value(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("0072007F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Selector​Code​Sequence​Value(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Screens(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Nominal​Screen​Definition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Vertical​Pixels(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Horizontal​Pixels(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Display​Environment​Spatial​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00720108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Screen​Minimum​Grayscale​Bit​Depth(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0072010A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Screen​Minimum​Color​Bit​Depth(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0072010C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Application​Maximum​Repaint​Time(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0072010E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Display​Sets​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Display​Set​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Display​Set​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Display​Set​Presentation​Group(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Display​Set​Presentation​Group​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00720206"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Partial​Data​Display​Handling(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720208"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Synchronized​Scrolling​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Display​Set​Scrolling​Group(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Navigation​Indicator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Navigation​Display​Set(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720216"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Reference​Display​Sets(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Boxes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Box​Layout​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Tile​Horizontal​Dimension(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Tile​Vertical​Dimension(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Box​Scroll​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Box​Small​Scroll​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Small​Scroll​Amount(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720314"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Box​Large​Scroll​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720316"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Large​Scroll​Amount(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720318"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Overlap​Priority(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Cine​Relative​To​Real​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00720330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Filter​Operations​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720400"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Filter​By​Category(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Filter​By​Attribute​Presence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Filter​By​Operator(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720406"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Structured​Display​Background​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Empty​Image​Box​CIE​Lab​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720421"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Structured​Display​Image​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720422"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Structured​Display​Text​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720424"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​First​Frame​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720427"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Box​Synchronization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720430"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Synchronized​Image​Box​List(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00720432"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Type​Of​Synchronization(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720434"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Blending​Operation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reformatting​Operation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reformatting​Thickness(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00720512"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Reformatting​Interval(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00720514"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reformatting​Operation​Initial​View​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720516"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Three​D​Rendering​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Sorting​Operations​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Sort​By​Category(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720602"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Sorting​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720604"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Display​Set​Patient​Orientation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720700"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString VOI​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720702"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Pseudo​Color​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720704"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pseudo​Color​Palette​Instance​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00720705"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Show​Grayscale​Inverted(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720706"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Show​Image​True​Size​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720710"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Show​Graphic​Annotation​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720712"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Show​Patient​Demographics​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720714"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Show​Acquisition​Techniques​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720716"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Display​Set​Horizontal​Justification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720717"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Display​Set​Vertical​Justification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00720718"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Continuation​Start​Meterset(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00740120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Continuation​End​Meterset(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00740121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Procedure​Step​State(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Step​Progress​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Procedure​Step​Progress(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00741004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Procedure​Step​Progress​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00741006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Step​Progress​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Step​Communications​URI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniversalResourceId Contact​URI(params String[] data)
        {
            var element = (new UniversalResourceId());
            element.Tag = (new Tag("0074100A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Contact​Display​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0074100C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Step​Discontinuation​Reason​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0074100E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Task​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beam​Task​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Beam​Order​Index​Trial(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00741024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Autosequence​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Top​Vertical​Adjusted​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00741026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Top​Longitudinal​Adjusted​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00741027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Top​Lateral​Adjusted​Position(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00741028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Patient​Support​Adjusted​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0074102A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Top​Eccentric​Adjusted​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0074102B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Top​Pitch​Adjusted​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0074102C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Table​Top​Roll​Adjusted​Angle(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0074102D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Delivery​Verification​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Verification​Image​Timing(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Double​Exposure​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Double​Exposure​Ordering(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Double​Exposure​Meterset​Trial(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00741038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Double​Exposure​Field​Delta​Trial(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("0074103A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Related​Reference​RT​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence General​Machine​Verification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conventional​Machine​Verification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Machine​Verification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Failed​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Overridden​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0074104A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conventional​Control​Point​Verification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0074104C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Control​Point​Verification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0074104E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Attribute​Occurrence​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Attribute​Occurrence​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00741052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Attribute​Item​Selector(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00741054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Attribute​Occurrence​Private​Creator(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00741056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Selector​Sequence​Pointer​Items(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00741057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scheduled​Procedure​Step​Priority(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Worklist​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00741202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Procedure​Step​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00741204"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Scheduled​Processing​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Performed​Processing​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Unified​Procedure​Step​Performed​Procedure​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741216"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Related​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Procedure​Step​Relationship​Type(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00741222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Replaced​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Deletion​Lock(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00741230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Receiving​AE(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00741234"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Requesting​AE(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00741236"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Reason​For​Cancellation(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("00741238"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString SCP​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Subscription​List​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Unified​Procedure​Step​List​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00741246"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Beam​Order​Index(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00741324"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Double​Exposure​Meterset(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00741338"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Double​Exposure​Field​Delta(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("0074133A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Brachy​Task​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Continuation​Start​Total​Reference​Air​Kerma(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00741402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Continuation​End​Total​Reference​Air​Kerma(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00741403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Continuation​Pulse​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00741404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Delivery​Order​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741405"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Channel​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("00741406"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Start​Cumulative​Time​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00741407"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString End​Cumulative​Time​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("00741408"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Omitted​Channel​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00741409"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reason​For​Channel​Omission(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0074140A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reason​For​Channel​Omission​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("0074140B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Channel​Delivery​Order​Index(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("0074140C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Delivery​Continuation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0074140D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Omitted​Application​Setup​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0074140E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Assembly​Template​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00760001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Assembly​Template​Issuer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00760003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Assembly​Template​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00760006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Replaced​Implant​Assembly​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Implant​Assembly​Template​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("0076000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Original​Implant​Assembly​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0076000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Derivation​Implant​Assembly​Template​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0076000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Assembly​Template​Target​Anatomy​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Procedure​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Surgical​Technique(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00760030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Component​Types​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Component​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Exclusive​Component​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00760036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Mandatory​Component​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00760038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Component​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00760055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Component​Assembly​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00760060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component1Referenced​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00760070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component1Referenced​Mating​Feature​Set​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00760080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component1Referenced​Mating​Feature​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00760090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component2Referenced​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("007600A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component2Referenced​Mating​Feature​Set​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("007600B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Component2Referenced​Mating​Feature​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("007600C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Template​Group​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00780001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Implant​Template​Group​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00780010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Template​Group​Issuer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00780020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Template​Group​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00780024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Replaced​Implant​Template​Group​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00780026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Template​Group​Target​Anatomy​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00780028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Template​Group​Members​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0078002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Implant​Template​Group​Member​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("0078002E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Implant​Template​Group​Member​Matching​Point(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00780050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Three​D​Implant​Template​Group​Member​Matching​Axes(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00780060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Template​Group​Member​Matching2D​Coordinates​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00780070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Implant​Template​Group​Member​Matching​Point(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00780090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Two​D​Implant​Template​Group​Member​Matching​Axes(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("007800A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Template​Group​Variation​Dimension​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("007800B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Implant​Template​Group​Variation​Dimension​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("007800B2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Implant​Template​Group​Variation​Dimension​Rank​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("007800B4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Implant​Template​Group​Member​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("007800B6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Implant​Template​Group​Variation​Dimension​Rank(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("007800B8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Scan​Acquisition​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00800001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Surface​Scan​Mode​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00800002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Registration​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00800003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Shot​Duration​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00800004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Shot​Offset​Time(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("00800005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Surface​Point​Presentation​Value​Data(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00800006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Surface​Point​Color​CIE​Lab​Value​Data(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00800007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence UV​Mapping​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00800008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Texture​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00800009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString U​Value​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00800010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString V​Value​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("00800011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Texture​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00800012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Surface​Data​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00800013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Assessment​Summary(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00820001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Assessment​Summary​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00820003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assessed​SOPInstance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Comparison​SOPInstance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Assessment​Observations(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00820006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assessment​Observations​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Observation​Significance(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00820008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Observation​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("0082000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Structured​Constraint​Observation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("0082000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assessed​Attribute​Value​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Assessment​Set​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00820016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assessment​Requester​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Selector​Attribute​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00820018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Selector​Attribute​Keyword(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00820019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Assessment​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Observation​Basis​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Assessment​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00820023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Constraint​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00820032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Specification​Selection​Guidance(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00820033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Constraint​Value​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recommended​Default​Value​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00820035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Constraint​Violation​Significance(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00820036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Constraint​Violation​Condition(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("00820037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modifiable​Constraint​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("00820038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Storage​Media​File​Set​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("00880130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Storage​Media​File​Set​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00880140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Icon​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("00880200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Topic​Title(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00880904"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Topic​Subject(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("00880906"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Topic​Author(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00880910"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Topic​Keywords(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00880912"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString SOP​Instance​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("01000410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime SOP​Authorization​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("01000420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText SOP​Authorization​Comment(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("01000424"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Authorization​Equipment​Certification​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("01000426"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MACID​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("04000005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier MAC​Calculation​Transfer​Syntax​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("04000010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString MAC​Algorithm(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("04000015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Data​Elements​Signed(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("04000020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Digital​Signature​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("04000100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Digital​Signature​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("04000105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Certificate​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("04000110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Certificate​Of​Signer(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("04000115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Signature(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("04000120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Certified​Timestamp​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("04000305"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Certified​Timestamp(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("04000310"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Digital​Signature​Purpose​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("04000401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Digital​Signature​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("04000402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​SOP​Instance​MAC​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("04000403"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString MAC(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("04000404"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Encrypted​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("04000500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Encrypted​Content​Transfer​Syntax​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("04000510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Encrypted​Content(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("04000520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Modified​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("04000550"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Original​Attributes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("04000561"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Attribute​Modification​Date​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("04000562"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Modifying​System(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("04000563"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Of​Previous​Values(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("04000564"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reason​For​The​Attribute​Modification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("04000565"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Instance​Origin​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("04000600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Escape​Triplet(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1000xxx0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Run​Length​Triplet(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1000xxx1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Huffman​Table​Size(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1000xxx2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Huffman​Table​Triplet(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1000xxx3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Shift​Table​Size(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1000xxx4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Shift​Table​Triplet(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1000xxx5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Zonal​Map(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("1010xxxx"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Copies(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("20000010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Printer​Configuration​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("2000001E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Print​Priority(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Medium​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Film​Destination(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Film​Session​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("20000050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Memory​Allocation(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("20000060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Maximum​Memory​Allocation(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("20000061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Color​Image​Printing​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Collation​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Annotation​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Overlay​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presentation​LUT​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20000069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Image​Box​Presentation​LUT​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("2000006A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Memory​Bit​Depth(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("200000A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Printing​Bit​Depth(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("200000A1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Media​Installed​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("200000A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Other​Media​Available​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("200000A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Supported​Image​Display​Formats​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("200000A8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Film​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20000500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Stored​Print​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20000510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Image​Display​Format(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("20100010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Annotation​Display​Format​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Film​Orientation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Film​Size​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Printer​Resolution​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Default​Printer​Resolution​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Magnification​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Smoothing​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Default​Magnification​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("201000A6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Other​Magnification​Types​Available(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("201000A7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Default​Smoothing​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("201000A8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Other​Smoothing​Types​Available(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("201000A9"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Border​Density(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Empty​Image​Density(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Min​Density(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20100120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Max​Density(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20100130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Trim(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20100140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Configuration​Information(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("20100150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Configuration​Information​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("20100152"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Maximum​Collated​Films(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("20100154"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Illumination(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("2010015E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Reflected​Ambient​Light(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20100160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Printer​Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("20100376"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Film​Session​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20100500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20100510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Basic​Annotation​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20100520"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Box​Position(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20200010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Polarity(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20200020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Requested​Image​Size(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("20200030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Requested​Decimate​Crop​Behavior(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20200040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Requested​Resolution​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20200050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Requested​Image​Size​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("202000A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Decimate​Crop​Result(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("202000A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Basic​Grayscale​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20200110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Basic​Color​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20200111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Overlay​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20200130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​VOILUT​Box​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20200140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Annotation​Position(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20300010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Text​String(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("20300020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Overlay​Plane​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20400010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Overlay​Plane​Groups(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20400011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Overlay​Pixel​Data​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20400020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Magnification​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Smoothing​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Or​Image​Magnification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Magnify​To​Number​Of​Columns(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("20400074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Foreground​Density(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Background​Density(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Threshold​Density(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20400100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Image​Box​Sequence​Retired(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20400500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Presentation​LUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20500010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Presentation​LUT​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("20500020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Presentation​LUT​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("20500500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Print​Job​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("21000010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Execution​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("21000020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Execution​Status​Info(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("21000030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Creation​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("21000040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Creation​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("21000050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Originator(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("21000070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity Destination​AE(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("21000140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Owner​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("21000160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Films(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("21000170"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Print​Job​Sequence​Pull​Stored​Print(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21000500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Printer​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("21100010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Printer​Status​Info(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("21100020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Printer​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("21100030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Print​Queue​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("21100099"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Queue​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("21200010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Print​Job​Description​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21200050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Print​Job​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21200070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Print​Management​Capabilities​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Printer​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Film​Box​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Box​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Annotation​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Image​Overlay​Box​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Presentation​LUT​Content​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("21300080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Proposed​Study​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("213000A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Original​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("213000C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Label​Using​Information​Extracted​From​Instances(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Label​Text(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("22000002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Label​Style​Selection(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Media​Disposition(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("22000004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Barcode​Value(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("22000005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Barcode​Symbology(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Allow​Media​Splitting(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Include​Non​DICOM​Objects(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Include​Display​Application(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Preserve​Composite​Instances​After​Media​Creation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("2200000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Total​Number​Of​Pieces​Of​Media​Created(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("2200000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Requested​Media​Application​Profile(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("2200000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Storage​Media​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("2200000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Failure​Attributes(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("2200000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Allow​Lossy​Compression(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("2200000F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Request​Priority(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("22000020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString RT​Image​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30020002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString RT​Image​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30020003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText RT​Image​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30020004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reported​Values​Origin(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3002000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RT​Image​Plane(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3002000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString X​Ray​Image​Receptor​Translation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3002000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString X​Ray​Image​Receptor​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3002000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString RT​Image​Orientation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Plane​Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString RT​Image​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Radiation​Machine​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30020020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radiation​Machine​SAD(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Radiation​Machine​SSD(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString RT​Image​SID(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Reference​Object​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Fraction​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30020029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Exposure​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30020030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Meterset​Exposure(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Diaphragm​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fluence​Map​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30020040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fluence​Data​Source(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30020041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Fluence​Data​Scale(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30020042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Primary​Fluence​Mode​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30020050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fluence​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30020051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Fluence​Mode​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30020052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString DVH​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dose​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dose​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Spatial​Transform​Of​Dose(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Dose​Comment(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30040006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Normalization​Point(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dose​Summation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3004000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Grid​Frame​Offset​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3004000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dose​Grid​Scaling(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3004000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RT​Dose​ROI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30040010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dose​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Tissue​Heterogeneity​Correction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Normalization​Point(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Normalization​Dose​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence DVH​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30040050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Dose​Scaling(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString DVH​Volume​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString DVH​Number​Of​Bins(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30040056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Data(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence DVH​Referenced​ROI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30040060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString DVHROI​Contribution​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30040062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Minimum​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Maximum​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString DVH​Mean​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30040074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Structure​Set​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30060002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Structure​Set​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30060004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Structure​Set​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30060006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Structure​Set​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30060008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Structure​Set​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("30060009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Frame​Of​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RT​Referenced​Study​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RT​Referenced​Series​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contour​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Predecessor​Structure​Set​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Structure​Set​ROI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString ROI​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30060022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30060024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString ROI​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30060026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText ROI​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30060028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString ROI​Display​Color(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("3006002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString ROI​Volume(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3006002C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RT​Related​ROI​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RTROI​Relationship(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30060033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ROI​Generation​Algorithm(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30060036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ROI​Derivation​Algorithm​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString ROI​Generation​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30060038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ROI​Contour​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Contour​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Contour​Geometric​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30060042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contour​Slab​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30060044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contour​Offset​Vector(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30060045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Contour​Points(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30060046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Contour​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30060048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Attached​Contours(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30060049"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Contour​Data(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30060050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTROI​Observations​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Observation​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30060082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​ROI​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30060084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString ROI​Observation​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30060085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTROI​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30060086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText ROI​Observation​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30060088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Related​RTROI​Observations​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300600A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RTROI​Interpreted​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300600A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName ROI​Interpreter(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("300600A6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ROI​Physical​Properties​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300600B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ROI​Physical​Property(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300600B2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString ROI​Physical​Property​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300600B4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ROI​Elemental​Composition​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300600B6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort ROI​Elemental​Composition​Atomic​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("300600B7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle ROI​Elemental​Composition​Atomic​Mass​Fraction(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300600B8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Additional​RT​ROI​Identification​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300600B9"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Frame​Of​Reference​Relationship​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300600C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Related​Frame​Of​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("300600C2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Frame​Of​Reference​Transformation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300600C4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Frame​Of​Reference​Transformation​Matrix(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300600C6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Frame​Of​Reference​Transformation​Comment(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300600C8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Measured​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Measured​Dose​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30080012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Measured​Dose​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30080014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Measured​Dose​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Session​Beam​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Session​Ion​Beam​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Current​Fraction​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Treatment​Control​Point​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30080024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Treatment​Control​Point​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("30080025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Treatment​Termination​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3008002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Treatment​Termination​Code(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("3008002B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Treatment​Verification​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3008002C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Treatment​Record​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Specified​Primary​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Specified​Secondary​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivered​Primary​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivered​Secondary​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Specified​Treatment​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3008003A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivered​Treatment​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3008003B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Control​Point​Delivery​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Control​Point​Delivery​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Specified​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivered​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Meterset​Rate​Set(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("30080045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Meterset​Rate​Delivered(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("30080046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Scan​Spot​Metersets​Delivered(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("30080047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dose​Rate​Delivered(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Summary​Calculated​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Cumulative​Dose​To​Dose​Reference(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date First​Treatment​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30080054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Most​Recent​Treatment​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30080056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Fractions​Delivered(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("3008005A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Override​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Parameter​Sequence​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("30080061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Override​Parameter​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("30080062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Parameter​Item​Index(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Measured​Dose​Reference​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Parameter​Pointer(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("30080065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Override​Reason(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30080066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Parameter​Value​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30080067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Corrected​Parameter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Correction​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("3008006A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Calculated​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Calculated​Dose​Reference​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Calculated​Dose​Reference​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30080074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Calculated​Dose​Reference​Dose​Value(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Start​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString End​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3008007A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Measured​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Measured​Dose​Reference​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Calculated​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Calculated​Dose​Reference​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Limiting​Device​Leaf​Pairs​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Wedge​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Compensator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Block​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Summary​Measured​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Snout​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Range​Shifter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800F2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Lateral​Spreading​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800F4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Range​Modulator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300800F6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Source​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Serial​Number(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30080105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Session​Application​Setup​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Application​Setup​Check(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30080116"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Brachy​Accessory​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Brachy​Accessory​Device​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Channel​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Specified​Channel​Total​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivered​Channel​Total​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("30080134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Specified​Number​Of​Pulses(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080136"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Delivered​Number​Of​Pulses(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080138"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Specified​Pulse​Repetition​Interval(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3008013A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivered​Pulse​Repetition​Interval(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("3008013C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Source​Applicator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Source​Applicator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080142"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Recorded​Channel​Shield​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Channel​Shield​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080152"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Brachy​Control​Point​Delivered​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080160"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Safe​Position​Exit​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30080162"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Safe​Position​Exit​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("30080164"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Safe​Position​Return​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30080166"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Safe​Position​Return​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("30080168"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Pulse​Specific​Brachy​Control​Point​Delivered​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080171"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Pulse​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30080172"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Brachy​Pulse​Control​Point​Delivered​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080173"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Current​Treatment​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30080200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Treatment​Status​Comment(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30080202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fraction​Group​Summary​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080220"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Fraction​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("30080223"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fraction​Group​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30080224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beam​Stopper​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30080230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fraction​Status​Summary​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30080240"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Treatment​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("30080250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Treatment​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("30080251"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString RT​Plan​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString RT​Plan​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText RT​Plan​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A0004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date RT​Plan​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("300A0006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time RT​Plan​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("300A0007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Treatment​Protocols(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Plan​Intent(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Treatment​Sites(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RT​Plan​Geometry(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Prescription​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Dose​Reference​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Dose​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("300A0013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dose​Reference​Structure​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Nominal​Beam​Energy​Unit(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Dose​Reference​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dose​Reference​Point​Coordinates(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Prior​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dose​Reference​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Constraint​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivery​Warning​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Delivery​Maximum​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Target​Minimum​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Target​Prescription​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Target​Maximum​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Target​Underdose​Volume​Fraction(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Organ​At​Risk​Full​Volume​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Organ​At​Risk​Limit​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A002B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Organ​At​Risk​Maximum​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A002C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Organ​At​Risk​Overdose​Volume​Fraction(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A002D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Tolerance​Table​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Tolerance​Table​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Tolerance​Table​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Gantry​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Limiting​Device​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Limiting​Device​Tolerance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Limiting​Device​Position​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A004A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Snout​Position​Tolerance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A004B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Patient​Support​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A004C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Eccentric​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A004E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Top​Pitch​Angle​Tolerance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A004F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Top​Roll​Angle​Tolerance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Vertical​Position​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Longitudinal​Position​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Lateral​Position​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RT​Plan​Relationship(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fraction​Group​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Fraction​Group​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Fraction​Group​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Fractions​Planned(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Fraction​Pattern​Digits​Per​Day(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0079"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Repeat​Fraction​Cycle​Length(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A007A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Fraction​Pattern(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("300A007B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Beams(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Dose​Specification​Point(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Dose​Reference​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("300A0083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Meterset(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Beam​Dose​Point​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Beam​Dose​Point​Equivalent​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0089"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Beam​Dose​Point​SSD(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A008A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beam​Dose​Meaning(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A008B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Dose​Verification​Control​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A008C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Average​Beam​Dose​Point​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A008D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Average​Beam​Dose​Point​Equivalent​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A008E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Average​Beam​Dose​Point​SSD(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A008F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beam​Dose​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0090"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Alternate​Beam​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0091"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Alternate​Beam​Dose​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0092"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Depth​Value​Averaging​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0093"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Dose​Point​Source​To​External​Contour​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0094"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Brachy​Application​Setups(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Brachy​Application​Setup​Dose​Specification​Point(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Brachy​Application​Setup​Dose(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A00B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Treatment​Machine​Name(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00B2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Primary​Dosimeter​Unit(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00B3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Axis​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00B4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Limiting​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A00B6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RT​Beam​Limiting​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00B8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Beam​Limiting​Device​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00BA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Beam​Limiting​Device​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A00BB"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Leaf​Jaw​Pairs(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00BC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Leaf​Position​Boundaries(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00BE"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Beam​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Beam​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A00C2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Beam​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A00C3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beam​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00C4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Beam​Delivery​Duration​Limit(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("300A00C5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Radiation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00C6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString High​Dose​Technique​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00C7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Reference​Image​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00C8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Planned​Verification​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A00CA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Imaging​Device​Specific​Acquisition​Parameters(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A00CC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Treatment​Delivery​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00CE"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Wedges(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Wedge​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A00D1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Wedge​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00D2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Wedge​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00D3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Wedge​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00D4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Wedge​Angle(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00D5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00D6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Total​Wedge​Tray​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A00D7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Wedge​Orientation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00D8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Wedge​Tray​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A00D9"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Wedge​Tray​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00DA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Wedge​Thin​Edge​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A00DB"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Bolus​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00DC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Bolus​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A00DD"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Effective​Wedge​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00DE"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Compensators(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Material​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00E1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Total​Compensator​Tray​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00E2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Compensator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A00E3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Compensator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00E4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Compensator​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00E5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Compensator​Tray​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00E6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Compensator​Rows(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00E7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Compensator​Columns(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00E8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compensator​Pixel​Spacing(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00E9"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compensator​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00EA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compensator​Transmission​Data(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00EB"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Compensator​Thickness​Data(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00EC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Boli(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00ED"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compensator​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00EE"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Compensator​Tray​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00EF"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Blocks(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Total​Block​Tray​Factor(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00F2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Total​Block​Tray​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A00F3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Block​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A00F4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Block​Tray​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A00F5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Block​Tray​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A00F6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Block​Tray​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A00F7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Block​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00F8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Accessory​Code(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A00F9"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Block​Divergence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00FA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Block​Mounting​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A00FB"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Block​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A00FC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Block​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A00FE"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Block​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Block​Transmission(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Block​Number​Of​Points(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Block​Data(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Applicator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0107"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Applicator​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Applicator​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0109"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Applicator​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A010A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Cumulative​Dose​Reference​Coefficient(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A010C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Final​Cumulative​Meterset​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A010E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Control​Points(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Control​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Control​Point​Index(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Nominal​Beam​Energy(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Dose​Rate​Set(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Wedge​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0116"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Wedge​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0118"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Beam​Limiting​Device​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A011A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Leaf​Jaw​Positions(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A011C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Gantry​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A011E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Gantry​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A011F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Beam​Limiting​Device​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Beam​Limiting​Device​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0121"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Patient​Support​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0122"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Support​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0123"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Eccentric​Axis​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0124"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Eccentric​Angle(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0125"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Table​Top​Eccentric​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0126"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Vertical​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0128"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Longitudinal​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0129"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Lateral​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A012A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Isocenter​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A012C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Surface​Entry​Point(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A012E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Surface​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0130"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Average​Beam​Dose​Point​Source​To​External​Contour​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0131"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Source​To​External​Contour​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0132"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle External​Contour​Entry​Point(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0133"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Cumulative​Meterset​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0134"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Top​Pitch​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0140"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Table​Top​Pitch​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0142"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Table​Top​Roll​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0144"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Table​Top​Roll​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0146"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Head​Fixation​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0148"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Gantry​Pitch​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A014A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Gantry​Pitch​Rotation​Direction(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A014C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Gantry​Pitch​Angle​Tolerance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A014E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fixation​Eye(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0150"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Chair​Head​Frame​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0151"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Head​Fixation​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0152"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Chair​Head​Frame​Position​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0153"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Fixation​Light​Azimuthal​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0154"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Fixation​Light​Polar​Angle​Tolerance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0155"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Setup​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0180"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Patient​Setup​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0182"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Setup​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0183"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Additional​Position(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0184"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fixation​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0190"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fixation​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0192"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Fixation​Device​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0194"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Fixation​Device​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A0196"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Fixation​Device​Position(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0198"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Fixation​Device​Pitch​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0199"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Fixation​Device​Roll​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A019A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Shielding​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A01A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Shielding​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A01A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Shielding​Device​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A01A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Shielding​Device​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A01A6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Shielding​Device​Position(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A01A8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Setup​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A01B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Setup​Technique​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A01B2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Setup​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A01B4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Setup​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A01B6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Setup​Device​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A01B8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Setup​Device​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A01BA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Setup​Device​Parameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A01BC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Setup​Reference​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A01D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Vertical​Setup​Displacement(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A01D2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Longitudinal​Setup​Displacement(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A01D4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Table​Top​Lateral​Setup​Displacement(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A01D6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Brachy​Treatment​Technique(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Brachy​Treatment​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Machine​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0206"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Source​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Source​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0214"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0216"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Active​Source​Diameter(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0218"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Active​Source​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A021A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Source​Model​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A021B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A021C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Encapsulation​Nominal​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0222"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Encapsulation​Nominal​Transmission(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0224"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Isotope​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0226"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Isotope​Half​Life(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0228"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Source​Strength​Units(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0229"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Reference​Air​Kerma​Rate(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A022A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Strength(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A022B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Source​Strength​Reference​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("300A022C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Source​Strength​Reference​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("300A022E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Application​Setup​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Application​Setup​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0232"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Application​Setup​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0234"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Application​Setup​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0236"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Application​Setup​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0238"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Template​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0240"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Template​Type(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0242"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Template​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0244"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Total​Reference​Air​Kerma(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0250"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Brachy​Accessory​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0260"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Brachy​Accessory​Device​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0262"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Brachy​Accessory​Device​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0263"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Brachy​Accessory​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0264"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Brachy​Accessory​Device​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0266"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Brachy​Accessory​Device​Nominal​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A026A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Brachy​Accessory​Device​Nominal​Transmission(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A026C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Effective​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0271"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Inner​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0272"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Afterloader​Channel​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0273"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Applicator​Tip​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0274"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0280"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Channel​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0282"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0284"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Total​Time(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0286"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Source​Movement​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0288"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Pulses(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A028A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Pulse​Repetition​Interval(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A028C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Source​Applicator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0290"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Source​Applicator​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0291"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Source​Applicator​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0292"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Applicator​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0294"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Applicator​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0296"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Source​Applicator​Manufacturer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0298"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Applicator​Wall​Nominal​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A029C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Applicator​Wall​Nominal​Transmission(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A029E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​Applicator​Step​Size(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Transfer​Tube​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A02A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Transfer​Tube​Length(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Channel​Shield​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A02B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Channel​Shield​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A02B2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Channel​Shield​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A02B3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Channel​Shield​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A02B4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Shield​Nominal​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02B8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Channel​Shield​Nominal​Transmission(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02BA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Final​Cumulative​Time​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02C8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Brachy​Control​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A02D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Control​Point​Relative​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02D2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Control​Point3D​Position(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02D4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Cumulative​Time​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02D6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compensator​Divergence(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A02E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Compensator​Mounting​Position(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A02E1"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Source​To​Compensator​Distance(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A02E2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Total​Compensator​Tray​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A02E3"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Compensator​Tray​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A02E4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Compensator​Column​Offset(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A02E5"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Compensator​Distances(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A02E6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Compensator​Relative​Stopping​Power​Ratio(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A02E7"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Compensator​Milling​Tool​Diameter(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A02E8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Range​Compensator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A02EA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Compensator​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("300A02EB"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Radiation​Mass​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Radiation​Atomic​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0304"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Radiation​Charge​State(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("300A0306"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scan​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0308"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Modulated​Scan​Mode​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0309"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Virtual​Source​Axis​Distances(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A030A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Snout​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A030C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Snout​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A030D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Snout​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A030F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Range​Shifters(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0312"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Range​Shifter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0314"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Range​Shifter​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0316"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Range​Shifter​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0318"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Range​Shifter​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0320"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Range​Shifter​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0322"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Lateral​Spreading​Devices(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0330"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Lateral​Spreading​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0332"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Lateral​Spreading​Device​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0334"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Lateral​Spreading​Device​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0336"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Lateral​Spreading​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0338"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Lateral​Spreading​Device​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A033A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Lateral​Spreading​Device​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A033C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Range​Modulators(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0340"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Range​Modulator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0342"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Range​Modulator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0344"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Range​Modulator​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0346"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Range​Modulator​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0348"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Range​Modulator​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A034A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Beam​Current​Modulation​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A034C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Patient​Support​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0350"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Patient​Support​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0352"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Patient​Support​Accessory​Code(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0354"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Tray​Accessory​Code(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0355"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Fixation​Light​Azimuthal​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0356"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Fixation​Light​Polar​Angle(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0358"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Meterset​Rate(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A035A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Range​Shifter​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0360"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Range​Shifter​Setting(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0362"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Range​Shifter​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0364"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Range​Shifter​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0366"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Lateral​Spreading​Device​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0370"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Lateral​Spreading​Device​Setting(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300A0372"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Lateral​Spreading​Device​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0374"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Range​Modulator​Settings​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0380"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Range​Modulator​Gating​Start​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0382"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Range​Modulator​Gating​Stop​Value(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0384"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Range​Modulator​Gating​Start​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0386"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Range​Modulator​Gating​Stop​Water​Equivalent​Thickness(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0388"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Isocenter​To​Range​Modulator​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A038A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Scan​Spot​Time​Offset(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A038F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Scan​Spot​Tune​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0390"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Scan​Spot​Prescribed​Indices(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0391"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Scan​Spot​Positions(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0392"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scan​Spot​Reordered(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0393"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Scan​Spot​Position​Map(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0394"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scan​Spot​Reordering​Allowed(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0395"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Scan​Spot​Meterset​Weights(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0396"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Scanning​Spot​Size(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0398"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Paintings(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A039A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Tolerance​Table​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Beam​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03A2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Beam​Limiting​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03A4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Block​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03A6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Control​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03A8"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Wedge​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03AA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Ion​Wedge​Position​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A03AC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Setup​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0401"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Setup​Image​Comment(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A0402"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Motion​Synchronization​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0410"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Control​Point​Orientation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0412"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence General​Accessory​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0420"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString General​Accessory​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("300A0421"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText General​Accessory​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("300A0422"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString General​Accessory​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0423"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString General​Accessory​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0424"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Source​To​General​Accessory​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0425"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Applicator​Geometry​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0431"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Applicator​Aperture​Shape(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0432"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Applicator​Opening(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0433"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Applicator​Opening​X(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0434"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Applicator​Opening​Y(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0435"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Source​To​Applicator​Mounting​Position​Distance(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0436"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Block​Slab​Items(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300A0440"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Block​Slab​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0441"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Block​Slab​Thickness(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300A0442"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Block​Slab​Number(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("300A0443"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Device​Motion​Control​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0450"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Device​Motion​Execution​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0451"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Device​Motion​Observation​Mode(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0452"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Device​Motion​Parameter​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0453"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distal​Depth​Fraction(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0501"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Distal​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0502"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Nominal​Range​Modulation​Fractions(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0503"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Nominal​Range​Modulated​Region​Depths(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0504"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Depth​Dose​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0505"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Delivered​Depth​Dose​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300A0506"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Delivered​Distal​Depth​Fraction(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0507"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Delivered​Distal​Depth(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0508"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Delivered​Nominal​Range​Modulation​Fractions(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0509"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Delivered​Nominal​Range​Modulated​Region​Depths(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("300A0510"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Delivered​Reference​Dose​Definition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0511"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reference​Dose​Definition(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300A0512"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​RT​Plan​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Beam​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Beam​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Reference​Image​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Start​Cumulative​Meterset​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300C0008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString End​Cumulative​Meterset​Weight(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("300C0009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Brachy​Application​Setup​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Brachy​Application​Setup​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Source​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Fraction​Group​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Fraction​Group​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Verification​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Reference​Image​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Dose​Reference​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Brachy​Referenced​Dose​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Structure​Set​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Patient​Setup​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C006A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Dose​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Tolerance​Table​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00A0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Bolus​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C00B0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Wedge​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00C0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Compensator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00D0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Block​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00E0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Control​Point​Index(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00F0"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Control​Point​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C00F2"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Start​Control​Point​Index(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00F4"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Stop​Control​Point​Index(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C00F6"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Range​Shifter​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Lateral​Spreading​Device​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Referenced​Range​Modulator​Number(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("300C0104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Omitted​Beam​Task​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("300C0111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Reason​For​Omission(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300C0112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reason​For​Omission​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("300C0113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Approval​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("300E0002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Review​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("300E0004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Review​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("300E0005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Reviewer​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("300E0008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Radiobiological​Dose​Effect​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Radiobiological​Dose​Effect​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Effective​Dose​Calculation​Method​Category​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Effective​Dose​Calculation​Method​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Effective​Dose​Method​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Conceptual​Volume​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30100006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Originating​SOPInstance​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Constituent​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Equivalent​Conceptual​Volume​Instance​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Equivalent​Conceptual​Volumes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010000A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Conceptual​Volume​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("3010000B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Conceptual​Volume​Combination​Expression(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("3010000C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Conceptual​Volume​Constituent​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010000D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Conceptual​Volume​Combination​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3010000E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Conceptual​Volume​Combination​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("3010000F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Conceptual​Volume​Segmentation​Defined​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Segmentation​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Constituent​Segmentation​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Constituent​Conceptual​Volume​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30100013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Derivation​Conceptual​Volume​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Source​Conceptual​Volume​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30100015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Derivation​Algorithm​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Conceptual​Volume​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30100017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Source​Conceptual​Volume​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Author​Identification​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Manufacturers​Model​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("3010001A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedCharacter Device​Alternate​Identifier(params String[] data)
        {
            var element = (new UnlimitedCharacter());
            element.Tag = (new Tag("3010001B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Device​Alternate​Identifier​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3010001C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Device​Alternate​Identifier​Format(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("3010001D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Segmentation​Creation​Template​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("3010001E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Segmentation​Template​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("3010001F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Segment​Reference​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Segment​Reference​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Direct​Segment​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Combination​Segment​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segmented​RTAccessory​Device​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Related​Segment​Characteristics​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Segment​Characteristics​Precedence(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTSegment​Annotation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010002A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Annotation​Category​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010002B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Segment​Annotation​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010002C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Device​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("3010002D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Device​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010002E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Equipment​Relationship​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Fiducials​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30100031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Patient​Treatment​Orientation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100032"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString User​Content​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30100033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString User​Content​Long​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Entity​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("30100035"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Entity​Name(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100036"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Entity​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30100037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Entity​Long​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Device​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort RTTreatment​Phase​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010003A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier RTTreatment​Phase​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("3010003B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort RTPrescription​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010003C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort RTSegment​Annotation​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010003D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Basis​RTTreatment​Phase​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010003E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Related​RTTreatment​Phase​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010003F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​RTTreatment​Phase​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​RTPrescription​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​Parent​RTPrescription​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Manufacturer​Device​Identifier(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("30100043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Instance​Level​Referenced​Performed​Procedure​Step​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RTTreatment​Phase​Intent​Presence​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Radiotherapy​Treatment​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Teletherapy​Radiation​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Brachytherapy​Source​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​RTTreatment​Phase​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100049"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Direct​Segment​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010004A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Intended​RTTreatment​Phase​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010004B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Intended​Phase​Start​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("3010004C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Intended​Phase​End​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("3010004D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTTreatment​Phase​Interval​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010004E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Temporal​Relationship​Interval​Anchor(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("3010004F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Minimum​Number​Of​Interval​Days(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("30100050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Maximum​Number​Of​Interval​Days(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("30100051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Pertinent​SOPClasses​In​Study(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30100052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Pertinent​SOPClasses​In​Series(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("30100053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString RTPrescription​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTPhysician​Intent​Predecessor​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString RTTreatment​Approach​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTPhysician​Intent​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100057"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort RTPhysician​Intent​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString RTTreatment​Intent​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100059"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText RTPhysician​Intent​Narrative(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("3010005A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTProtocol​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010005B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Reason​For​Superseding(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("3010005C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTDiagnosis​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010005D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Referenced​RTPhysician​Intent​Index(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010005E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTPhysician​Intent​Input​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010005F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTAnatomic​Prescription​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Prior​Treatment​Dose​Description(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("30100061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Prior​Treatment​Reference​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dosimetric​Objective​Evaluation​Scope(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Therapeutic​Role​Category​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Therapeutic​Role​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100065"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Conceptual​Volume​Optimization​Precedence(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("30100066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Category​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Conceptual​Volume​Blocking​Constraint(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Conceptual​Volume​Type​Modifier​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010006A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTPrescription​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010006B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dosimetric​Objective​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010006C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dosimetric​Objective​Type​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("3010006D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Dosimetric​Objective​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("3010006E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier Referenced​Dosimetric​Objective​UID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("3010006F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Dosimetric​Objective​Parameter​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Dosimetric​Objectives​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Absolute​Dosimetric​Objective​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Dosimetric​Objective​Weight(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("30100074"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Dosimetric​Objective​Purpose(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Planning​Input​Information​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Treatment​Site(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("30100077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Treatment​Site​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fraction​Pattern​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100079"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Treatment​Technique​Notes(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("3010007A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Prescription​Notes(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("3010007B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Interval​Fractions(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("3010007C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Fractions(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010007D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Intended​Delivery​Duration(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("3010007E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnlimitedText Fractionation​Notes(params String[] data)
        {
            var element = (new UnlimitedText());
            element.Tag = (new Tag("3010007F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence RTTreatment​Technique​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100080"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Prescription​Notes​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100081"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Fraction​Based​Relationship​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100082"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Fraction​Based​Relationship​Interval​Anchor(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("30100083"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble Minimum​Hours​Between​Fractions(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("30100084"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Intended​Fraction​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("30100085"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Intended​Start​Day​Of​Week(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("30100086"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Weekday​Fraction​Pattern​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100087"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Delivery​Time​Structure​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("30100088"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Arbitrary(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("40000010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Text​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("40004000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Results​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40080040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Results​ID​Issuer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("40080042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​Interpretation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40080050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Report​Production​Status​Trial(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("400800FF"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Interpretation​Recorded​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("40080100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Interpretation​Recorded​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("40080101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Interpretation​Recorder(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("40080102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Reference​To​Recorded​Sound(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("40080103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Interpretation​Transcription​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("40080108"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Interpretation​Transcription​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("40080109"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Interpretation​Transcriber(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("4008010A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Interpretation​Text(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("4008010B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Interpretation​Author(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("4008010C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Interpretation​Approver​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40080111"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Date Interpretation​Approval​Date(params System.DateTime?[] data)
        {
            var element = (new Date());
            element.Tag = (new Tag("40080112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Time Interpretation​Approval​Time(params System.DateTime?[] data)
        {
            var element = (new Time());
            element.Tag = (new Tag("40080113"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Physician​Approving​Interpretation(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("40080114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Interpretation​Diagnosis​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("40080115"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Interpretation​Diagnosis​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40080117"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Results​Distribution​List​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40080118"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static PersonName Distribution​Name(params String[] data)
        {
            var element = (new PersonName());
            element.Tag = (new Tag("40080119"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Distribution​Address(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("4008011A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Interpretation​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40080200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Interpretation​ID​Issuer(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("40080202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Interpretation​Type​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40080210"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Interpretation​Status​ID(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40080212"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Impressions(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("40080300"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText Results​Comments(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("40084000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Low​Energy​Detectors(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40100001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString High​Energy​Detectors(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40100002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Detector​Geometry​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40100004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Threat​ROI​Voxel​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Threat​ROI​Base(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Threat​ROI​Extents(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Threat​ROI​Bitmap(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("40101006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Route​Segment​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40101007"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Gantry​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString OOI​Owner​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Route​Segment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("4010100A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Potential​Threat​Object​ID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("40101010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Threat​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Threat​Category(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Threat​Category​Description(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("40101013"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ATD​Ability​Assessment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101014"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString ATD​Assessment​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle ATD​Assessment​Probability(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101016"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Mass(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101017"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Density(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101018"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Z​Effective(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101019"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Boarding​Pass​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("4010101A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Center​Of​Mass(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("4010101B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Center​Of​PTO(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("4010101C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Bounding​Polygon(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("4010101D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Route​Segment​Start​Location​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("4010101E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Route​Segment​End​Location​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("4010101F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Route​Segment​Location​ID​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Abort​Reason(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Volume​Of​PTO(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Abort​Flag(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101024"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Route​Segment​Start​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("40101025"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Route​Segment​End​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("40101026"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString TDR​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101027"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString International​Route​Segment(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101028"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Threat​Detection​Algorithmand​Version(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("40101029"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Assigned​Location(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("4010102A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime Alarm​Decision​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("4010102B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Alarm​Decision(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101031"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Total​Objects(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("40101033"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Alarm​Objects(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("40101034"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PTO​Representation​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101037"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence ATD​Assessment​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101038"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString TIP​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101039"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString DICOS​Version(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("4010103A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Element.DateTime OOI​Owner​Creation​Time(params System.DateTime?[] data)
        {
            var element = (new Element.DateTime());
            element.Tag = (new Tag("40101041"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString OOI​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101042"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle OOI​Size(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101043"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Acquisition​Status(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101044"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Basis​Materials​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Phantom​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101046"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence OOI​Owner​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101047"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Scan​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101048"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Itinerary​ID(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("40101051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Itinerary​ID​Type(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40101052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Itinerary​ID​Assigning​Authority(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("40101053"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Route​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40101054"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Route​ID​Assigning​Authority(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40101055"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Inbound​Arrival​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101056"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Carrier​ID(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("40101058"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Carrier​ID​Assigning​Authority(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101059"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Source​Orientation(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Source​Position(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Belt​Height(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Algorithm​Routing​Code​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101064"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Transport​Classification(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101067"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText OOI​Type​Descriptor(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("40101068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Total​Processing​Time(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("40101069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Detector​Calibration​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("4010106C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Additional​Screening​Performed(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("4010106D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Additional​Inspection​Selection​Criteria(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("4010106E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Additional​Inspection​Method​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("4010106F"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString AIT​Device​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("40101070"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence QR​Measurements​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101071"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Target​Material​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101072"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointDouble SNR​Threshold(params Double[] data)
        {
            var element = (new FloatingPointDouble());
            element.Tag = (new Tag("40101073"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString Image​Scale​Representation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("40101075"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​PTO​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101076"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Referenced​TDR​Instance​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101077"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortText PTO​Location​Description(params String[] data)
        {
            var element = (new ShortText());
            element.Tag = (new Tag("40101078"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Anomaly​Locator​Indicator​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("40101079"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static FloatingPointSingle Anomaly​Locator​Indicator(params Single[] data)
        {
            var element = (new FloatingPointSingle());
            element.Tag = (new Tag("4010107A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence PTO​Region​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("4010107B"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Inspection​Selection​Criteria(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("4010107C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Secondary​Inspection​Method​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("4010107D"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString PRCS​To​RCS​Orientation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("4010107E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence MAC​Parameters​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("4FFE0001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Curve​Dimensions(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Points(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Type​Of​Data(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("50xx0020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Curve​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("50xx0022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Axis​Units(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("50xx0030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Axis​Labels(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("50xx0040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Data​Value​Representation(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Minimum​Coordinate​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0104"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Maximum​Coordinate​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0105"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Curve​Range(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("50xx0106"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Curve​Data​Descriptor(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Coordinate​Start​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Coordinate​Step​Value(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx0114"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Curve​Activation​Layer(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("50xx1001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Audio​Type(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx2000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Audio​Sample​Format(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx2002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Number​Of​Channels(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx2004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Number​Of​Samples(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("50xx2006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Sample​Rate(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("50xx2008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong Total​Time(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("50xx200A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Audio​Sample​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("50xx200C"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Audio​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("50xx200E"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Curve​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("50xx2500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Curve​Referenced​Overlay​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("50xx2600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Curve​Referenced​Overlay​Group(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("50xx2610"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Curve​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("50xx3000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Shared​Functional​Groups​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("52009229"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Per​Frame​Functional​Groups​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("52009230"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Waveform​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("54000100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Channel​Minimum​Value(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("54000110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Channel​Maximum​Value(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("54000112"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Waveform​Bits​Allocated(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("54001004"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Waveform​Sample​Interpretation(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("54001006"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Waveform​Padding​Value(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("5400100A"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Waveform​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("54001010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString First​Order​Phase​Correction​Angle(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("56000010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Spectroscopy​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("56000020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Rows(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Columns(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Planes(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0012"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString Number​Of​Frames​In​Overlay(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("60xx0015"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Overlay​Description(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("60xx0022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Type(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("60xx0040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Overlay​Subtype(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("60xx0045"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static SignedShort Overlay​Origin(params Int16[] data)
        {
            var element = (new SignedShort());
            element.Tag = (new Tag("60xx0050"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Image​Frame​Origin(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0051"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Plane​Origin(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0052"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Compression​Code(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("60xx0060"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Overlay​Compression​Originator(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("60xx0061"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ShortString Overlay​Compression​Label(params String[] data)
        {
            var element = (new ShortString());
            element.Tag = (new Tag("60xx0062"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Compression​Description(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("60xx0063"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Overlay​Compression​Step​Pointers(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("60xx0066"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Repeat​Interval(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0068"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Bits​Grouped(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0069"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Bits​Allocated(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Bit​Position(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Format(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("60xx0110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Location(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Code​Label(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("60xx0800"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Number​Of​Tables(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0802"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag Overlay​Code​Table​Location(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("60xx0803"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Bits​For​Code​Word(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx0804"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static CodeString Overlay​Activation​Layer(params String[] data)
        {
            var element = (new CodeString());
            element.Tag = (new Tag("60xx1001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Descriptor​Gray(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Descriptor​Red(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1101"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Descriptor​Green(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1102"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlay​Descriptor​Blue(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1103"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlays​Gray(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1200"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlays​Red(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1201"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlays​Green(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1202"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Overlays​Blue(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("60xx1203"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static IntegerString ROI​Area(params Int32[] data)
        {
            var element = (new IntegerString());
            element.Tag = (new Tag("60xx1301"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString ROI​Mean(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("60xx1302"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static DecimalString ROI​Standard​Deviation(params Double[] data)
        {
            var element = (new DecimalString());
            element.Tag = (new Tag("60xx1303"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString Overlay​Label(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("60xx1500"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Overlay​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("60xx3000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongText Overlay​Comments(params String[] data)
        {
            var element = (new LongText());
            element.Tag = (new Tag("60xx4000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherFloatString Float​​Pixel​​Data(params Byte[] data)
        {
            var element = (new OtherFloatString());
            element.Tag = (new Tag("7FE00008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherDoubleString Double​Float​Pixel​​Data(params Byte[] data)
        {
            var element = (new OtherDoubleString());
            element.Tag = (new Tag("7FE00009"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Pixel​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("7FE00010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Coefficients​SDVN(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("7FE00020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Coefficients​SDHN(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("7FE00030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Coefficients​SDDN(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("7FE00040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Variable​Pixel​Data(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("7Fxx0010"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Variable​Next​Data​Group(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("7Fxx0011"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Variable​Coefficients​SDVN(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("7Fxx0020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Variable​Coefficients​SDHN(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("7Fxx0030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherWordString Variable​Coefficients​SDDN(params Byte[] data)
        {
            var element = (new OtherWordString());
            element.Tag = (new Tag("7Fxx0040"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static Sequence Digital​Signatures​Sequence(params DICOMObject[] data)
        {
            var element = (new Sequence());
            element.Tag = (new Tag("FFFAFFFA"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static OtherByteString Data​Set​Trailing​Padding(params Byte[] data)
        {
            var element = (new OtherByteString());
            element.Tag = (new Tag("FFFCFFFC"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedLong CommandGroupLength(params UInt32[] data)
        {
            var element = (new UnsignedLong());
            element.Tag = (new Tag("00000000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier AffectedSOPClassUID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00000002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier RequestedSOPClassUID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00000003"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort CommandField(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000100"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MessageID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000110"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MessageIDBeingRespondedTo(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000120"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity MoveDestination(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00000600"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Priority(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000700"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort CommandDataSetType(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000800"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort Status(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000900"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag OffendingElement(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00000901"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static LongString ErrorComment(params String[] data)
        {
            var element = (new LongString());
            element.Tag = (new Tag("00000902"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort ErrorID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00000903"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier AffectedSOPInstanceUID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00001000"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UniqueIdentifier RequestedSOPInstanceUID(params String[] data)
        {
            var element = (new UniqueIdentifier());
            element.Tag = (new Tag("00001001"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort EventTypeID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001002"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static AttributeTag AttributeIdentifierList(params Tag[] data)
        {
            var element = (new AttributeTag());
            element.Tag = (new Tag("00001005"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort ActionTypeID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001008"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort NumberOfRemainingSuboperations(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001020"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort NumberOfCompletedSuboperations(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001021"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort NumberOfFailedSuboperations(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001022"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort NumberOfWarningSuboperations(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001023"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static ApplicationEntity MoveOriginatorApplicationEntityTitle(params String[] data)
        {
            var element = (new ApplicationEntity());
            element.Tag = (new Tag("00001030"));
            element.Data_ = (data?.ToList());
            return element;
        }

        public static UnsignedShort MoveOriginatorMessageID(params UInt16[] data)
        {
            var element = (new UnsignedShort());
            element.Tag = (new Tag("00001031"));
            element.Data_ = (data?.ToList());
            return element;
        }
    }
}